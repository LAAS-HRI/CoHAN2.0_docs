<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="distance__calculations_8h" kind="file" language="C++">
    <compoundname>distance_calculations.h</compoundname>
    <includes refid="misc_8h" local="no">hateb_local_planner/misc.h</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">algorithm</includes>
    <includedby refid="obstacles_8h" local="no">obstacles.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>Eigen/Core</label>
      </node>
      <node id="2">
        <label>hateb_local_planner/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="5">
        <label>boost/utility.hpp</label>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="1">
        <label>distance_calculations.h</label>
        <link refid="distance__calculations_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>boost/type_traits.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12">
        <label>edge_obstacle.h</label>
        <link refid="edge__obstacle_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>obstacles.cpp</label>
        <link refid="obstacles_8cpp"/>
      </node>
      <node id="17">
        <label>edge_agent_robot_rel_velocity.h</label>
        <link refid="edge__agent__robot__rel__velocity_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>edge_velocity.h</label>
        <link refid="edge__velocity_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>footprint_model.h</label>
        <link refid="footprint__model_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>visualization.cpp</label>
        <link refid="visualization_8cpp"/>
      </node>
      <node id="7">
        <label>hateb_local_planner_ros.cpp</label>
        <link refid="hateb__local__planner__ros_8cpp"/>
      </node>
      <node id="14">
        <label>base_teb_edges.h</label>
        <link refid="base__teb__edges_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>edge_shortest_path.h</label>
        <link refid="edge__shortest__path_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>edge_invisible_human.h</label>
        <link refid="edge__invisible__human_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>timed_elastic_band.cpp</label>
        <link refid="timed__elastic__band_8cpp"/>
      </node>
      <node id="30">
        <label>timed_elastic_band.hpp</label>
        <link refid="timed__elastic__band_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>edge_dynamic_obstacle.h</label>
        <link refid="edge__dynamic__obstacle_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>edge_agent_robot_visibility.h</label>
        <link refid="edge__agent__robot__visibility_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>timed_elastic_band.h</label>
        <link refid="timed__elastic__band_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>obstacles.h</label>
        <link refid="obstacles_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>edge_via_point.h</label>
        <link refid="edge__via__point_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>edge_kinematics.h</label>
        <link refid="edge__kinematics_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>edge_agent_agent_safety.h</label>
        <link refid="edge__agent__agent__safety_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>hateb_config.cpp</label>
        <link refid="hateb__config_8cpp"/>
      </node>
      <node id="13">
        <label>hateb_config.h</label>
        <link refid="hateb__config_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>hateb_local_planner_ros.h</label>
        <link refid="hateb__local__planner__ros_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>edge_static_agent_visibility.h</label>
        <link refid="edge__static__agent__visibility_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>optimal_planner.h</label>
        <link refid="optimal__planner_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>edge_agent_robot_safety.h</label>
        <link refid="edge__agent__robot__safety_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>edge_time_optimal.h</label>
        <link refid="edge__time__optimal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>optimal_planner.cpp</label>
        <link refid="optimal__planner_8cpp"/>
      </node>
      <node id="1">
        <label>distance_calculations.h</label>
        <link refid="distance__calculations_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>visualization.hpp</label>
        <link refid="visualization_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>edge_acceleration.h</label>
        <link refid="edge__acceleration_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>visualization.h</label>
        <link refid="visualization_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>edge_prefer_rotdir.h</label>
        <link refid="edge__prefer__rotdir_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacehateb__local__planner">hateb_local_planner</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Software<sp/>License<sp/>Agreement<sp/>(BSD<sp/>License)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(c)<sp/>2016,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>TU<sp/>Dortmund<sp/>-<sp/>Institute<sp/>of<sp/>Control<sp/>Theory<sp/>and<sp/>Systems<sp/>Engineering.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>institute<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Christoph<sp/>Rösmann</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Minor<sp/>Modifications<sp/>by:<sp/>Phani<sp/>Teja<sp/>Singamaneni</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DISTANCE_CALCULATIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DISTANCE_CALCULATIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="misc_8h" kindref="compound">hateb_local_planner/misc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehateb__local__planner" kindref="compound">hateb_local_planner</ref><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref><sp/>=<sp/>std::vector&lt;Eigen::Vector2d,<sp/>Eigen::aligned_allocator&lt;Eigen::Vector2d&gt;&gt;;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="namespacehateb__local__planner_1af895105afa3bbde12cf912915473fcb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Vector2d<sp/><ref refid="namespacehateb__local__planner_1af895105afa3bbde12cf912915473fcb1" kindref="member">closest_point_on_line_segment_2d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line_start,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line_end)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/>diff<sp/>=<sp/>line_end<sp/>-<sp/>line_start;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_norm<sp/>=<sp/>diff.squaredNorm();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sq_norm<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_start;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>((point.x()<sp/>-<sp/>line_start.x())<sp/>*<sp/>diff.x()<sp/>+<sp/>(point.y()<sp/>-<sp/>line_start.y())<sp/>*<sp/>diff.y())<sp/>/<sp/>sq_norm;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_start;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_end;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_start<sp/>+<sp/>u<sp/>*<sp/>diff;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line_end)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(point<sp/>-<sp/><ref refid="namespacehateb__local__planner_1af895105afa3bbde12cf912915473fcb1" kindref="member">closest_point_on_line_segment_2d</ref>(point,<sp/>line_start,<sp/>line_end)).norm();</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="namespacehateb__local__planner_1aa6390beb4d01c1661e1c7523f74a93b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aa6390beb4d01c1661e1c7523f74a93b2" kindref="member">check_line_segments_intersection_2d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line1_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line1_end,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line2_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line2_end,<sp/>Eigen::Vector2d*<sp/>intersection<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_numer;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_numer;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denom;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/>line1<sp/>=<sp/>line1_end<sp/>-<sp/>line1_start;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/>line2<sp/>=<sp/>line2_end<sp/>-<sp/>line2_start;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>denom<sp/>=<sp/>line1.x()<sp/>*<sp/>line2.y()<sp/>-<sp/>line2.x()<sp/>*<sp/>line1.y();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>Collinear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>denom_positive<sp/>=<sp/>denom<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/>aux<sp/>=<sp/>line1_start<sp/>-<sp/>line2_start;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>s_numer<sp/>=<sp/>line1.x()<sp/>*<sp/>aux.y()<sp/>-<sp/>line1.y()<sp/>*<sp/>aux.x();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s_numer<sp/>&lt;<sp/>0)<sp/>==<sp/>denom_positive)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>t_numer<sp/>=<sp/>line2.x()<sp/>*<sp/>aux.y()<sp/>-<sp/>line2.y()<sp/>*<sp/>aux.x();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t_numer<sp/>&lt;<sp/>0)<sp/>==<sp/>denom_positive)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((s_numer<sp/>&gt;<sp/>denom)<sp/>==<sp/>denom_positive)<sp/>||<sp/>((t_numer<sp/>&gt;<sp/>denom)<sp/>==<sp/>denom_positive))<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>collision<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>t_numer<sp/>/<sp/>denom;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intersection)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>*intersection<sp/>=<sp/>line1_start<sp/>+<sp/>t<sp/>*<sp/>line1;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="namespacehateb__local__planner_1ac2e2d2432c7bf42cd93079ae086f9b27" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ac2e2d2432c7bf42cd93079ae086f9b27" kindref="member">distance_segment_to_segment_2d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line1_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line1_end,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line2_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line2_end)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(unknown):<sp/>more<sp/>efficient<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>segments<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacehateb__local__planner_1aa6390beb4d01c1661e1c7523f74a93b2" kindref="member">check_line_segments_intersection_2d</ref>(line1_start,<sp/>line1_end,<sp/>line2_start,<sp/>line2_end))<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>all<sp/>4<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>std::array&lt;double,<sp/>4&gt;<sp/>distances;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>distances[0]<sp/>=<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(line1_start,<sp/>line2_start,<sp/>line2_end);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>distances[1]<sp/>=<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(line1_end,<sp/>line2_start,<sp/>line2_end);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>distances[2]<sp/>=<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(line2_start,<sp/>line1_start,<sp/>line1_end);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>distances[3]<sp/>=<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(line2_end,<sp/>line1_start,<sp/>line1_end);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::min_element(distances.begin(),<sp/>distances.end());</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" kindref="member">distance_point_to_polygon_2d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>vertices)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>HUGE_VAL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>polygon<sp/>is<sp/>a<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(point<sp/>-<sp/>vertices.front()).norm();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>each<sp/>polygon<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(vertices.size())<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_dist<sp/>=<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(point,<sp/>vertices.at(i),<sp/>vertices.at(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>new_dist<sp/>=<sp/>calc_distance_point_to_segment(<sp/>position,<sp/><sp/>vertices.at(i),<sp/>vertices.at(i+1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>std::min(new_dist,<sp/>dist);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>&gt;<sp/>2)<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>a<sp/>line<sp/>close<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_dist<sp/>=<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(point,<sp/>vertices.back(),<sp/>vertices.front());<sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>last<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_dist<sp/>&lt;<sp/>dist)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_dist;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="namespacehateb__local__planner_1ae53d0dcfdd477c66b3ae14cad3100f1d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ae53d0dcfdd477c66b3ae14cad3100f1d" kindref="member">distance_segment_to_polygon_2d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>vertices)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>HUGE_VAL;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>polygon<sp/>is<sp/>a<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(vertices.front(),<sp/>line_start,<sp/>line_end);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>each<sp/>polygon<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(vertices.size())<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_dist<sp/>=<sp/><ref refid="namespacehateb__local__planner_1ac2e2d2432c7bf42cd93079ae086f9b27" kindref="member">distance_segment_to_segment_2d</ref>(line_start,<sp/>line_end,<sp/>vertices.at(i),<sp/>vertices.at(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>new_dist<sp/>=<sp/>calc_distance_point_to_segment(<sp/>position,<sp/><sp/>vertices.at(i),<sp/>vertices.at(i+1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>std::min(new_dist,<sp/>dist);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>&gt;<sp/>2)<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>a<sp/>line<sp/>close<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_dist<sp/>=<sp/><ref refid="namespacehateb__local__planner_1ac2e2d2432c7bf42cd93079ae086f9b27" kindref="member">distance_segment_to_segment_2d</ref>(line_start,<sp/>line_end,<sp/>vertices.back(),<sp/>vertices.front());<sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>last<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_dist<sp/>&lt;<sp/>dist)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_dist;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="namespacehateb__local__planner_1a7390a4788c5cdca6fecac1aa7315958e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a7390a4788c5cdca6fecac1aa7315958e" kindref="member">distance_polygon_to_polygon_2d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>vertices1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>vertices2)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>HUGE_VAL;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>polygon1<sp/>is<sp/>a<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices1.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" kindref="member">distance_point_to_polygon_2d</ref>(vertices1.front(),<sp/>vertices2);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>each<sp/>edge<sp/>of<sp/>polygon1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(vertices1.size())<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_dist<sp/>=<sp/><ref refid="namespacehateb__local__planner_1ae53d0dcfdd477c66b3ae14cad3100f1d" kindref="member">distance_segment_to_polygon_2d</ref>(vertices1[i],<sp/>vertices1[i<sp/>+<sp/>1],<sp/>vertices2);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>std::min(new_dist,<sp/>dist);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices1.size()<sp/>&gt;<sp/>2)<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>a<sp/>line<sp/>close<sp/>polygon1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_dist<sp/>=<sp/><ref refid="namespacehateb__local__planner_1ae53d0dcfdd477c66b3ae14cad3100f1d" kindref="member">distance_segment_to_polygon_2d</ref>(vertices1.back(),<sp/>vertices1.front(),<sp/>vertices2);<sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>last<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_dist<sp/>&lt;<sp/>dist)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_dist;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Further<sp/>distance<sp/>calculations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Distance<sp/>Calculations<sp/>are<sp/>mainly<sp/>copied<sp/>from<sp/>http://geomalgorithms.com/a07-_distance.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2001<sp/>softSurfer,<sp/>2012<sp/>Dan<sp/>Sunday</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>may<sp/>be<sp/>freely<sp/>used<sp/>and<sp/>modified<sp/>for<sp/>any<sp/>purpose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>providing<sp/>that<sp/>this<sp/>copyright<sp/>notice<sp/>is<sp/>included<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SoftSurfer<sp/>makes<sp/>no<sp/>warranty<sp/>for<sp/>this<sp/>code,<sp/>and<sp/>cannot<sp/>be<sp/>held</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>liable<sp/>for<sp/>any<sp/>real<sp/>or<sp/>imagined<sp/>damage<sp/>resulting<sp/>from<sp/>its<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Users<sp/>of<sp/>this<sp/>code<sp/>must<sp/>verify<sp/>correctness<sp/>for<sp/>their<sp/>application.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="namespacehateb__local__planner_1accc129d7b0acdd86b557bf37bbb0cd15" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1accc129d7b0acdd86b557bf37bbb0cd15" kindref="member">calc_distance_line_to_line_3d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector3d&gt;&amp;<sp/>x1,<sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector3d&gt;&amp;<sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector3d&gt;&amp;<sp/>x2,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector3d&gt;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>w<sp/>=<sp/>x2<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>u.squaredNorm();<sp/><sp/></highlight><highlight class="comment">//<sp/>dot(u,u)<sp/>always<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>u.dot(v);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>v.squaredNorm();<sp/><sp/></highlight><highlight class="comment">//<sp/>dot(v,v)<sp/>always<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>u.dot(w);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>v.dot(w);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>(a<sp/>*<sp/>c)<sp/>-<sp/>(b<sp/>*<sp/>b);<sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sc;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tc;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>line<sp/>parameters<sp/>of<sp/>the<sp/>two<sp/>closest<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D<sp/>&lt;<sp/><ref refid="misc_8h_1a63e45eaf93729d5707b89a5340d68334" kindref="member">SMALL_NUM</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lines<sp/>are<sp/>almost<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>sc<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>tc<sp/>=<sp/>(b<sp/>&gt;<sp/>c<sp/>?<sp/>d<sp/>/<sp/>b<sp/>:<sp/>e<sp/>/<sp/>c);<sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>largest<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>sc<sp/>=<sp/>(b<sp/>*<sp/>e<sp/>-<sp/>c<sp/>*<sp/>d)<sp/>/<sp/>D;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>tc<sp/>=<sp/>(a<sp/>*<sp/>e<sp/>-<sp/>b<sp/>*<sp/>d)<sp/>/<sp/>D;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>difference<sp/>of<sp/>the<sp/>two<sp/>closest<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>d_p<sp/>=<sp/>w<sp/>+<sp/>(sc<sp/>*<sp/>u)<sp/>-<sp/>(tc<sp/>*<sp/>v);<sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/><sp/>L1(sc)<sp/>-<sp/>L2(tc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d_p.norm();<sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>closest<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="namespacehateb__local__planner_1ad608f81b0ad730706ceece80d5dac429" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ad608f81b0ad730706ceece80d5dac429" kindref="member">calc_distance_segment_to_segment3D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector3d&gt;&amp;<sp/>line1_start,<sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector3d&gt;&amp;<sp/>line1_end,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector3d&gt;&amp;<sp/>line2_start,<sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector3d&gt;&amp;<sp/>line2_end)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>u<sp/>=<sp/>line1_end<sp/>-<sp/>line1_start;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>v<sp/>=<sp/>line2_end<sp/>-<sp/>line2_start;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>w<sp/>=<sp/>line2_start<sp/>-<sp/>line1_start;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>u.squaredNorm();<sp/><sp/></highlight><highlight class="comment">//<sp/>dot(u,u)<sp/>always<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>u.dot(v);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>v.squaredNorm();<sp/><sp/></highlight><highlight class="comment">//<sp/>dot(v,v)<sp/>always<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>u.dot(w);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>v.dot(w);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>(a<sp/>*<sp/>c)<sp/>-<sp/>(b<sp/>*<sp/>b);<sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sc;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sN;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sD<sp/>=<sp/>D;<sp/><sp/></highlight><highlight class="comment">//<sp/>sc<sp/>=<sp/>sN<sp/>/<sp/>sD,<sp/>default<sp/>sD<sp/>=<sp/>D<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tc;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tN;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tD<sp/>=<sp/>D;<sp/><sp/></highlight><highlight class="comment">//<sp/>tc<sp/>=<sp/>tN<sp/>/<sp/>tD,<sp/>default<sp/>tD<sp/>=<sp/>D<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>line<sp/>parameters<sp/>of<sp/>the<sp/>two<sp/>closest<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D<sp/>&lt;<sp/><ref refid="misc_8h_1a63e45eaf93729d5707b89a5340d68334" kindref="member">SMALL_NUM</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lines<sp/>are<sp/>almost<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>0.0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>using<sp/>point<sp/>P0<sp/>on<sp/>segment<sp/>S1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>sD<sp/>=<sp/>1.0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>prevent<sp/>possible<sp/>division<sp/>by<sp/>0.0<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>tD<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>closest<sp/>points<sp/>on<sp/>the<sp/>infinite<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>(b<sp/>*<sp/>e<sp/>-<sp/>c<sp/>*<sp/>d);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>(a<sp/>*<sp/>e<sp/>-<sp/>b<sp/>*<sp/>d);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sN<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>sc<sp/>&lt;<sp/>0<sp/>=&gt;<sp/>the<sp/>s=0<sp/>edge<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tD<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sN<sp/>&gt;<sp/>sD)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>sc<sp/>&gt;<sp/>1<sp/><sp/>=&gt;<sp/>the<sp/>s=1<sp/>edge<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>sD;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>e<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tD<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tN<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>tc<sp/>&lt;<sp/>0<sp/>=&gt;<sp/>the<sp/>t=0<sp/>edge<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recompute<sp/>sc<sp/>for<sp/>this<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(-d<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(-d<sp/>&gt;<sp/>a)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>sD;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sD<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tN<sp/>&gt;<sp/>tD)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>tc<sp/>&gt;<sp/>1<sp/><sp/>=&gt;<sp/>the<sp/>t=1<sp/>edge<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>tD;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recompute<sp/>sc<sp/>for<sp/>this<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((-d<sp/>+<sp/>b)<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((-d<sp/>+<sp/>b)<sp/>&gt;<sp/>a)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>sD;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sN<sp/>=<sp/>(-d<sp/>+<sp/>b);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sD<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finally<sp/>do<sp/>the<sp/>division<sp/>to<sp/>get<sp/>sc<sp/>and<sp/>tc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>sc<sp/>=<sp/>(abs(sN)<sp/>&lt;<sp/><ref refid="misc_8h_1a63e45eaf93729d5707b89a5340d68334" kindref="member">SMALL_NUM</ref><sp/>?<sp/>0.0<sp/>:<sp/>sN<sp/>/<sp/>sD);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>tc<sp/>=<sp/>(abs(tN)<sp/>&lt;<sp/><ref refid="misc_8h_1a63e45eaf93729d5707b89a5340d68334" kindref="member">SMALL_NUM</ref><sp/>?<sp/>0.0<sp/>:<sp/>tN<sp/>/<sp/>tD);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>difference<sp/>of<sp/>the<sp/>two<sp/>closest<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>d_p<sp/>=<sp/>w<sp/>+<sp/>(sc<sp/>*<sp/>u)<sp/>-<sp/>(tc<sp/>*<sp/>v);<sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/><sp/>S1(sc)<sp/>-<sp/>S2(tc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d_p.norm();<sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>closest<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VectorType&gt;</highlight></codeline>
<codeline lineno="375" refid="namespacehateb__local__planner_1a9c95517e3f1a8468a88f3db377831228" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a9c95517e3f1a8468a88f3db377831228" kindref="member">calc_closest_point_to_approach_time</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>vel1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>x2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>vel2)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>VectorType<sp/>dv<sp/>=<sp/>vel1<sp/>-<sp/>vel2;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dv2<sp/>=<sp/>dv.squaredNorm();<sp/><sp/></highlight><highlight class="comment">//<sp/>dot(v,v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dv2<sp/>&lt;<sp/><ref refid="misc_8h_1a63e45eaf93729d5707b89a5340d68334" kindref="member">SMALL_NUM</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/><sp/>tracks<sp/>are<sp/>almost<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>time<sp/>is<sp/>ok.<sp/><sp/>Use<sp/>time<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>VectorType<sp/>w0<sp/>=<sp/>x1<sp/>-<sp/>x2;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cpatime<sp/>=<sp/>-w0.dot(dv)<sp/>/<sp/>dv2;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cpatime;<sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>of<sp/>CPA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VectorType&gt;</highlight></codeline>
<codeline lineno="391" refid="namespacehateb__local__planner_1a149078819e493c9816eb27d45420fb99" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a149078819e493c9816eb27d45420fb99" kindref="member">calc_closest_point_to_approach_distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>vel1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>x2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>vel2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bound_cpa_time<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ctime<sp/>=<sp/>calc_closest_point_to_approach_time&lt;VectorType&gt;(x1,<sp/>vel1,<sp/>x2,<sp/>vel2);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bound_cpa_time<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>ctime<sp/>&gt;<sp/>bound_cpa_time)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>ctime<sp/>=<sp/>bound_cpa_time;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>VectorType<sp/>p1<sp/>=<sp/>x1<sp/>+<sp/>(ctime<sp/>*<sp/>vel1);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>VectorType<sp/>p2<sp/>=<sp/>x2<sp/>+<sp/>(ctime<sp/>*<sp/>vel2);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p2<sp/>-<sp/>p1).norm();<sp/><sp/></highlight><highlight class="comment">//<sp/>distance<sp/>at<sp/>CPA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dist_Point_to_Line():<sp/>get<sp/>the<sp/>distance<sp/>of<sp/>a<sp/>point<sp/>to<sp/>a<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Input:<sp/><sp/>a<sp/>Point<sp/>P<sp/>and<sp/>a<sp/>Line<sp/>L<sp/>(in<sp/>any<sp/>dimension)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Return:<sp/>the<sp/>shortest<sp/>distance<sp/>from<sp/>P<sp/>to<sp/>L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VectorType&gt;</highlight></codeline>
<codeline lineno="406" refid="namespacehateb__local__planner_1a0fa85a1b4b27c909f8d43a422a63945b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a0fa85a1b4b27c909f8d43a422a63945b" kindref="member">calc_distance_point_to_line</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>line_base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>line_dir)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>VectorType<sp/>w<sp/>=<sp/>point<sp/>-<sp/>line_base;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/>w.dot(line_dir);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c2<sp/>=<sp/>line_dir.dot(line_dir);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>c1<sp/>/<sp/>c2;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>VectorType<sp/>pb<sp/>=<sp/>line_base<sp/>+<sp/>(b<sp/>*<sp/>line_dir);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(point<sp/>-<sp/>pb).norm();</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dist_Point_to_Segment():<sp/>get<sp/>the<sp/>distance<sp/>of<sp/>a<sp/>point<sp/>to<sp/>a<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Input:<sp/><sp/>a<sp/>Point<sp/>P<sp/>and<sp/>a<sp/>Segment<sp/>S<sp/>(in<sp/>any<sp/>dimension)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Return:<sp/>the<sp/>shortest<sp/>distance<sp/>from<sp/>P<sp/>to<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VectorType&gt;</highlight></codeline>
<codeline lineno="422" refid="namespacehateb__local__planner_1a0c118ac06a1f7d66fd756bfe4a8a7d1c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a0c118ac06a1f7d66fd756bfe4a8a7d1c" kindref="member">calc_distance_point_to_segment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorType&amp;<sp/>line_end)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>VectorType<sp/>v<sp/>=<sp/>line_end<sp/>-<sp/>line_start;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>VectorType<sp/>w<sp/>=<sp/>point<sp/>-<sp/>line_start;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/>w.dot(v);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w.norm();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c2<sp/>=<sp/>v.dot(v);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>&lt;=<sp/>c1)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(point<sp/>-<sp/>line_end).norm();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>c1<sp/>/<sp/>c2;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>VectorType<sp/>pb<sp/>=<sp/>line_start<sp/>+<sp/>(b<sp/>*<sp/>v);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(point<sp/>-<sp/>pb).norm();</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hateb_local_planner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DISTANCE_CALCULATIONS_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hateb_local_planner/include/hateb_local_planner/distance_calculations.h"/>
  </compounddef>
</doxygen>
