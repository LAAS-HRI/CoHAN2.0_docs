<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="obstacles_8h" kind="file" language="C++">
    <compoundname>obstacles.h</compoundname>
    <includes local="no">geometry_msgs/Polygon.h</includes>
    <includes local="no">geometry_msgs/QuaternionStamped.h</includes>
    <includes local="no">geometry_msgs/TwistWithCovariance.h</includes>
    <includes refid="distance__calculations_8h" local="no">hateb_local_planner/distance_calculations.h</includes>
    <includes local="no">tf/tf.h</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">Eigen/Geometry</includes>
    <includes local="no">Eigen/StdVector</includes>
    <includes local="no">boost/pointer_cast.hpp</includes>
    <includes local="no">boost/shared_ptr.hpp</includes>
    <includes local="no">complex</includes>
    <includes local="no">utility</includes>
    <includedby refid="footprint__model_8h" local="no">footprint_model.h</includedby>
    <includedby refid="edge__agent__robot__safety_8h" local="no">edge_agent_robot_safety.h</includedby>
    <includedby refid="edge__dynamic__obstacle_8h" local="no">edge_dynamic_obstacle.h</includedby>
    <includedby refid="edge__invisible__human_8h" local="no">edge_invisible_human.h</includedby>
    <includedby refid="edge__obstacle_8h" local="no">edge_obstacle.h</includedby>
    <includedby refid="timed__elastic__band_8h" local="no">timed_elastic_band.h</includedby>
    <includedby refid="obstacles_8cpp" local="no">obstacles.cpp</includedby>
    <incdepgraph>
      <node id="15">
        <label>boost/pointer_cast.hpp</label>
      </node>
      <node id="16">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="13">
        <label>Eigen/Geometry</label>
      </node>
      <node id="7">
        <label>Eigen/Core</label>
      </node>
      <node id="12">
        <label>tf/tf.h</label>
      </node>
      <node id="6">
        <label>hateb_local_planner/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Eigen/StdVector</label>
      </node>
      <node id="1">
        <label>obstacles.h</label>
        <link refid="obstacles_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>geometry_msgs/QuaternionStamped.h</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="2">
        <label>geometry_msgs/Polygon.h</label>
      </node>
      <node id="18">
        <label>utility</label>
      </node>
      <node id="9">
        <label>boost/utility.hpp</label>
      </node>
      <node id="4">
        <label>geometry_msgs/TwistWithCovariance.h</label>
      </node>
      <node id="17">
        <label>complex</label>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="5">
        <label>hateb_local_planner/distance_calculations.h</label>
        <link refid="distance__calculations_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>boost/type_traits.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11">
        <label>edge_obstacle.h</label>
        <link refid="edge__obstacle_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>obstacles.cpp</label>
        <link refid="obstacles_8cpp"/>
      </node>
      <node id="16">
        <label>edge_agent_robot_rel_velocity.h</label>
        <link refid="edge__agent__robot__rel__velocity_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>edge_velocity.h</label>
        <link refid="edge__velocity_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>footprint_model.h</label>
        <link refid="footprint__model_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>visualization.cpp</label>
        <link refid="visualization_8cpp"/>
      </node>
      <node id="6">
        <label>hateb_local_planner_ros.cpp</label>
        <link refid="hateb__local__planner__ros_8cpp"/>
      </node>
      <node id="13">
        <label>base_teb_edges.h</label>
        <link refid="base__teb__edges_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>edge_shortest_path.h</label>
        <link refid="edge__shortest__path_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>edge_invisible_human.h</label>
        <link refid="edge__invisible__human_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>timed_elastic_band.cpp</label>
        <link refid="timed__elastic__band_8cpp"/>
      </node>
      <node id="29">
        <label>timed_elastic_band.hpp</label>
        <link refid="timed__elastic__band_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>edge_dynamic_obstacle.h</label>
        <link refid="edge__dynamic__obstacle_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>edge_agent_robot_visibility.h</label>
        <link refid="edge__agent__robot__visibility_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>timed_elastic_band.h</label>
        <link refid="timed__elastic__band_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>obstacles.h</label>
        <link refid="obstacles_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>edge_via_point.h</label>
        <link refid="edge__via__point_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>edge_kinematics.h</label>
        <link refid="edge__kinematics_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>edge_agent_agent_safety.h</label>
        <link refid="edge__agent__agent__safety_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>hateb_config.cpp</label>
        <link refid="hateb__config_8cpp"/>
      </node>
      <node id="12">
        <label>hateb_config.h</label>
        <link refid="hateb__config_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>hateb_local_planner_ros.h</label>
        <link refid="hateb__local__planner__ros_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>edge_static_agent_visibility.h</label>
        <link refid="edge__static__agent__visibility_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>optimal_planner.h</label>
        <link refid="optimal__planner_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>edge_agent_robot_safety.h</label>
        <link refid="edge__agent__robot__safety_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>edge_time_optimal.h</label>
        <link refid="edge__time__optimal_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>optimal_planner.cpp</label>
        <link refid="optimal__planner_8cpp"/>
      </node>
      <node id="26">
        <label>visualization.hpp</label>
        <link refid="visualization_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>edge_acceleration.h</label>
        <link refid="edge__acceleration_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>visualization.h</label>
        <link refid="visualization_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>edge_prefer_rotdir.h</label>
        <link refid="edge__prefer__rotdir_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classhateb__local__planner_1_1Obstacle" prot="public">hateb_local_planner::Obstacle</innerclass>
    <innerclass refid="classhateb__local__planner_1_1PointObstacle" prot="public">hateb_local_planner::PointObstacle</innerclass>
    <innerclass refid="classhateb__local__planner_1_1CircularObstacle" prot="public">hateb_local_planner::CircularObstacle</innerclass>
    <innerclass refid="classhateb__local__planner_1_1LineObstacle" prot="public">hateb_local_planner::LineObstacle</innerclass>
    <innerclass refid="classhateb__local__planner_1_1PolygonObstacle" prot="public">hateb_local_planner::PolygonObstacle</innerclass>
    <innernamespace refid="namespacehateb__local__planner">hateb_local_planner</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Software<sp/>License<sp/>Agreement<sp/>(BSD<sp/>License)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(c)<sp/>2016,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>TU<sp/>Dortmund<sp/>-<sp/>Institute<sp/>of<sp/>Control<sp/>Theory<sp/>and<sp/>Systems<sp/>Engineering.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>institute<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Christoph<sp/>Rösmann</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Minor<sp/>Modifications<sp/>by:<sp/>Phani<sp/>Teja<sp/>Singamaneni</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OBSTACLES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OBSTACLES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/Polygon.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/QuaternionStamped.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/TwistWithCovariance.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="distance__calculations_8h" kindref="compound">hateb_local_planner/distance_calculations.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tf/tf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Geometry&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/StdVector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/pointer_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/shared_ptr.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehateb__local__planner" kindref="compound">hateb_local_planner</ref><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classhateb__local__planner_1_1Obstacle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhateb__local__planner_1_1Obstacle" kindref="compound">Obstacle</ref><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68" refid="classhateb__local__planner_1_1Obstacle_1afdba0c06271d9ad57547650b82f10c3e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afdba0c06271d9ad57547650b82f10c3e" kindref="member">Obstacle</ref>()<sp/>:<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>(Eigen::Vector2d::Zero())<sp/>{}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classhateb__local__planner_1_1Obstacle_1a1a01b732948c4d7478da12cc7335594d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a1a01b732948c4d7478da12cc7335594d" kindref="member">~Obstacle</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classhateb__local__planner_1_1Obstacle_1a5c68d148062159714a51d3ed808eb0ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a5c68d148062159714a51d3ed808eb0ac" kindref="member">getCentroid</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classhateb__local__planner_1_1Obstacle_1a0a0d0832da9806649e6d5a1f4134e3b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a0a0d0832da9806649e6d5a1f4134e3b7" kindref="member">getCentroidCplx</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classhateb__local__planner_1_1Obstacle_1adb830893b528f4497e64aaa208d2d25f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1adb830893b528f4497e64aaa208d2d25f" kindref="member">checkCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classhateb__local__planner_1_1Obstacle_1ae75ac3277ce87e0e6886b6ee278ae4c9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1ae75ac3277ce87e0e6886b6ee278ae4c9" kindref="member">checkLineIntersection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classhateb__local__planner_1_1Obstacle_1a7fbc6d91807721ecf7bf0d3545215d7e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a7fbc6d91807721ecf7bf0d3545215d7e" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="classhateb__local__planner_1_1Obstacle_1a0171d2258c8a5802a285a0e10493f70f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a0171d2258c8a5802a285a0e10493f70f" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classhateb__local__planner_1_1Obstacle_1a17efb3c82dd851ca791293f839f738af" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a17efb3c82dd851ca791293f839f738af" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classhateb__local__planner_1_1Obstacle_1a3c5f4b2d64c073f88acd7f07b0f3f892" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a3c5f4b2d64c073f88acd7f07b0f3f892" kindref="member">getClosestPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classhateb__local__planner_1_1Obstacle_1a5823384ad8772f10a996c1ff95b6c1c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a5823384ad8772f10a996c1ff95b6c1c2" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classhateb__local__planner_1_1Obstacle_1abee2e494d966a29d0fc702e8e05f7d0c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1abee2e494d966a29d0fc702e8e05f7d0c" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="classhateb__local__planner_1_1Obstacle_1ab58503d35f43e72ba48c7fb99209dddd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1ab58503d35f43e72ba48c7fb99209dddd" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classhateb__local__planner_1_1Obstacle_1ad2f78dc815bba56a5a887b5584a95995" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1ad2f78dc815bba56a5a887b5584a95995" kindref="member">predictCentroidConstantVelocity</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/>Eigen::Ref&lt;Eigen::Vector2d&gt;<sp/>position)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>position<sp/>=<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a5c68d148062159714a51d3ed808eb0ac" kindref="member">getCentroid</ref>()<sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1aacb584daa9d0a2c89aaf3bdf50d679dc" kindref="member">getCentroidVelocity</ref>();<sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classhateb__local__planner_1_1Obstacle_1a16a676db30495218f7feab593b59b8ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a16a676db30495218f7feab593b59b8ad" kindref="member">isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1acdfb0788d21baee220600b1e3ebc32c4" kindref="member">dynamic_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="classhateb__local__planner_1_1Obstacle_1ae337b4f2f70248cb4450d95d6e88a669" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1ae337b4f2f70248cb4450d95d6e88a669" kindref="member">isHuman</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a2cac9cad218278cfa1f11b7345f24624" kindref="member">human_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="classhateb__local__planner_1_1Obstacle_1aec2259a8f61ff463e6ce168578486b4b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1aec2259a8f61ff463e6ce168578486b4b" kindref="member">setHuman</ref>()<sp/>{<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a2cac9cad218278cfa1f11b7345f24624" kindref="member">human_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classhateb__local__planner_1_1Obstacle_1a0a51ecc56df3aef6ed291e24cf3dfd2c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a0a51ecc56df3aef6ed291e24cf3dfd2c" kindref="member">setCentroidVelocity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>vel)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref><sp/>=<sp/>vel;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1acdfb0788d21baee220600b1e3ebc32c4" kindref="member">dynamic_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="classhateb__local__planner_1_1Obstacle_1a5b6b4fd55f4f92c6f1ef7f82830f2a94" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a5b6b4fd55f4f92c6f1ef7f82830f2a94" kindref="member">setCentroidVelocity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::TwistWithCovariance&amp;<sp/>velocity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Quaternion&amp;<sp/>orientation)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>velocity,<sp/>if<sp/>obstacle<sp/>is<sp/>moving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>vel;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>vel.coeffRef(0)<sp/>=<sp/>velocity.twist.linear.x;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>vel.coeffRef(1)<sp/>=<sp/>velocity.twist.linear.y;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>norm<sp/>of<sp/>velocity<sp/>is<sp/>less<sp/>than<sp/>0.001,<sp/>consider<sp/>obstacle<sp/>as<sp/>not<sp/>dynamic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vel.norm()<sp/>&lt;<sp/>1e-3)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a0a51ecc56df3aef6ed291e24cf3dfd2c" kindref="member">setCentroidVelocity</ref>(vel);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="classhateb__local__planner_1_1Obstacle_1a9fd6aa04d48d7a4ce388ec7b7da99ba9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a9fd6aa04d48d7a4ce388ec7b7da99ba9" kindref="member">setCentroidVelocity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::TwistWithCovariance&amp;<sp/>velocity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::QuaternionStamped&amp;<sp/>orientation)<sp/>{<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a9fd6aa04d48d7a4ce388ec7b7da99ba9" kindref="member">setCentroidVelocity</ref>(velocity,<sp/>orientation.quaternion);<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="classhateb__local__planner_1_1Obstacle_1aacb584daa9d0a2c89aaf3bdf50d679dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1aacb584daa9d0a2c89aaf3bdf50d679dc" kindref="member">getCentroidVelocity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="classhateb__local__planner_1_1Obstacle_1ab22dd73538d93b0797cdcf3b483d4366" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1ab22dd73538d93b0797cdcf3b483d4366" kindref="member">toPolygonMsg</ref>(geometry_msgs::Polygon&amp;<sp/>polygon)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="classhateb__local__planner_1_1Obstacle_1a2ce341af1038397af977fa899f939c5f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a2ce341af1038397af977fa899f939c5f" kindref="member">toTwistWithCovarianceMsg</ref>(geometry_msgs::TwistWithCovariance&amp;<sp/>twistWithCovariance)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1Obstacle_1acdfb0788d21baee220600b1e3ebc32c4" kindref="member">dynamic_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>twistWithCovariance.twist.linear.x<sp/>=<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>(0);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>twistWithCovariance.twist.linear.y<sp/>=<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>(1);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>twistWithCovariance.twist.linear.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>twistWithCovariance.twist.linear.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="256" refid="classhateb__local__planner_1_1Obstacle_1acdfb0788d21baee220600b1e3ebc32c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1acdfb0788d21baee220600b1e3ebc32c4" kindref="member">dynamic_</ref>{};<sp/><sp/></highlight></codeline>
<codeline lineno="257" refid="classhateb__local__planner_1_1Obstacle_1a2cac9cad218278cfa1f11b7345f24624" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle_1a2cac9cad218278cfa1f11b7345f24624" kindref="member">human_</ref>{};</highlight></codeline>
<codeline lineno="258" refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</highlight></codeline>
<codeline lineno="262"><highlight class="normal">};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="namespacehateb__local__planner_1a6a5674a2ba3b2b0bd64cdd76db2fc7e3" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a6a5674a2ba3b2b0bd64cdd76db2fc7e3" kindref="member">ObstaclePtr</ref><sp/>=<sp/>boost::shared_ptr&lt;Obstacle&gt;;</highlight></codeline>
<codeline lineno="267" refid="namespacehateb__local__planner_1a4e41a52836ef0622157f60b3515bfaa8" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a4e41a52836ef0622157f60b3515bfaa8" kindref="member">ObstacleConstPtr</ref><sp/>=<sp/>boost::shared_ptr&lt;const<sp/>Obstacle&gt;;</highlight></codeline>
<codeline lineno="269" refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" kindref="member">ObstContainer</ref><sp/>=<sp/>std::vector&lt;ObstaclePtr&gt;;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="classhateb__local__planner_1_1PointObstacle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhateb__local__planner_1_1PointObstacle" kindref="compound">PointObstacle</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle" kindref="compound">Obstacle</ref><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="280" refid="classhateb__local__planner_1_1PointObstacle_1aa1a062ccddeb4ea3cc12d5cedd2782af" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1aa1a062ccddeb4ea3cc12d5cedd2782af" kindref="member">PointObstacle</ref>()<sp/>:<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>(Eigen::Vector2d::Zero())<sp/>{}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="classhateb__local__planner_1_1PointObstacle_1a2bd84a7631e749723f780ecc7322859a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a2bd84a7631e749723f780ecc7322859a" kindref="member">PointObstacle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref>)<sp/>:<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>(<ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="classhateb__local__planner_1_1PointObstacle_1ad3e599bec9e9733d0591afbeb04c2227" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ad3e599bec9e9733d0591afbeb04c2227" kindref="member">PointObstacle</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a28a13b1e53c2ac6d48e006b489aad536" kindref="member">x</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a38d6d62de2b6647c3c0802795f357d5b" kindref="member">y</ref>)<sp/>:<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>(Eigen::Vector2d(<ref refid="classhateb__local__planner_1_1PointObstacle_1a28a13b1e53c2ac6d48e006b489aad536" kindref="member">x</ref>,<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a38d6d62de2b6647c3c0802795f357d5b" kindref="member">y</ref>))<sp/>{}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>checkCollision()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="classhateb__local__planner_1_1PointObstacle_1a8ecad9c1516d2440fd0b85a263c8153e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a8ecad9c1516d2440fd0b85a263c8153e" kindref="member">checkCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>point,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a71e9d3e15ce4403ccfe83131ddbdce91" kindref="member">getMinimumDistance</ref>(point)<sp/>&lt;<sp/>min_dist;<sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>checkLineIntersection()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="classhateb__local__planner_1_1PointObstacle_1afd9b199dce0b3efb427c46a813e32fe0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1afd9b199dce0b3efb427c46a813e32fe0" kindref="member">checkLineIntersection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Distance<sp/>Line<sp/>-<sp/>Circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>refer<sp/>to<sp/>http://www.spieleprogrammierer.de/wiki/2D-Kollisionserkennung#Kollision_Kreis-Strecke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>a<sp/>=<sp/>line_end<sp/>-<sp/>line_start;<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>normalized!<sp/><sp/>a=y-x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>b<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref><sp/>-<sp/>line_start;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b=m-x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>find<sp/>nearest<sp/>point<sp/>to<sp/>circle<sp/>v=x+a*t<sp/>with<sp/>t=a*b/(a*a)<sp/>and<sp/>bound<sp/>to<sp/>0&lt;=t&lt;=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>a.dot(b)<sp/>/<sp/>a.dot(a);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>bound<sp/>t<sp/>(since<sp/>a<sp/>is<sp/>not<sp/>normalized,<sp/>t<sp/>can<sp/>be<sp/>scaled<sp/>between<sp/>0<sp/>and<sp/>1<sp/>to<sp/>parametrize<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>nearest_point<sp/>=<sp/>line_start<sp/>+<sp/>a<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a8ecad9c1516d2440fd0b85a263c8153e" kindref="member">checkCollision</ref>(nearest_point,<sp/>min_dist);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="classhateb__local__planner_1_1PointObstacle_1a71e9d3e15ce4403ccfe83131ddbdce91" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a71e9d3e15ce4403ccfe83131ddbdce91" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref><sp/>-<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>).norm();<sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="classhateb__local__planner_1_1PointObstacle_1a4e3b6ac2b90631b376ede330bf34c98b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a4e3b6ac2b90631b376ede330bf34c98b" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(<ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>,<sp/>line_start,<sp/>line_end);<sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="classhateb__local__planner_1_1PointObstacle_1abceb75ab1f2c2919d78ed08f59ee9c62" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1abceb75ab1f2c2919d78ed08f59ee9c62" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" kindref="member">distance_point_to_polygon_2d</ref>(<ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>,<sp/>polygon);<sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistanceVec()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="classhateb__local__planner_1_1PointObstacle_1a4db13d77987e891b2cf7c50e7f81cf33" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a4db13d77987e891b2cf7c50e7f81cf33" kindref="member">getClosestPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="classhateb__local__planner_1_1PointObstacle_1a81a2cb8276c02c6f3284bf3d4ce5d648" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a81a2cb8276c02c6f3284bf3d4ce5d648" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref><sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref><sp/>-<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref>).norm();<sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classhateb__local__planner_1_1PointObstacle_1a2eced810e1911e890eb30eeafea6633a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a2eced810e1911e890eb30eeafea6633a" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(<ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref><sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>,<sp/>line_start,<sp/>line_end);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classhateb__local__planner_1_1PointObstacle_1ad83392872069903980cd3a8c188faace" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ad83392872069903980cd3a8c188faace" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" kindref="member">distance_point_to_polygon_2d</ref>(<ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref><sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>,<sp/>polygon);<sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>predictCentroidConstantVelocity()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="classhateb__local__planner_1_1PointObstacle_1a57060c060212d5e06d9c6d8d0da6595f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a57060c060212d5e06d9c6d8d0da6595f" kindref="member">predictCentroidConstantVelocity</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/>Eigen::Ref&lt;Eigen::Vector2d&gt;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref><sp/>=<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref><sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getCentroid()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classhateb__local__planner_1_1PointObstacle_1a6e542a14e5e0fc3c3c84f8dbf1632f7b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a6e542a14e5e0fc3c3c84f8dbf1632f7b" kindref="member">getCentroid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getCentroidCplx()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="classhateb__local__planner_1_1PointObstacle_1a072c73be03f0aef292bb02764a4f8248" refkind="member"><highlight class="normal"><sp/><sp/>std::complex&lt;double&gt;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a072c73be03f0aef292bb02764a4f8248" kindref="member">getCentroidCplx</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;(<ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>[0],<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>[1]);<sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="classhateb__local__planner_1_1PointObstacle_1acc98aee26677b4d7781222c4141e9ddd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1acc98aee26677b4d7781222c4141e9ddd" kindref="member">setCentroid</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a28a13b1e53c2ac6d48e006b489aad536" kindref="member">x</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a38d6d62de2b6647c3c0802795f357d5b" kindref="member">y</ref>)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>[0]<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a28a13b1e53c2ac6d48e006b489aad536" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>[1]<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a38d6d62de2b6647c3c0802795f357d5b" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessor<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ab4a28141636a28ba7f44eb423e4ed70b" kindref="member">position</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>;<sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="358" refid="classhateb__local__planner_1_1PointObstacle_1a8655e7a09aca7e9b1ddffaa3913ff853" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a8655e7a09aca7e9b1ddffaa3913ff853" kindref="member">position</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359" refid="classhateb__local__planner_1_1PointObstacle_1a28a13b1e53c2ac6d48e006b489aad536" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a28a13b1e53c2ac6d48e006b489aad536" kindref="member">x</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>.coeffRef(0);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="360" refid="classhateb__local__planner_1_1PointObstacle_1ae8b558d2ad31804f9cb3de0a7e4c9cb6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ae8b558d2ad31804f9cb3de0a7e4c9cb6" kindref="member">x</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>.coeffRef(0);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="361" refid="classhateb__local__planner_1_1PointObstacle_1a38d6d62de2b6647c3c0802795f357d5b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a38d6d62de2b6647c3c0802795f357d5b" kindref="member">y</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>.coeffRef(1);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="362" refid="classhateb__local__planner_1_1PointObstacle_1aca982e4b88a5f15388f5b3231730db7a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1aca982e4b88a5f15388f5b3231730db7a" kindref="member">y</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>.coeffRef(1);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>toPolygonMsg()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="classhateb__local__planner_1_1PointObstacle_1a743c3d281a81c0872d075245cfce1bbc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1a743c3d281a81c0872d075245cfce1bbc" kindref="member">toPolygonMsg</ref>(geometry_msgs::Polygon&amp;<sp/>polygon)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.resize(1);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.front().x<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>.x();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.front().y<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>.y();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.front().z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="373" refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1PointObstacle_1ac228f899d2ad3e819a4976842a55627e" kindref="member">pos_</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</highlight></codeline>
<codeline lineno="377"><highlight class="normal">};</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="classhateb__local__planner_1_1CircularObstacle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhateb__local__planner_1_1CircularObstacle" kindref="compound">CircularObstacle</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle" kindref="compound">Obstacle</ref><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="388" refid="classhateb__local__planner_1_1CircularObstacle_1a00f50bf65cf08250b50fa5a0ea6c0318" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a00f50bf65cf08250b50fa5a0ea6c0318" kindref="member">CircularObstacle</ref>()<sp/>:<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>(Eigen::Vector2d::Zero())<sp/>{}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="classhateb__local__planner_1_1CircularObstacle_1af2efd02ccd06d8bb3fe58b3a49d3338f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1af2efd02ccd06d8bb3fe58b3a49d3338f" kindref="member">CircularObstacle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ab4f803620790fa5fbf16d6c5ac1d48b1" kindref="member">radius</ref>)<sp/>:<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref>),<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1ab4f803620790fa5fbf16d6c5ac1d48b1" kindref="member">radius</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="classhateb__local__planner_1_1CircularObstacle_1a2d7e9c7d4ff804095a1c3f379740aa93" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a2d7e9c7d4ff804095a1c3f379740aa93" kindref="member">CircularObstacle</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1af15daa0dc791973370ccb81bf406f0b7" kindref="member">x</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adf7884356b07042411e5f9b6387e5a37" kindref="member">y</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ab4f803620790fa5fbf16d6c5ac1d48b1" kindref="member">radius</ref>)<sp/>:<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>(Eigen::Vector2d(<ref refid="classhateb__local__planner_1_1CircularObstacle_1af15daa0dc791973370ccb81bf406f0b7" kindref="member">x</ref>,<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adf7884356b07042411e5f9b6387e5a37" kindref="member">y</ref>)),<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1ab4f803620790fa5fbf16d6c5ac1d48b1" kindref="member">radius</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>checkCollision()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="classhateb__local__planner_1_1CircularObstacle_1a8d07c6c4b981c66c8985fcb2039f65cd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a8d07c6c4b981c66c8985fcb2039f65cd" kindref="member">checkCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>point,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1af714cb2cdf7c3696de8313c6c4ac3b3e" kindref="member">getMinimumDistance</ref>(point)<sp/>&lt;<sp/>min_dist;<sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>checkLineIntersection()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="classhateb__local__planner_1_1CircularObstacle_1a5a4924bb4cac2ddd9abf56ff5f0df310" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a5a4924bb4cac2ddd9abf56ff5f0df310" kindref="member">checkLineIntersection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Distance<sp/>Line<sp/>-<sp/>Circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>refer<sp/>to<sp/>http://www.spieleprogrammierer.de/wiki/2D-Kollisionserkennung#Kollision_Kreis-Strecke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>a<sp/>=<sp/>line_end<sp/>-<sp/>line_start;<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>normalized!<sp/><sp/>a=y-x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>b<sp/>=<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref><sp/>-<sp/>line_start;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b=m-x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>find<sp/>nearest<sp/>point<sp/>to<sp/>circle<sp/>v=x+a*t<sp/>with<sp/>t=a*b/(a*a)<sp/>and<sp/>bound<sp/>to<sp/>0&lt;=t&lt;=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>a.dot(b)<sp/>/<sp/>a.dot(a);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>bound<sp/>t<sp/>(since<sp/>a<sp/>is<sp/>not<sp/>normalized,<sp/>t<sp/>can<sp/>be<sp/>scaled<sp/>between<sp/>0<sp/>and<sp/>1<sp/>to<sp/>parametrize<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>nearest_point<sp/>=<sp/>line_start<sp/>+<sp/>a<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a8d07c6c4b981c66c8985fcb2039f65cd" kindref="member">checkCollision</ref>(nearest_point,<sp/>min_dist);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="classhateb__local__planner_1_1CircularObstacle_1af714cb2cdf7c3696de8313c6c4ac3b3e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1af714cb2cdf7c3696de8313c6c4ac3b3e" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref><sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>).norm()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="classhateb__local__planner_1_1CircularObstacle_1a4215cf7bb77b91f092b136b4d357809c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a4215cf7bb77b91f092b136b4d357809c" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>,<sp/>line_start,<sp/>line_end)<sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="classhateb__local__planner_1_1CircularObstacle_1a7d140ef93b5e016f61cddac50fe23879" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7d140ef93b5e016f61cddac50fe23879" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" kindref="member">distance_point_to_polygon_2d</ref>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>,<sp/>polygon)<sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistanceVec()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="classhateb__local__planner_1_1CircularObstacle_1a9a8394c65ac93ce789ebb4534ac3d2b6" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a9a8394c65ac93ce789ebb4534ac3d2b6" kindref="member">getClosestPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref><sp/>+<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref><sp/>*<sp/>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref><sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>).normalized();<sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="classhateb__local__planner_1_1CircularObstacle_1aa17eef1135001604127b2ad4e372b59e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1aa17eef1135001604127b2ad4e372b59e" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref><sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref><sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref>).norm()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="classhateb__local__planner_1_1CircularObstacle_1a1d83ddadd32a5bb152c37b2772b8f53f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a1d83ddadd32a5bb152c37b2772b8f53f" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref><sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>,<sp/>line_start,<sp/>line_end)<sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="classhateb__local__planner_1_1CircularObstacle_1a8b3a85f579c9a30634fba14c5a1e36f3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a8b3a85f579c9a30634fba14c5a1e36f3" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" kindref="member">distance_point_to_polygon_2d</ref>(<ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref><sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>,<sp/>polygon)<sp/>-<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>predictCentroidConstantVelocity()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="classhateb__local__planner_1_1CircularObstacle_1ac4a12b0492daa57a2aadfb381924671a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ac4a12b0492daa57a2aadfb381924671a" kindref="member">predictCentroidConstantVelocity</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/>Eigen::Ref&lt;Eigen::Vector2d&gt;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref><sp/>=<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref><sp/>+<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getCentroid()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="classhateb__local__planner_1_1CircularObstacle_1a0a029d82c1bfdd33a260002a1995f5e4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a0a029d82c1bfdd33a260002a1995f5e4" kindref="member">getCentroid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getCentroidCplx()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="classhateb__local__planner_1_1CircularObstacle_1a3049d47b9084ca57814949f5a9c40eb5" refkind="member"><highlight class="normal"><sp/><sp/>std::complex&lt;double&gt;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a3049d47b9084ca57814949f5a9c40eb5" kindref="member">getCentroidCplx</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;(<ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>[0],<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>[1]);<sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessor<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a7cbac98fd7eb24abf698374fd1ab01c3" kindref="member">position</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>;<sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="467" refid="classhateb__local__planner_1_1CircularObstacle_1a4db1ee4ee4e19dad681aa5c85803babc" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a4db1ee4ee4e19dad681aa5c85803babc" kindref="member">position</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="468" refid="classhateb__local__planner_1_1CircularObstacle_1af15daa0dc791973370ccb81bf406f0b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1af15daa0dc791973370ccb81bf406f0b7" kindref="member">x</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>.coeffRef(0);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469" refid="classhateb__local__planner_1_1CircularObstacle_1ac61549f6cb1189514617620e9b518877" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ac61549f6cb1189514617620e9b518877" kindref="member">x</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>.coeffRef(0);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="470" refid="classhateb__local__planner_1_1CircularObstacle_1adf7884356b07042411e5f9b6387e5a37" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adf7884356b07042411e5f9b6387e5a37" kindref="member">y</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>.coeffRef(1);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="471" refid="classhateb__local__planner_1_1CircularObstacle_1a946b3bd28a8666e868d39ee3c229c1c0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a946b3bd28a8666e868d39ee3c229c1c0" kindref="member">y</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>.coeffRef(1);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="472" refid="classhateb__local__planner_1_1CircularObstacle_1ab4f803620790fa5fbf16d6c5ac1d48b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ab4f803620790fa5fbf16d6c5ac1d48b1" kindref="member">radius</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="473" refid="classhateb__local__planner_1_1CircularObstacle_1a581e9ce0a99e94fe7a6acdf617e874e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a581e9ce0a99e94fe7a6acdf617e874e6" kindref="member">radius</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref>;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>toPolygonMsg()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="classhateb__local__planner_1_1CircularObstacle_1a653e20732dd2897b7009d21749651154" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a653e20732dd2897b7009d21749651154" kindref="member">toPolygonMsg</ref>(geometry_msgs::Polygon&amp;<sp/>polygon)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(roesmann):<sp/>the<sp/>polygon<sp/>message<sp/>type<sp/>cannot<sp/>describe<sp/>a<sp/>&quot;perfect&quot;<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>We<sp/>could<sp/>switch<sp/>to<sp/>ObstacleMsg<sp/>if<sp/>required<sp/>somewhere...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.resize(1);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.front().x<sp/>=<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>.x();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.front().y<sp/>=<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>.y();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.front().z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="486" refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="487" refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adedb198019942cd2fbd0389512c91fb1" kindref="member">radius_</ref><sp/>=<sp/>0.0;<sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="490" refid="classhateb__local__planner_1_1CircularObstacle_1a67af71dac7f1bdeb34a756f1299e9e77" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1a67af71dac7f1bdeb34a756f1299e9e77" kindref="member">setCentroid</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1af15daa0dc791973370ccb81bf406f0b7" kindref="member">x</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adf7884356b07042411e5f9b6387e5a37" kindref="member">y</ref>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>[0]<sp/>=<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1af15daa0dc791973370ccb81bf406f0b7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1ad5b8ddb66a223cf532b212e39de8754d" kindref="member">pos_</ref>[1]<sp/>=<sp/><ref refid="classhateb__local__planner_1_1CircularObstacle_1adf7884356b07042411e5f9b6387e5a37" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</highlight></codeline>
<codeline lineno="496"><highlight class="normal">};</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="classhateb__local__planner_1_1LineObstacle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhateb__local__planner_1_1LineObstacle" kindref="compound">LineObstacle</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle" kindref="compound">Obstacle</ref><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="506" refid="classhateb__local__planner_1_1LineObstacle_1a0311d1d23addcc4532c5aa7fe72755e2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a0311d1d23addcc4532c5aa7fe72755e2" kindref="member">VertexContainer</ref><sp/>=<sp/>std::vector&lt;Eigen::Vector2d,<sp/>Eigen::aligned_allocator&lt;Eigen::Vector2d&gt;&gt;;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="classhateb__local__planner_1_1LineObstacle_1a88a3a9d3dddc3a9dd186b0849a2001f3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a88a3a9d3dddc3a9dd186b0849a2001f3" kindref="member">LineObstacle</ref>()<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>.setZero();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>.setZero();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ab712b253b0921f4704791ce420be45bc" kindref="member">centroid_</ref>.setZero();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="classhateb__local__planner_1_1LineObstacle_1a403a0171c83f96771f3a4b0b73fcba41" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a403a0171c83f96771f3a4b0b73fcba41" kindref="member">LineObstacle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>line_end)<sp/>:<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>(line_start),<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>(line_end)<sp/>{<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1afe1a44ee00bc3192a1e1901681075b5b" kindref="member">calcCentroid</ref>();<sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="classhateb__local__planner_1_1LineObstacle_1ace45ab702b949014849ebd6b54e9a379" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ace45ab702b949014849ebd6b54e9a379" kindref="member">LineObstacle</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>.x()<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>.y()<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>.x()<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>.y()<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1afe1a44ee00bc3192a1e1901681075b5b" kindref="member">calcCentroid</ref>();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>checkCollision()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="classhateb__local__planner_1_1LineObstacle_1a7def2a79a5eb4a45956c0c63c28a4da8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a7def2a79a5eb4a45956c0c63c28a4da8" kindref="member">checkCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>point,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a1b51e2f31ab57887074ce910848c31d8" kindref="member">getMinimumDistance</ref>(point)<sp/>&lt;=<sp/>min_dist;<sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>checkLineIntersection()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="classhateb__local__planner_1_1LineObstacle_1a45c46e8242d2add2a3fc16fae4cf755e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a45c46e8242d2add2a3fc16fae4cf755e" kindref="member">checkLineIntersection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aa6390beb4d01c1661e1c7523f74a93b2" kindref="member">check_line_segments_intersection_2d</ref>(line_start,<sp/>line_end,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="classhateb__local__planner_1_1LineObstacle_1a1b51e2f31ab57887074ce910848c31d8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a1b51e2f31ab57887074ce910848c31d8" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(position,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="classhateb__local__planner_1_1LineObstacle_1a4911b5694e113d3ee2adbdb39dbad50f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a4911b5694e113d3ee2adbdb39dbad50f" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ac2e2d2432c7bf42cd93079ae086f9b27" kindref="member">distance_segment_to_segment_2d</ref>(<ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>,<sp/>line_start,<sp/>line_end);<sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="classhateb__local__planner_1_1LineObstacle_1aa8a6c5c72418c95223ef3c6dcd795478" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1aa8a6c5c72418c95223ef3c6dcd795478" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ae53d0dcfdd477c66b3ae14cad3100f1d" kindref="member">distance_segment_to_polygon_2d</ref>(<ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>,<sp/>polygon);<sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistanceVec()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557" refid="classhateb__local__planner_1_1LineObstacle_1a0a2672d69250ce797566761c84d91256" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a0a2672d69250ce797566761c84d91256" kindref="member">getClosestPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1af895105afa3bbde12cf912915473fcb1" kindref="member">closest_point_on_line_segment_2d</ref>(position,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="classhateb__local__planner_1_1LineObstacle_1ab30de18cd350b22ec9199564e2663dcd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ab30de18cd350b22ec9199564e2663dcd" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>offset<sp/>=<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(position,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref><sp/>+<sp/>offset,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref><sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classhateb__local__planner_1_1LineObstacle_1aaa93c5ed3033a9e364863157a3a961df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1aaa93c5ed3033a9e364863157a3a961df" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>offset<sp/>=<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ac2e2d2432c7bf42cd93079ae086f9b27" kindref="member">distance_segment_to_segment_2d</ref>(<ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref><sp/>+<sp/>offset,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref><sp/>+<sp/>offset,<sp/>line_start,<sp/>line_end);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="classhateb__local__planner_1_1LineObstacle_1ab8fe573f6db2c3c677a2c41f652cab53" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ab8fe573f6db2c3c677a2c41f652cab53" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>offset<sp/>=<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ae53d0dcfdd477c66b3ae14cad3100f1d" kindref="member">distance_segment_to_polygon_2d</ref>(<ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref><sp/>+<sp/>offset,<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref><sp/>+<sp/>offset,<sp/>polygon);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getCentroid()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="classhateb__local__planner_1_1LineObstacle_1a9d4e369dd7059b5ec0b4e613d267e809" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a9d4e369dd7059b5ec0b4e613d267e809" kindref="member">getCentroid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ab712b253b0921f4704791ce420be45bc" kindref="member">centroid_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getCentroidCplx()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="classhateb__local__planner_1_1LineObstacle_1adc62819718c2d578efd3977678f68d56" refkind="member"><highlight class="normal"><sp/><sp/>std::complex&lt;double&gt;<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1adc62819718c2d578efd3977678f68d56" kindref="member">getCentroidCplx</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;(<ref refid="classhateb__local__planner_1_1LineObstacle_1ab712b253b0921f4704791ce420be45bc" kindref="member">centroid_</ref>.x(),<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ab712b253b0921f4704791ce420be45bc" kindref="member">centroid_</ref>.y());<sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>or<sp/>modify<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="classhateb__local__planner_1_1LineObstacle_1a4bc6c7af740a54ff14aa4b3b83282e26" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a4bc6c7af740a54ff14aa4b3b83282e26" kindref="member">start</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="585" refid="classhateb__local__planner_1_1LineObstacle_1ae6399b784efc1b8fc25b52b413417e8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ae6399b784efc1b8fc25b52b413417e8f" kindref="member">setStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a4bc6c7af740a54ff14aa4b3b83282e26" kindref="member">start</ref>)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref><sp/>=<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a4bc6c7af740a54ff14aa4b3b83282e26" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1afe1a44ee00bc3192a1e1901681075b5b" kindref="member">calcCentroid</ref>();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589" refid="classhateb__local__planner_1_1LineObstacle_1ad5c067679f25ace6cca458b161f11e82" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ad5c067679f25ace6cca458b161f11e82" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="590" refid="classhateb__local__planner_1_1LineObstacle_1a478a1c575f829278857d53afaea3ae3b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a478a1c575f829278857d53afaea3ae3b" kindref="member">setEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ad5c067679f25ace6cca458b161f11e82" kindref="member">end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref><sp/>=<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ad5c067679f25ace6cca458b161f11e82" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1afe1a44ee00bc3192a1e1901681075b5b" kindref="member">calcCentroid</ref>();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>toPolygonMsg()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596" refid="classhateb__local__planner_1_1LineObstacle_1a8f59203230b5f0aa856018af6d33bacf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8f59203230b5f0aa856018af6d33bacf" kindref="member">toPolygonMsg</ref>(geometry_msgs::Polygon&amp;<sp/>polygon)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.resize(2);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.front().x<sp/>=<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>.x();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.front().y<sp/>=<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>.y();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.back().x<sp/>=<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>.x();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.back().y<sp/>=<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>.y();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points.back().z<sp/>=<sp/>polygon.points.front().z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="607" refid="classhateb__local__planner_1_1LineObstacle_1afe1a44ee00bc3192a1e1901681075b5b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1afe1a44ee00bc3192a1e1901681075b5b" kindref="member">calcCentroid</ref>()<sp/>{<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ab712b253b0921f4704791ce420be45bc" kindref="member">centroid_</ref><sp/>=<sp/>0.5<sp/>*<sp/>(<ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref><sp/>+<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="610" refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a2b113649fdd8ac3ed4a3397f370c6e24" kindref="member">start_</ref>;</highlight></codeline>
<codeline lineno="611" refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1a8fac2a2277b505fa6a8e73a930d53b45" kindref="member">end_</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="classhateb__local__planner_1_1LineObstacle_1ab712b253b0921f4704791ce420be45bc" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1LineObstacle_1ab712b253b0921f4704791ce420be45bc" kindref="member">centroid_</ref>;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</highlight></codeline>
<codeline lineno="617"><highlight class="normal">};</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="classhateb__local__planner_1_1PolygonObstacle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhateb__local__planner_1_1PolygonObstacle" kindref="compound">PolygonObstacle</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1Obstacle" kindref="compound">Obstacle</ref><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="631" refid="classhateb__local__planner_1_1PolygonObstacle_1ac1ebe79f05206771debec653f89ef991" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ac1ebe79f05206771debec653f89ef991" kindref="member">PolygonObstacle</ref>()<sp/>:<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" kindref="member">finalized_</ref>(false)<sp/>{<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref>.setConstant(NAN);<sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="classhateb__local__planner_1_1PolygonObstacle_1a67d39634805c1cd1c72334dcf8fe7aac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a67d39634805c1cd1c72334dcf8fe7aac" kindref="member">PolygonObstacle</ref>(<ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1aa2163c7b7110e9e6f3555ea032b9d5fe" kindref="member">vertices</ref>)<sp/>:<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>(std::move(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1aa2163c7b7110e9e6f3555ea032b9d5fe" kindref="member">vertices</ref>))<sp/>{<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a17f5da81bc9b778b4769319166186061" kindref="member">finalizePolygon</ref>();<sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME<sp/>Not<sp/>working<sp/>at<sp/>the<sp/>moment<sp/>due<sp/>to<sp/>the<sp/>aligned<sp/>allocator<sp/>version<sp/>of<sp/>std::vector</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>And<sp/>it<sp/>is<sp/>C++11<sp/>code<sp/>that<sp/>is<sp/>disabled<sp/>atm<sp/>to<sp/>ensure<sp/>compliance<sp/>with<sp/>ROS<sp/>indigo/jade</highlight></codeline>
<codeline lineno="640"><highlight class="comment">...<sp/>Vector2dType&gt;</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/>PolygonObstacle(const<sp/>Vector2dType&amp;...<sp/>vertices)<sp/>:<sp/>_vertices({vertices...})</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/>calcCentroid();</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/><sp/><sp/>_finalized<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>checkCollision()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="classhateb__local__planner_1_1PolygonObstacle_1a4fb0e393397045a1cffa1c55fd7e74f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a4fb0e393397045a1cffa1c55fd7e74f5" kindref="member">checkCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>point,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>line<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1aabdae3ae8dd782d1d94ced5034c3ab49" kindref="member">getMinimumDistance</ref>(point)<sp/>&lt;=<sp/>min_dist;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>point<sp/>is<sp/>in<sp/>the<sp/>interior<sp/>of<sp/>the<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>point<sp/>in<sp/>polygon<sp/>test<sp/>-<sp/>raycasting<sp/>(http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>following<sp/>algorithm<sp/>we<sp/>may<sp/>obtain<sp/>false<sp/>negatives<sp/>on<sp/>edge-cases,<sp/>but<sp/>that&apos;s<sp/>ok<sp/>for<sp/>our<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>();<sp/>j<sp/>=<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).y()<sp/>&gt;<sp/>point.y())<sp/>!=<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(j).y()<sp/>&gt;<sp/>point.y()))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(point.x()<sp/>&lt;<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(j).x()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).x())<sp/>*<sp/>(point.y()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).y())<sp/>/<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(j).y()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).y())<sp/>+<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).x()))<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>!c;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>statement<sp/>is<sp/>reached,<sp/>the<sp/>point<sp/>lies<sp/>outside<sp/>the<sp/>polygon<sp/>or<sp/>maybe<sp/>on<sp/>its<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>us<sp/>check<sp/>the<sp/>minium<sp/>distance<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_dist<sp/>==<sp/>0<sp/>?<sp/>false<sp/>:<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1aabdae3ae8dd782d1d94ced5034c3ab49" kindref="member">getMinimumDistance</ref>(point)<sp/>&lt;<sp/>min_dist;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a8c4ff26c044b9575bbce5cae7ebb284f" kindref="member">checkLineIntersection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="classhateb__local__planner_1_1PolygonObstacle_1aabdae3ae8dd782d1d94ced5034c3ab49" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1aabdae3ae8dd782d1d94ced5034c3ab49" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" kindref="member">distance_point_to_polygon_2d</ref>(position,<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="classhateb__local__planner_1_1PolygonObstacle_1a7269321e19888c5651dded65642548a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a7269321e19888c5651dded65642548a4" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ae53d0dcfdd477c66b3ae14cad3100f1d" kindref="member">distance_segment_to_polygon_2d</ref>(line_start,<sp/>line_end,<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="classhateb__local__planner_1_1PolygonObstacle_1aa9231a39bc457c380dc8276c113fd46c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1aa9231a39bc457c380dc8276c113fd46c" kindref="member">getMinimumDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a7390a4788c5cdca6fecac1aa7315958e" kindref="member">distance_polygon_to_polygon_2d</ref>(polygon,<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumDistanceVec()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1aba2767f7dd4d60e142ddea72a8789d72" kindref="member">getClosestPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="classhateb__local__planner_1_1PolygonObstacle_1a839a025234a43e40887553edc2b7ab41" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a839a025234a43e40887553edc2b7ab41" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref><sp/>pred_vertices;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a45a7aedfab895f3d3919f695c9a60b9c" kindref="member">predictVertices</ref>(t,<sp/>pred_vertices);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3fb251a59ae7588035748ef6afd02519" kindref="member">distance_point_to_polygon_2d</ref>(position,<sp/>pred_vertices);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708" refid="classhateb__local__planner_1_1PolygonObstacle_1acd0499a11831280859922a6db25e3e4e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1acd0499a11831280859922a6db25e3e4e" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref><sp/>pred_vertices;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a45a7aedfab895f3d3919f695c9a60b9c" kindref="member">predictVertices</ref>(t,<sp/>pred_vertices);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1ae53d0dcfdd477c66b3ae14cad3100f1d" kindref="member">distance_segment_to_polygon_2d</ref>(line_start,<sp/>line_end,<sp/>pred_vertices);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getMinimumSpatioTemporalDistance()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="classhateb__local__planner_1_1PolygonObstacle_1a53e3769caac423620226d206a0f0911d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a53e3769caac423620226d206a0f0911d" kindref="member">getMinimumSpatioTemporalDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>polygon,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref><sp/>pred_vertices;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a45a7aedfab895f3d3919f695c9a60b9c" kindref="member">predictVertices</ref>(t,<sp/>pred_vertices);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a7390a4788c5cdca6fecac1aa7315958e" kindref="member">distance_polygon_to_polygon_2d</ref>(polygon,<sp/>pred_vertices);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721" refid="classhateb__local__planner_1_1PolygonObstacle_1a45a7aedfab895f3d3919f695c9a60b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a45a7aedfab895f3d3919f695c9a60b9c" kindref="member">predictVertices</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>pred_vertices)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Predict<sp/>obstacle<sp/>(polygon)<sp/>at<sp/>time<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>pred_vertices.resize(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.size());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>offset<sp/>=<sp/>t<sp/>*<sp/><ref refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" kindref="member">centroid_velocity_</ref>;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred_vertices[i]<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>[i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getCentroid()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731" refid="classhateb__local__planner_1_1PolygonObstacle_1ad3d8309b5cb4ec59119213606a4c0e46" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ad3d8309b5cb4ec59119213606a4c0e46" kindref="member">getCentroid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" kindref="member">finalized_</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Finalize<sp/>the<sp/>polygon<sp/>after<sp/>all<sp/>vertices<sp/>are<sp/>added.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref>;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>getCentroidCplx()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737" refid="classhateb__local__planner_1_1PolygonObstacle_1a659d05cfe198739c0bafa2ed97b19e15" refkind="member"><highlight class="normal"><sp/><sp/>std::complex&lt;double&gt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a659d05cfe198739c0bafa2ed97b19e15" kindref="member">getCentroidCplx</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" kindref="member">finalized_</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Finalize<sp/>the<sp/>polygon<sp/>after<sp/>all<sp/>vertices<sp/>are<sp/>added.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref>.coeffRef(0),<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref>.coeffRef(1));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implements<sp/>toPolygonMsg()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ad51dbe22ccecf14472ca3f24aeb13be6" kindref="member">toPolygonMsg</ref>(geometry_msgs::Polygon&amp;<sp/>polygon)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>or<sp/>modify<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="classhateb__local__planner_1_1PolygonObstacle_1aa2163c7b7110e9e6f3555ea032b9d5fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1aa2163c7b7110e9e6f3555ea032b9d5fe" kindref="member">vertices</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>;<sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="750" refid="classhateb__local__planner_1_1PolygonObstacle_1ab6212e7f48c7b388291261a020a2e1af" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ab6212e7f48c7b388291261a020a2e1af" kindref="member">vertices</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="758" refid="classhateb__local__planner_1_1PolygonObstacle_1ace8a27f9700ae0c51282e1e518eb71da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ace8a27f9700ae0c51282e1e518eb71da" kindref="member">pushBackVertex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>vertex)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.emplace_back(vertex);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" kindref="member">finalized_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="classhateb__local__planner_1_1PolygonObstacle_1adfba65155bc6fb0968e69de7664f8df3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfba65155bc6fb0968e69de7664f8df3" kindref="member">pushBackVertex</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.emplace_back(x,<sp/>y);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" kindref="member">finalized_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="classhateb__local__planner_1_1PolygonObstacle_1a17f5da81bc9b778b4769319166186061" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a17f5da81bc9b778b4769319166186061" kindref="member">finalizePolygon</ref>()<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ad3249541e53232710d2315802b581e25" kindref="member">fixPolygonClosure</ref>();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ab374ab9f993a2c2e943052aff01d7e41" kindref="member">calcCentroid</ref>();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" kindref="member">finalized_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="787" refid="classhateb__local__planner_1_1PolygonObstacle_1a3086e001a07be0238274d4a2ab52cf4d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a3086e001a07be0238274d4a2ab52cf4d" kindref="member">clearVertices</ref>()<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.clear();</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" kindref="member">finalized_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.size());<sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ad3249541e53232710d2315802b581e25" kindref="member">fixPolygonClosure</ref>();<sp/><sp/></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ab374ab9f993a2c2e943052aff01d7e41" kindref="member">calcCentroid</ref>();<sp/><sp/></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804" refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="805" refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" refkind="member"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807" refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" kindref="member">finalized_</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</highlight></codeline>
<codeline lineno="811"><highlight class="normal">};</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hateb_local_planner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>OBSTACLES_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h"/>
  </compounddef>
</doxygen>
