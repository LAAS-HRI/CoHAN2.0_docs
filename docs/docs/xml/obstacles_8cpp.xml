<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="obstacles_8cpp" kind="file" language="C++">
    <compoundname>obstacles.cpp</compoundname>
    <includes refid="obstacles_8h" local="no">hateb_local_planner/obstacles.h</includes>
    <includes local="no">ros/assert.h</includes>
    <includes local="no">ros/console.h</includes>
    <incdepgraph>
      <node id="20">
        <label>ros/assert.h</label>
      </node>
      <node id="16">
        <label>boost/pointer_cast.hpp</label>
      </node>
      <node id="1">
        <label>obstacles.cpp</label>
        <link refid="obstacles_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="14">
        <label>Eigen/Geometry</label>
      </node>
      <node id="8">
        <label>Eigen/Core</label>
      </node>
      <node id="21">
        <label>ros/console.h</label>
      </node>
      <node id="13">
        <label>tf/tf.h</label>
      </node>
      <node id="7">
        <label>hateb_local_planner/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Eigen/StdVector</label>
      </node>
      <node id="2">
        <label>hateb_local_planner/obstacles.h</label>
        <link refid="obstacles_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>geometry_msgs/QuaternionStamped.h</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="3">
        <label>geometry_msgs/Polygon.h</label>
      </node>
      <node id="19">
        <label>utility</label>
      </node>
      <node id="10">
        <label>boost/utility.hpp</label>
      </node>
      <node id="5">
        <label>geometry_msgs/TwistWithCovariance.h</label>
      </node>
      <node id="18">
        <label>complex</label>
      </node>
      <node id="12">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>hateb_local_planner/distance_calculations.h</label>
        <link refid="distance__calculations_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>boost/type_traits.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehateb__local__planner">hateb_local_planner</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Software<sp/>License<sp/>Agreement<sp/>(BSD<sp/>License)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(c)<sp/>2016,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>TU<sp/>Dortmund<sp/>-<sp/>Institute<sp/>of<sp/>Control<sp/>Theory<sp/>and<sp/>Systems<sp/>Engineering.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>institute<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Christoph<sp/>RÃ¶smann</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="obstacles_8h" kindref="compound">hateb_local_planner/obstacles.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ros/assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ros/console.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;hateb_local_planner/misc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehateb__local__planner" kindref="compound">hateb_local_planner</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ad3249541e53232710d2315802b581e25" kindref="member">PolygonObstacle::fixPolygonClosure</ref>()<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.size()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.front().isApprox(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.back()))<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.pop_back();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ab374ab9f993a2c2e943052aff01d7e41" kindref="member">PolygonObstacle::calcCentroid</ref>()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref>.setConstant(NAN);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;PolygonObstacle::calcCentroid():<sp/>number<sp/>of<sp/>vertices<sp/>is<sp/>empty.<sp/>the<sp/>resulting<sp/>centroid<sp/>is<sp/>a<sp/>vector<sp/>of<sp/>NANs.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>polygon<sp/>is<sp/>a<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref><sp/>=<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.front();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>polygon<sp/>is<sp/>a<sp/>line:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref><sp/>=<sp/>0.5<sp/>*<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.front()<sp/>+<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.back());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref>.setZero();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>centroid<sp/>(see<sp/>wikipedia<sp/>http://de.wikipedia.org/wiki/Geometrischer_Schwerpunkt#Polygon)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>=<sp/>0.5<sp/>*<sp/>sum_0_n-1<sp/>(x_i<sp/>*<sp/>y_{i+1}<sp/>-<sp/>x_{i+1}<sp/>*<sp/>y_i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>+=<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).coeffRef(0)<sp/>*<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i<sp/>+<sp/>1).coeffRef(1)<sp/>-<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i<sp/>+<sp/>1).coeffRef(0)<sp/>*<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).coeffRef(1);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>A<sp/>+=<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1).coeffRef(0)<sp/>*<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(0).coeffRef(1)<sp/>-<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(0).coeffRef(0)<sp/>*<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1).coeffRef(1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>A<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aux<sp/>=<sp/>((<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).coeffRef(0)<sp/>*<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i<sp/>+<sp/>1).coeffRef(1))<sp/>-<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i<sp/>+<sp/>1).coeffRef(0)<sp/>*<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i).coeffRef(1)));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref><sp/>+=<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i)<sp/>+<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i<sp/>+<sp/>1))<sp/>*<sp/>aux;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aux<sp/>=<sp/>((<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1).coeffRef(0)<sp/>*<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(0).coeffRef(1))<sp/>-<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(0).coeffRef(0)<sp/>*<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1).coeffRef(1)));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref><sp/>+=<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1)<sp/>+<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(0))<sp/>*<sp/>aux;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref><sp/>/=<sp/>(6<sp/>*<sp/>A);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>==<sp/>0<sp/>-&gt;<sp/>all<sp/>points<sp/>are<sp/>placed<sp/>on<sp/>a<sp/>&apos;perfect&apos;<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>seach<sp/>for<sp/>the<sp/>two<sp/>outer<sp/>points<sp/>of<sp/>the<sp/>line<sp/>with<sp/>the<sp/>maximum<sp/>distance<sp/>inbetween</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_cand<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_cand<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>();<sp/>++j)<sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>with<sp/>j=i+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>[j]<sp/>-<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>[i]).norm();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>max_dist)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_dist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i_cand<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j_cand<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>centroid<sp/>of<sp/>that<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" kindref="member">centroid_</ref><sp/>=<sp/>0.5<sp/>*<sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>[i_cand]<sp/>+<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>[j_cand]);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">Eigen::Vector2d<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1aba2767f7dd4d60e142ddea72a8789d72" kindref="member">PolygonObstacle::getClosestPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>position)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>polygon<sp/>is<sp/>a<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.front();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>new_pt<sp/>=<sp/><ref refid="namespacehateb__local__planner_1af895105afa3bbde12cf912915473fcb1" kindref="member">closest_point_on_line_segment_2d</ref>(position,<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(0),<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(1));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>&gt;<sp/>2)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>real<sp/>polygon<sp/>and<sp/>not<sp/>a<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>(new_pt<sp/>-<sp/>position).norm();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>closest_pt<sp/>=<sp/>new_pt;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>each<sp/>polygon<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1;<sp/>++i)<sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>first<sp/>one,<sp/>since<sp/>we<sp/>already<sp/>checked<sp/>it<sp/>(new_pt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_pt<sp/>=<sp/><ref refid="namespacehateb__local__planner_1af895105afa3bbde12cf912915473fcb1" kindref="member">closest_point_on_line_segment_2d</ref>(position,<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i),<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_dist<sp/>=<sp/>(new_pt<sp/>-<sp/>position).norm();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_dist<sp/>&lt;<sp/>dist)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>new_dist;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closest_pt<sp/>=<sp/>new_pt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>afterwards<sp/>we<sp/>check<sp/>the<sp/>edge<sp/>between<sp/>goal<sp/>and<sp/>start<sp/>(close<sp/>polygon)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_pt<sp/>=<sp/><ref refid="namespacehateb__local__planner_1af895105afa3bbde12cf912915473fcb1" kindref="member">closest_point_on_line_segment_2d</ref>(position,<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.back(),<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.front());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_dist<sp/>=<sp/>(new_pt<sp/>-<sp/>position).norm();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_dist<sp/>&lt;<sp/>dist)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_pt;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>closest_pt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_pt;<sp/><sp/></highlight><highlight class="comment">//<sp/>closest<sp/>point<sp/>on<sp/>line<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;PolygonObstacle::getClosestPoint()<sp/>cannot<sp/>find<sp/>any<sp/>closest<sp/>point.<sp/>Polygon<sp/>ill-defined?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Vector2d::Zero();<sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>maybe<sp/>boost::optional?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a8c4ff26c044b9575bbce5cae7ebb284f" kindref="member">PolygonObstacle::checkLineIntersection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>strategy,<sp/>check<sp/>all<sp/>edge-line<sp/>intersections<sp/>until<sp/>an<sp/>intersection<sp/>is<sp/>found...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>each<sp/>polygon<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacehateb__local__planner_1aa6390beb4d01c1661e1c7523f74a93b2" kindref="member">check_line_segments_intersection_2d</ref>(line_start,<sp/>line_end,<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i),<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.at(i<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" kindref="member">noVertices</ref>()<sp/>==<sp/>2)<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>polygon<sp/>is<sp/>a<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aa6390beb4d01c1661e1c7523f74a93b2" kindref="member">check_line_segments_intersection_2d</ref>(line_start,<sp/>line_end,<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.back(),<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.front());<sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>close<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implements<sp/>toPolygonMsg()<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ad51dbe22ccecf14472ca3f24aeb13be6" kindref="member">PolygonObstacle::toPolygonMsg</ref>(geometry_msgs::Polygon&amp;<sp/>polygon)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>polygon.points.resize(<ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.size());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points[i].x<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>[i].x();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points[i].y<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" kindref="member">vertices_</ref>[i].y();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>polygon.points[i].z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hateb_local_planner</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hateb_local_planner/src/obstacles.cpp"/>
  </compounddef>
</doxygen>
