<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhateb__local__planner_1_1PolygonObstacle" kind="class" language="C++" prot="public">
    <compoundname>hateb_local_planner::PolygonObstacle</compoundname>
    <basecompoundref refid="classhateb__local__planner_1_1Obstacle" prot="public" virt="non-virtual">hateb_local_planner::Obstacle</basecompoundref>
    <includes refid="obstacles_8h" local="no">obstacles.h</includes>
      <sectiondef kind="user-defined">
      <header>Define the polygon</header>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1aa2163c7b7110e9e6f3555ea032b9d5fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref> &amp;</type>
        <definition>const Point2dContainer&amp; hateb_local_planner::PolygonObstacle::vertices</definition>
        <argsstring>() const</argsstring>
        <name>vertices</name>
        <briefdescription>
<para>Access vertices container (read-only) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="749" column="26" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1ab6212e7f48c7b388291261a020a2e1af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref> &amp;</type>
        <definition>Point2dContainer&amp; hateb_local_planner::PolygonObstacle::vertices</definition>
        <argsstring>()</argsstring>
        <name>vertices</name>
        <briefdescription>
<para>Access vertices container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="750" column="20" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="750" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1ace8a27f9700ae0c51282e1e518eb71da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::PolygonObstacle::pushBackVertex</definition>
        <argsstring>(const Eigen::Ref&lt; const Eigen::Vector2d &gt; &amp;vertex)</argsstring>
        <name>pushBackVertex</name>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::Vector2d &gt; &amp;</type>
          <declname>vertex</declname>
        </param>
        <briefdescription>
<para>Add a vertex to the polygon (edge-point) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>You do not need to close the polygon (do not repeat the first vertex) </para>
</simplesect>
<simplesect kind="warning"><para>Do not forget to call <ref refid="classhateb__local__planner_1_1PolygonObstacle_1a17f5da81bc9b778b4769319166186061" kindref="member">finalizePolygon()</ref> after adding all vertices </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>2D point defining a new polygon edge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="758" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="758" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1adfba65155bc6fb0968e69de7664f8df3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::PolygonObstacle::pushBackVertex</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>pushBackVertex</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Add a vertex to the polygon (edge-point) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>You do not need to close the polygon (do not repeat the first vertex) </para>
</simplesect>
<simplesect kind="warning"><para>Do not forget to call <ref refid="classhateb__local__planner_1_1PolygonObstacle_1a17f5da81bc9b778b4769319166186061" kindref="member">finalizePolygon()</ref> after adding all vertices </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate of the new vertex </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate of the new vertex </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="770" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="770" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a17f5da81bc9b778b4769319166186061" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::PolygonObstacle::finalizePolygon</definition>
        <argsstring>()</argsstring>
        <name>finalizePolygon</name>
        <briefdescription>
<para>Call finalizePolygon after the polygon is created with the help of <ref refid="classhateb__local__planner_1_1PolygonObstacle_1ace8a27f9700ae0c51282e1e518eb71da" kindref="member">pushBackVertex()</ref> methods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="778" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="778" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a3086e001a07be0238274d4a2ab52cf4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::PolygonObstacle::clearVertices</definition>
        <argsstring>()</argsstring>
        <name>clearVertices</name>
        <briefdescription>
<para>Clear all vertices (Afterwards the polygon is not valid anymore) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="787" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="787" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int hateb_local_planner::PolygonObstacle::noVertices</definition>
        <argsstring>() const</argsstring>
        <name>noVertices</name>
        <briefdescription>
<para>Get the number of vertices defining the polygon (the first vertex is counted once) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="795" column="7" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="795" bodyend="795"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref></type>
        <definition>Point2dContainer hateb_local_planner::PolygonObstacle::vertices_</definition>
        <argsstring></argsstring>
        <name>vertices_</name>
        <briefdescription>
<para>Store vertices defining the polygon (. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ace8a27f9700ae0c51282e1e518eb71da" kindref="member">pushBackVertex</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="804" column="20" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" prot="protected" static="no" mutable="no">
        <type>Eigen::Vector2d</type>
        <definition>Eigen::Vector2d hateb_local_planner::PolygonObstacle::centroid_</definition>
        <argsstring></argsstring>
        <name>centroid_</name>
        <briefdescription>
<para>Store the centroid coordinates of the polygon (. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1PolygonObstacle_1ab374ab9f993a2c2e943052aff01d7e41" kindref="member">calcCentroid</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="805" column="19" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hateb_local_planner::PolygonObstacle::finalized_</definition>
        <argsstring></argsstring>
        <name>finalized_</name>
        <briefdescription>
<para>Flat that keeps track if the polygon was finalized after adding all vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="807" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="807" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1ac1ebe79f05206771debec653f89ef991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hateb_local_planner::PolygonObstacle::PolygonObstacle</definition>
        <argsstring>()</argsstring>
        <name>PolygonObstacle</name>
        <briefdescription>
<para>Default constructor of the polygon obstacle class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="631" column="3" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="631" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a67d39634805c1cd1c72334dcf8fe7aac" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hateb_local_planner::PolygonObstacle::PolygonObstacle</definition>
        <argsstring>(Point2dContainer vertices)</argsstring>
        <name>PolygonObstacle</name>
        <param>
          <type><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref></type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
<para>Construct polygon obstacle with a list of vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="636" column="12" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="636" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a4fb0e393397045a1cffa1c55fd7e74f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::PolygonObstacle::checkCollision</definition>
        <argsstring>(const Eigen::Vector2d &amp;point, double min_dist) const override</argsstring>
        <name>checkCollision</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1adb830893b528f4497e64aaa208d2d25f">checkCollision</reimplements>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_dist</declname>
        </param>
        <briefdescription>
<para>Check if a given point collides with the obstacle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>2D reference position that should be checked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_dist</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum distance allowed to the obstacle to be collision free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if position is inside the region of the obstacle or if the minimum distance is lower than min_dist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="649" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="649" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a8c4ff26c044b9575bbce5cae7ebb284f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::PolygonObstacle::checkLineIntersection</definition>
        <argsstring>(const Eigen::Vector2d &amp;line_start, const Eigen::Vector2d &amp;line_end, double min_dist=0) const override</argsstring>
        <name>checkLineIntersection</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1ae75ac3277ce87e0e6886b6ee278ae4c9">checkLineIntersection</reimplements>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>line_start</declname>
        </param>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>line_end</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_dist</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Check if a given line segment between two points intersects with the obstacle (and additionally keeps a safty distance <computeroutput>min_dist</computeroutput>) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_start</parametername>
</parameternamelist>
<parameterdescription>
<para>2D point for the end of the reference line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line_end</parametername>
</parameternamelist>
<parameterdescription>
<para>2D point for the end of the reference line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_dist</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum distance allowed to the obstacle to be collision/intersection free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>we ignore <computeroutput>min_dist</computeroutput> here </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if given line intersects the region of the obstacle or if the minimum distance is lower than min_dist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="686" column="8" bodyfile="hateb_local_planner/src/obstacles.cpp" bodystart="155" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1aabdae3ae8dd782d1d94ced5034c3ab49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double hateb_local_planner::PolygonObstacle::getMinimumDistance</definition>
        <argsstring>(const Eigen::Vector2d &amp;position) const override</argsstring>
        <name>getMinimumDistance</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1a7fbc6d91807721ecf7bf0d3545215d7e">getMinimumDistance</reimplements>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Get the minimum euclidean distance to the obstacle (point as reference) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>2d reference position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest possible distance to the obstacle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="689" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="689" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a7269321e19888c5651dded65642548a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double hateb_local_planner::PolygonObstacle::getMinimumDistance</definition>
        <argsstring>(const Eigen::Vector2d &amp;line_start, const Eigen::Vector2d &amp;line_end) const override</argsstring>
        <name>getMinimumDistance</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1a0171d2258c8a5802a285a0e10493f70f">getMinimumDistance</reimplements>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>line_start</declname>
        </param>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>line_end</declname>
        </param>
        <briefdescription>
<para>Get the minimum euclidean distance to the obstacle (line as reference) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_start</parametername>
</parameternamelist>
<parameterdescription>
<para>2d position of the begin of the reference line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line_end</parametername>
</parameternamelist>
<parameterdescription>
<para>2d position of the end of the reference line </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest possible distance to the obstacle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="692" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="692" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1aa9231a39bc457c380dc8276c113fd46c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double hateb_local_planner::PolygonObstacle::getMinimumDistance</definition>
        <argsstring>(const Point2dContainer &amp;polygon) const override</argsstring>
        <name>getMinimumDistance</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1a17efb3c82dd851ca791293f839f738af">getMinimumDistance</reimplements>
        <param>
          <type>const <ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref> &amp;</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
<para>Get the minimum euclidean distance to the obstacle (polygon as reference) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertices (2D points) describing a closed polygon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest possible distance to the obstacle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="695" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="695" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1aba2767f7dd4d60e142ddea72a8789d72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Eigen::Vector2d</type>
        <definition>Eigen::Vector2d hateb_local_planner::PolygonObstacle::getClosestPoint</definition>
        <argsstring>(const Eigen::Vector2d &amp;position) const override</argsstring>
        <name>getClosestPoint</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1a3c5f4b2d64c073f88acd7f07b0f3f892">getClosestPoint</reimplements>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Get the closest point on the boundary of the obstacle w.r.t. a specified reference position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>reference 2d position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>closest point on the obstacle boundary </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="698" column="19" bodyfile="hateb_local_planner/src/obstacles.cpp" bodystart="117" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a839a025234a43e40887553edc2b7ab41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double hateb_local_planner::PolygonObstacle::getMinimumSpatioTemporalDistance</definition>
        <argsstring>(const Eigen::Vector2d &amp;position, double t) const override</argsstring>
        <name>getMinimumSpatioTemporalDistance</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1a5823384ad8772f10a996c1ff95b6c1c2">getMinimumSpatioTemporalDistance</reimplements>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get the estimated minimum spatiotemporal distance to the moving obstacle using a constant velocity model (point as reference) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>2d reference position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>time, for which the minimum distance to the obstacle is estimated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest possible distance to the obstacle at time t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="701" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="701" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1acd0499a11831280859922a6db25e3e4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double hateb_local_planner::PolygonObstacle::getMinimumSpatioTemporalDistance</definition>
        <argsstring>(const Eigen::Vector2d &amp;line_start, const Eigen::Vector2d &amp;line_end, double t) const override</argsstring>
        <name>getMinimumSpatioTemporalDistance</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1abee2e494d966a29d0fc702e8e05f7d0c">getMinimumSpatioTemporalDistance</reimplements>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>line_start</declname>
        </param>
        <param>
          <type>const Eigen::Vector2d &amp;</type>
          <declname>line_end</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get the estimated minimum spatiotemporal distance to the moving obstacle using a constant velocity model (line as reference) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_start</parametername>
</parameternamelist>
<parameterdescription>
<para>2d position of the begin of the reference line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line_end</parametername>
</parameternamelist>
<parameterdescription>
<para>2d position of the end of the reference line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>time, for which the minimum distance to the obstacle is estimated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest possible distance to the obstacle at time t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="708" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="708" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a53e3769caac423620226d206a0f0911d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double hateb_local_planner::PolygonObstacle::getMinimumSpatioTemporalDistance</definition>
        <argsstring>(const Point2dContainer &amp;polygon, double t) const override</argsstring>
        <name>getMinimumSpatioTemporalDistance</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1ab58503d35f43e72ba48c7fb99209dddd">getMinimumSpatioTemporalDistance</reimplements>
        <param>
          <type>const <ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref> &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get the estimated minimum spatiotemporal distance to the moving obstacle using a constant velocity model (polygon as reference) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertices (2D points) describing a closed polygon </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>time, for which the minimum distance to the obstacle is estimated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest possible distance to the obstacle at time t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="715" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="715" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a45a7aedfab895f3d3919f695c9a60b9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void hateb_local_planner::PolygonObstacle::predictVertices</definition>
        <argsstring>(double t, Point2dContainer &amp;pred_vertices) const</argsstring>
        <name>predictVertices</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref> &amp;</type>
          <declname>pred_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="721" column="16" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="721" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1ad3d8309b5cb4ec59119213606a4c0e46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const Eigen::Vector2d &amp;</type>
        <definition>const Eigen::Vector2d&amp; hateb_local_planner::PolygonObstacle::getCentroid</definition>
        <argsstring>() const override</argsstring>
        <name>getCentroid</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1a5c68d148062159714a51d3ed808eb0ac">getCentroid</reimplements>
        <briefdescription>
<para>Get centroid coordinates of the obstacle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eigen::Vector2d containing the centroid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="731" column="25" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1a659d05cfe198739c0bafa2ed97b19e15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; hateb_local_planner::PolygonObstacle::getCentroidCplx</definition>
        <argsstring>() const override</argsstring>
        <name>getCentroidCplx</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1a0a0d0832da9806649e6d5a1f4134e3b7">getCentroidCplx</reimplements>
        <briefdescription>
<para>Get centroid coordinates of the obstacle as complex number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::complex containing the centroid coordinate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="737" column="16" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="737" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1ad51dbe22ccecf14472ca3f24aeb13be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void hateb_local_planner::PolygonObstacle::toPolygonMsg</definition>
        <argsstring>(geometry_msgs::Polygon &amp;polygon) override</argsstring>
        <name>toPolygonMsg</name>
        <reimplements refid="classhateb__local__planner_1_1Obstacle_1ab22dd73538d93b0797cdcf3b483d4366">toPolygonMsg</reimplements>
        <param>
          <type>geometry_msgs::Polygon &amp;</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
<para>Convert the obstacle to a polygon message. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the obstacle to a corresponding polygon msg. Point obstacles have one vertex, lines have two vertices and polygons might are implictly closed such that the start vertex must not be repeated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="743" column="8" bodyfile="hateb_local_planner/src/obstacles.cpp" bodystart="172" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1ad3249541e53232710d2315802b581e25" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::PolygonObstacle::fixPolygonClosure</definition>
        <argsstring>()</argsstring>
        <name>fixPolygonClosure</name>
        <briefdescription>
<para>Check if the current polygon contains the first vertex twice (as start and end) and in that case erase the last redundant one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="800" column="8" bodyfile="hateb_local_planner/src/obstacles.cpp" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1PolygonObstacle_1ab374ab9f993a2c2e943052aff01d7e41" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::PolygonObstacle::calcCentroid</definition>
        <argsstring>()</argsstring>
        <name>calcCentroid</name>
        <briefdescription>
<para>Compute the centroid of the polygon (called inside <ref refid="classhateb__local__planner_1_1PolygonObstacle_1a17f5da81bc9b778b4769319166186061" kindref="member">finalizePolygon()</ref>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="802" column="8" bodyfile="hateb_local_planner/src/obstacles.cpp" bodystart="56" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a polygon obstacle with an arbitrary number of vertices. </para>
    </briefdescription>
    <detaileddescription>
<para>If the polygon has only 2 vertices, than it is considered as a line, otherwise the polygon will always be closed (a connection between the first and the last vertex is included automatically). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>hateb_local_planner::PolygonObstacle</label>
        <link refid="classhateb__local__planner_1_1PolygonObstacle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hateb_local_planner::Obstacle</label>
        <link refid="classhateb__local__planner_1_1Obstacle"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>hateb_local_planner::PolygonObstacle</label>
        <link refid="classhateb__local__planner_1_1PolygonObstacle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hateb_local_planner::Obstacle</label>
        <link refid="classhateb__local__planner_1_1Obstacle"/>
      </node>
    </collaborationgraph>
    <location file="hateb_local_planner/include/hateb_local_planner/obstacles.h" line="626" column="1" bodyfile="hateb_local_planner/include/hateb_local_planner/obstacles.h" bodystart="626" bodyend="811"/>
    <listofallmembers>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1ab374ab9f993a2c2e943052aff01d7e41" prot="protected" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>calcCentroid</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1adfa647086e493e679107a4989c2586da" prot="protected" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>centroid_</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1afbd1eb180519b1c034ad99012052dde3" prot="protected" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>centroid_velocity_</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a4fb0e393397045a1cffa1c55fd7e74f5" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>checkCollision</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a8c4ff26c044b9575bbce5cae7ebb284f" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>checkLineIntersection</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a3086e001a07be0238274d4a2ab52cf4d" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>clearVertices</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1acdfb0788d21baee220600b1e3ebc32c4" prot="protected" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>dynamic_</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a09d11a5597f5f4dcae52d5c35c50956f" prot="protected" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>finalized_</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a17f5da81bc9b778b4769319166186061" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>finalizePolygon</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1ad3249541e53232710d2315802b581e25" prot="protected" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>fixPolygonClosure</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1ad3d8309b5cb4ec59119213606a4c0e46" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getCentroid</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a659d05cfe198739c0bafa2ed97b19e15" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getCentroidCplx</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1aacb584daa9d0a2c89aaf3bdf50d679dc" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getCentroidVelocity</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1aba2767f7dd4d60e142ddea72a8789d72" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getClosestPoint</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1aabdae3ae8dd782d1d94ced5034c3ab49" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getMinimumDistance</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a7269321e19888c5651dded65642548a4" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getMinimumDistance</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1aa9231a39bc457c380dc8276c113fd46c" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getMinimumDistance</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a839a025234a43e40887553edc2b7ab41" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getMinimumSpatioTemporalDistance</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1acd0499a11831280859922a6db25e3e4e" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getMinimumSpatioTemporalDistance</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a53e3769caac423620226d206a0f0911d" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>getMinimumSpatioTemporalDistance</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1a2cac9cad218278cfa1f11b7345f24624" prot="protected" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>human_</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1a16a676db30495218f7feab593b59b8ad" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>isDynamic</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1ae337b4f2f70248cb4450d95d6e88a669" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>isHuman</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a809ac7e8f1e6e0158607739170a757f1" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>noVertices</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1afdba0c06271d9ad57547650b82f10c3e" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>Obstacle</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1ac1ebe79f05206771debec653f89ef991" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>PolygonObstacle</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a67d39634805c1cd1c72334dcf8fe7aac" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>PolygonObstacle</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1ad2f78dc815bba56a5a887b5584a95995" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>predictCentroidConstantVelocity</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a45a7aedfab895f3d3919f695c9a60b9c" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>predictVertices</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1ace8a27f9700ae0c51282e1e518eb71da" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>pushBackVertex</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1adfba65155bc6fb0968e69de7664f8df3" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>pushBackVertex</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1a0a51ecc56df3aef6ed291e24cf3dfd2c" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>setCentroidVelocity</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1a5b6b4fd55f4f92c6f1ef7f82830f2a94" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>setCentroidVelocity</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1a9fd6aa04d48d7a4ce388ec7b7da99ba9" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>setCentroidVelocity</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1aec2259a8f61ff463e6ce168578486b4b" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>setHuman</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1ad51dbe22ccecf14472ca3f24aeb13be6" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>toPolygonMsg</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1a2ce341af1038397af977fa899f939c5f" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>toTwistWithCovarianceMsg</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1aa2163c7b7110e9e6f3555ea032b9d5fe" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>vertices</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1ab6212e7f48c7b388291261a020a2e1af" prot="public" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>vertices</name></member>
      <member refid="classhateb__local__planner_1_1PolygonObstacle_1a10c80a9b6a55e87f14f258a4dce7d186" prot="protected" virt="non-virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>vertices_</name></member>
      <member refid="classhateb__local__planner_1_1Obstacle_1a1a01b732948c4d7478da12cc7335594d" prot="public" virt="virtual"><scope>hateb_local_planner::PolygonObstacle</scope><name>~Obstacle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
