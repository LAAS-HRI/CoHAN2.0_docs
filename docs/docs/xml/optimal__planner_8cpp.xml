<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="optimal__planner_8cpp" kind="file" language="C++">
    <compoundname>optimal_planner.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="yes">cohan_msgs/Trajectory.h</includes>
    <includes refid="optimal__planner_8h" local="no">hateb_local_planner/optimal_planner.h</includes>
    <includes local="no">limits</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <incdepgraph>
      <node id="41">
        <label>ros/assert.h</label>
      </node>
      <node id="20">
        <label>boost/pointer_cast.hpp</label>
      </node>
      <node id="54">
        <label>cohan_msgs/AgentPathArray.h</label>
      </node>
      <node id="93">
        <label>base_local_planner/BaseLocalPlannerConfig.h</label>
      </node>
      <node id="1">
        <label>/home/ptsingaman/ros_ws/CoHAN2.0/src/hateb_local_planner/src/optimal_planner.cpp</label>
        <link refid="optimal__planner_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="89">
        <label>hateb_local_planner/g2o_types/edge_kinematics.h</label>
        <link refid="edge__kinematics_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>limits</label>
      </node>
      <node id="36">
        <label>geometry_msgs/PoseArray.h</label>
      </node>
      <node id="4">
        <label>hateb_local_planner/optimal_planner.h</label>
        <link refid="optimal__planner_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>tf/transform_listener.h</label>
      </node>
      <node id="68">
        <label>g2o/core/block_solver.h</label>
      </node>
      <node id="87">
        <label>cohan_msgs/AgentType.h</label>
      </node>
      <node id="85">
        <label>hateb_local_planner/g2o_types/edge_agent_robot_visibility.h</label>
        <link refid="edge__agent__robot__visibility_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>ros/publisher.h</label>
      </node>
      <node id="66">
        <label>visualization_msgs/MarkerArray.h</label>
      </node>
      <node id="56">
        <label>cohan_msgs/AgentTimeToGoalArray.h</label>
      </node>
      <node id="55">
        <label>cohan_msgs/AgentTimeToGoal.h</label>
      </node>
      <node id="18">
        <label>Eigen/Geometry</label>
      </node>
      <node id="59">
        <label>cohan_msgs/TrackedSegmentType.h</label>
      </node>
      <node id="92">
        <label>hateb_local_planner/g2o_types/edge_shortest_path.h</label>
        <link refid="edge__shortest__path_8h"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>g2o/solvers/csparse/linear_solver_csparse.h</label>
      </node>
      <node id="58">
        <label>cohan_msgs/TrackedAgents.h</label>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="75">
        <label>hateb_local_planner/g2o_types/edge_acceleration.h</label>
        <link refid="edge__acceleration_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>g2o/core/hyper_graph_action.h</label>
      </node>
      <node id="62">
        <label>nav_msgs/Odometry.h</label>
      </node>
      <node id="13">
        <label>Eigen/Core</label>
      </node>
      <node id="86">
        <label>hateb_local_planner/g2o_types/edge_dynamic_obstacle.h</label>
        <link refid="edge__dynamic__obstacle_8h"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ros/console.h</label>
      </node>
      <node id="64">
        <label>std_msgs/ColorRGBA.h</label>
      </node>
      <node id="79">
        <label>g2o/core/base_multi_edge.h</label>
      </node>
      <node id="7">
        <label>hateb_local_planner/obstacles.h</label>
        <link refid="obstacles_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>map</label>
      </node>
      <node id="17">
        <label>tf/tf.h</label>
      </node>
      <node id="46">
        <label>hateb_local_planner/g2o_types/vertex_timediff.h</label>
        <link refid="vertex__timediff_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>hateb_local_planner/g2o_types/edge_obstacle.h</label>
        <link refid="edge__obstacle_8h"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cohan_msgs/Trajectory.h</label>
      </node>
      <node id="34">
        <label>base_local_planner/costmap_model.h</label>
      </node>
      <node id="53">
        <label>boost/graph/graph_traits.hpp</label>
      </node>
      <node id="44">
        <label>g2o/core/base_vertex.h</label>
      </node>
      <node id="49">
        <label>base_local_planner/goal_functions.h</label>
      </node>
      <node id="43">
        <label>g2o/config.h</label>
      </node>
      <node id="19">
        <label>Eigen/StdVector</label>
      </node>
      <node id="95">
        <label>hateb_local_planner/g2o_types/edge_time_optimal.h</label>
        <link refid="edge__time__optimal_8h"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>visualization_msgs/Marker.h</label>
      </node>
      <node id="77">
        <label>hateb_local_planner/g2o_types/base_teb_edges.h</label>
        <link refid="base__teb__edges_8h"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>hateb_local_planner/HATebLocalPlannerReconfigureConfig.h</label>
      </node>
      <node id="72">
        <label>g2o/core/sparse_optimizer.h</label>
      </node>
      <node id="27">
        <label>tf/transform_datatypes.h</label>
      </node>
      <node id="37">
        <label>geometry_msgs/PoseStamped.h</label>
      </node>
      <node id="6">
        <label>hateb_local_planner/footprint_model.h</label>
        <link refid="footprint__model_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>hateb_local_planner/g2o_types/penalties.h</label>
        <link refid="penalties_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>hateb_local_planner/timed_elastic_band.hpp</label>
        <link refid="timed__elastic__band_8hpp"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>geometry_msgs/Twist.h</label>
      </node>
      <node id="9">
        <label>geometry_msgs/QuaternionStamped.h</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
      <node id="60">
        <label>cohan_msgs/TrajectoryPoint.h</label>
      </node>
      <node id="71">
        <label>g2o/core/optimization_algorithm_levenberg.h</label>
      </node>
      <node id="73">
        <label>g2o/solvers/cholmod/linear_solver_cholmod.h</label>
      </node>
      <node id="63">
        <label>nav_msgs/Path.h</label>
      </node>
      <node id="8">
        <label>geometry_msgs/Polygon.h</label>
      </node>
      <node id="23">
        <label>utility</label>
      </node>
      <node id="78">
        <label>g2o/core/base_binary_edge.h</label>
      </node>
      <node id="80">
        <label>g2o/core/base_unary_edge.h</label>
      </node>
      <node id="94">
        <label>hateb_local_planner/g2o_types/edge_static_agent_visibility.h</label>
        <link refid="edge__static__agent__visibility_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>boost/utility.hpp</label>
      </node>
      <node id="26">
        <label>geometry_msgs/Pose.h</label>
      </node>
      <node id="82">
        <label>hateb_local_planner/g2o_types/edge_agent_agent_safety.h</label>
        <link refid="edge__agent__agent__safety_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>hateb_local_planner/OptimizationCostArray.h</label>
      </node>
      <node id="32">
        <label>ros/ros.h</label>
      </node>
      <node id="91">
        <label>hateb_local_planner/g2o_types/edge_prefer_rotdir.h</label>
        <link refid="edge__prefer__rotdir_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>hateb_local_planner/hateb_config.h</label>
        <link refid="hateb__config_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>iostream</label>
      </node>
      <node id="33">
        <label>hateb_local_planner/planner_interface.h</label>
        <link refid="planner__interface_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>hateb_local_planner/g2o_types/edge_agent_robot_safety.h</label>
        <link refid="edge__agent__robot__safety_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>cohan_msgs/TrajectoryStamped.h</label>
      </node>
      <node id="99">
        <label>climits</label>
      </node>
      <node id="70">
        <label>g2o/core/optimization_algorithm_gauss_newton.h</label>
      </node>
      <node id="65">
        <label>std_msgs/Float32.h</label>
      </node>
      <node id="48">
        <label>hateb_local_planner/visualization.h</label>
        <link refid="visualization_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>hateb_local_planner/timed_elastic_band.h</label>
        <link refid="timed__elastic__band_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>hateb_local_planner/g2o_types/edge_agent_robot_rel_velocity.h</label>
        <link refid="edge__agent__robot__rel__velocity_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>hateb_local_planner/distance_calculations.h</label>
        <link refid="distance__calculations_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>geometry_msgs/TwistWithCovariance.h</label>
      </node>
      <node id="25">
        <label>g2o/stuff/misc.h</label>
      </node>
      <node id="42">
        <label>hateb_local_planner/g2o_types/vertex_pose.h</label>
        <link refid="vertex__pose_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="96">
        <label>hateb_local_planner/g2o_types/edge_velocity.h</label>
        <link refid="edge__velocity_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>hateb_local_planner/pose_se2.h</label>
        <link refid="pose__se2_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>hateb_local_planner/g2o_types/edge_invisible_human.h</label>
        <link refid="edge__invisible__human_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>hateb_local_planner/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>complex</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="57">
        <label>cohan_msgs/AgentTrajectoryArray.h</label>
      </node>
      <node id="67">
        <label>hateb_local_planner/visualization.hpp</label>
        <link refid="visualization_8hpp"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>geometry_msgs/TwistStamped.h</label>
      </node>
      <node id="98">
        <label>hateb_local_planner/g2o_types/edge_via_point.h</label>
        <link refid="edge__via__point_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>memory</label>
      </node>
      <node id="14">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="35">
        <label>cohan_msgs/AgentPath.h</label>
      </node>
      <node id="69">
        <label>g2o/core/factory.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehateb__local__planner">hateb_local_planner</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="optimal__planner_8cpp_1ac8e179e7ade35b9594ba65a297d058b7" prot="public" static="no">
        <name>THROTTLE_RATE</name>
        <initializer>1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ptsingaman/ros_ws/CoHAN2.0/src/hateb_local_planner/src/optimal_planner.cpp" line="45" column="10" bodyfile="/home/ptsingaman/ros_ws/CoHAN2.0/src/hateb_local_planner/src/optimal_planner.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Software<sp/>License<sp/>Agreement<sp/>(BSD<sp/>License)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(c)<sp/>2016,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>TU<sp/>Dortmund<sp/>-<sp/>Institute<sp/>of<sp/>Control<sp/>Theory<sp/>and<sp/>Systems<sp/>Engineering.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2024<sp/>LAAS/CNRS</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>institute<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>Authors:<sp/>Christoph<sp/>Rösmann,<sp/>Phani<sp/>Teja<sp/>Singamaneni</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cohan_msgs/Trajectory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THROTTLE_RATE<sp/>1.0<sp/><sp/></highlight><highlight class="comment">//<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="optimal__planner_8h" kindref="compound">hateb_local_planner/optimal_planner.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehateb__local__planner" kindref="compound">hateb_local_planner</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==============<sp/>Implementation<sp/>===================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1aca96b2f03ab832b2c4159973909ca14f" kindref="member">TebOptimalPlanner::TebOptimalPlanner</ref>()</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>cfg_(nullptr),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obstacles_(nullptr),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>via_points_(nullptr),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cost_(HUGE_VAL),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefer_rotdir_(<ref refid="namespacehateb__local__planner_1a463aa878b6972598ee87204519a60ba0" kindref="member">RotType</ref>::<ref refid="namespacehateb__local__planner_1a463aa878b6972598ee87204519a60ba0a334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">none</ref>),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>robot_model_(new<sp/>PointFootprint()),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_model_(new<sp/>CircularFootprint()),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialized_(false),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimized_(false)<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">TebOptimalPlanner::TebOptimalPlanner(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HATebConfig<sp/>&amp;cfg,<sp/><ref refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" kindref="member">ObstContainer</ref><sp/>*obstacles,<sp/><ref refid="namespacehateb__local__planner_1acb633f39a551ef9e0a25c9e1134ae491" kindref="member">FootprintModelPtr</ref><sp/>robot_model,<sp/><ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref><sp/>visual,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref><sp/>*via_points,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehateb__local__planner_1a96f5d84de31cd8eeeffbbf5341bac099" kindref="member">CircularFootprintPtr</ref><sp/>agent_model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;uint64_t,<sp/>ViaPointContainer&gt;<sp/>*agents_via_points_map)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>initialize(cfg,<sp/>obstacles,<sp/>std::move(robot_model),<sp/>std::move(visual),<sp/>via_points,<sp/>std::move(agent_model),<sp/>agents_via_points_map);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">TebOptimalPlanner::~TebOptimalPlanner()<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>clearGraph();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>dynamically<sp/>allocated<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(optimizer_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>g2o::Factory::destroy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>g2o::OptimizationAlgorithmFactory::destroy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>g2o::HyperGraphActionLibrary::destroy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::initialize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HATebConfig<sp/>&amp;cfg,<sp/><ref refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" kindref="member">ObstContainer</ref><sp/>*obstacles,<sp/><ref refid="namespacehateb__local__planner_1acb633f39a551ef9e0a25c9e1134ae491" kindref="member">FootprintModelPtr</ref><sp/>robot_model,<sp/><ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref><sp/>visual,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref><sp/>*via_points,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehateb__local__planner_1a96f5d84de31cd8eeeffbbf5341bac099" kindref="member">CircularFootprintPtr</ref><sp/>agent_model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;uint64_t,<sp/>ViaPointContainer&gt;<sp/>*agents_via_points_map)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>optimizer<sp/>(set<sp/>solver<sp/>and<sp/>block<sp/>ordering<sp/>settings)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>optimizer_<sp/>=<sp/>initOptimizer();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>cfg_<sp/>=<sp/>&amp;cfg;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>obstacles_<sp/>=<sp/>obstacles;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>robot_model_<sp/>=<sp/>std::move(robot_model);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>agent_model_<sp/>=<sp/>std::move(agent_model);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>via_points_<sp/>=<sp/>via_points;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>agents_via_points_map_<sp/>=<sp/>agents_via_points_map;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>cost_<sp/>=<sp/>HUGE_VAL;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>prefer_rotdir_<sp/>=<sp/>RotType::none;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>setVisualization(std::move(visual));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>vel_start_.first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>vel_start_.second.linear.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>vel_start_.second.linear.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>vel_start_.second.angular.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>vel_goal_.first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>vel_goal_.second.linear.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>vel_goal_.second.linear.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>vel_goal_.second.angular.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>isMode_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::setVisualization(<ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref><sp/>visualization)<sp/>{<sp/>visualization_<sp/>=<sp/>std::move(visualization);<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::visualize()<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visualization_)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fp_size<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>fp_size<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>fp_size<sp/>=<sp/>teb_.sizePoses()<sp/>&gt;<sp/>agent_teb.sizePoses()<sp/>?<sp/>teb_.sizePoses()<sp/>:<sp/>agent_teb.sizePoses();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>visualization_-&gt;publishLocalPlanAndPoses(teb_,<sp/>*robot_model_,<sp/>fp_size);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>visualization_-&gt;publishAgentLocalPlansAndPoses(agents_tebs_map_,<sp/>*agent_model_,<sp/>fp_size);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teb_.sizePoses()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>visualization_-&gt;publishRobotFootprintModel(teb_.Pose(0),<sp/>*robot_model_);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;trajectory.publish_feedback)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>visualization_-&gt;publishFeedbackMessage(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>*obstacles_);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>registers<sp/>custom<sp/>vertices<sp/>and<sp/>edges<sp/>in<sp/>g2o<sp/>framework</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::registerG2OTypes()<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>g2o::Factory<sp/>*factory<sp/>=<sp/>g2o::Factory::instance();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;VERTEX_POSE&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;VertexPose&gt;&gt;());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;VERTEX_TIMEDIFF&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;VertexTimeDiff&gt;&gt;());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_TIME_OPTIMAL&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeTimeOptimal&gt;&gt;());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_SHORTEST_PATH&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeShortestPath&gt;&gt;());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_VELOCITY&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeVelocity&gt;&gt;());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_VELOCITY_HOLONOMIC&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeVelocityHolonomic&gt;&gt;());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_ACCELERATION&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAcceleration&gt;&gt;());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_ACCELERATION_START&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAccelerationStart&gt;&gt;());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_ACCELERATION_GOAL&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAccelerationGoal&gt;&gt;());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_ACCELERATION_HOLONOMIC&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAccelerationHolonomic&gt;&gt;());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_ACCELERATION_HOLONOMIC_START&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAccelerationHolonomicStart&gt;&gt;());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_ACCELERATION_HOLONOMIC_GOAL&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAccelerationHolonomicGoal&gt;&gt;());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_KINEMATICS_DIFF_DRIVE&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeKinematicsDiffDrive&gt;&gt;());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_KINEMATICS_CARLIKE&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeKinematicsCarlike&gt;&gt;());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_OBSTACLE&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeObstacle&gt;&gt;());</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_INFLATED_OBSTACLE&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeInflatedObstacle&gt;&gt;());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_DYNAMIC_OBSTACLE&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeDynamicObstacle&gt;&gt;());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_INVISIBLE_HUMAN&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeInvisibleHuman&gt;&gt;());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_VIA_POINT&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeViaPoint&gt;&gt;());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_PREFER_ROTDIR&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgePreferRotDir&gt;&gt;());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Agents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_VELOCITY_AGENT&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeVelocityAgent&gt;&gt;());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_VELOCITY_HOLONOMIC_AGENT&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeVelocityHolonomicAgent&gt;&gt;());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_AGENT_ROBOT_SAFETY&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAgentRobotSafety&gt;&gt;());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_AGENT_AGENT_SAFETY&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAgentAgentSafety&gt;&gt;());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_AGENT_ROBOT_REL_VELOCITy&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAgentRobotRelVelocity&gt;&gt;());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_AGENT_ROBOT_VISIBILITY&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeAgentRobotVisibility&gt;&gt;());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>factory-&gt;registerType(</highlight><highlight class="stringliteral">&quot;EDGE_STATIC_AGENT_VISIBILITY&quot;</highlight><highlight class="normal">,<sp/>std::make_shared&lt;g2o::HyperGraphElementCreator&lt;EdgeStaticAgentVisibility&gt;&gt;());</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>initialize<sp/>g2o<sp/>optimizer.<sp/>Set<sp/>solver<sp/>settings<sp/>here.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>Return:<sp/>pointer<sp/>to<sp/>new<sp/>SparseOptimizer<sp/>Object.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">boost::shared_ptr&lt;g2o::SparseOptimizer&gt;<sp/>TebOptimalPlanner::initOptimizer()<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>register_g2o_types<sp/>once,<sp/>even<sp/>for<sp/>multiple<sp/>TebOptimalPlanner<sp/>instances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(thread-safe)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::once_flag<sp/>flag<sp/>=<sp/>BOOST_ONCE_INIT;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>boost::call_once(&amp;registerG2OTypes,<sp/>flag);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocating<sp/>the<sp/>optimizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>boost::shared_ptr&lt;g2o::SparseOptimizer&gt;<sp/>optimizer<sp/>=<sp/>boost::make_shared&lt;g2o::SparseOptimizer&gt;();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TEBLinearSolver&gt;<sp/>linear_solver(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1acedc27ee6fa1ed5261dd345d9026ecd5" kindref="member">TEBLinearSolver</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>typedef<sp/>in<sp/>optimization.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>linear_solver-&gt;setBlockOrdering(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TEBBlockSolver&gt;<sp/>block_solver(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a87928ff56147a2fd4f1a7286b6e4ec17" kindref="member">TEBBlockSolver</ref>(std::move(linear_solver)));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*solver<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>g2o::OptimizationAlgorithmLevenberg(std::move(block_solver));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>optimizer-&gt;setAlgorithm(solver);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>g2o::SparseOptimizer::initMultiThreading();<sp/><sp/></highlight><highlight class="comment">//<sp/>required<sp/>for<sp/>&gt;Eigen<sp/>3.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optimizer;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::optimizeTEB(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations_innerloop,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations_outerloop,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compute_cost_afterwards,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obst_cost_scale,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>viapoint_cost_scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alternative_time_cost,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hateb_local_planner::OptimizationCostArray<sp/>*op_costs)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>optimizeTEB(iterations_innerloop,<sp/>iterations_outerloop,<sp/>compute_cost_afterwards,<sp/>obst_cost_scale,<sp/>viapoint_cost_scale,<sp/>alternative_time_cost,<sp/>op_costs,<sp/>cfg_-&gt;trajectory.dt_ref,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_-&gt;trajectory.dt_hysteresis);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::optimizeTEB(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations_innerloop,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations_outerloop,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compute_cost_afterwards,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obst_cost_scale,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>viapoint_cost_scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alternative_time_cost,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hateb_local_planner::OptimizationCostArray<sp/>*op_costs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_ref,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_hyst)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cfg_-&gt;optim.optimization_activate)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>optimized_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_multiplier<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fast_mode<sp/>=<sp/>!cfg_-&gt;obstacles.include_dynamic_obstacles;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>iterations_outerloop;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;trajectory.teb_autosize)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teb_.autoResize(dt_ref,<sp/>dt_hyst,<sp/>cfg_-&gt;trajectory.min_samples);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>agent_teb_kv.second.autoResize(dt_ref,<sp/>dt_hyst,<sp/>cfg_-&gt;trajectory.min_samples);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>success<sp/>=<sp/>buildGraph(weight_multiplier);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clearGraph();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>success<sp/>=<sp/>optimizeGraph(iterations_innerloop,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clearGraph();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>optimized_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compute_cost_afterwards<sp/>&amp;&amp;<sp/>i<sp/>==<sp/>iterations_outerloop<sp/>-<sp/>1)<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>cost<sp/>vec<sp/>only<sp/>in<sp/>the<sp/>last<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>computeCurrentCost(obst_cost_scale,<sp/>viapoint_cost_scale,<sp/>alternative_time_cost,<sp/>op_costs);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>clearGraph();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>weight_multiplier<sp/>*=<sp/>cfg_-&gt;optim.weight_adapt_factor;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::setVelocityStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Twist<sp/>&amp;vel_start)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>vel_start_.first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>vel_start_.second.linear.x<sp/>=<sp/>vel_start.linear.x;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>vel_start_.second.linear.y<sp/>=<sp/>vel_start.linear.y;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>vel_start_.second.angular.z<sp/>=<sp/>vel_start.angular.z;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::setVelocityGoal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Twist<sp/>&amp;vel_goal)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>vel_goal_.first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>vel_goal_.second<sp/>=<sp/>vel_goal;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::plan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::PoseStamped&gt;<sp/>&amp;initial_plan,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Twist<sp/>*<ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>free_goal_vel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a3b4752a48696bcc63570d62786fb9736" kindref="member">AgentPlanVelMap</ref><sp/>*initial_agent_plan_vel_map,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hateb_local_planner::OptimizationCostArray<sp/>*op_costs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_ref,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_hyst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mode)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>isMode_<sp/>=<sp/>Mode;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>ROS_ASSERT_MSG(initialized_,<sp/></highlight><highlight class="stringliteral">&quot;Call<sp/>initialize()<sp/>first.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prep_start_time<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!teb_.isInit())<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>trajectory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>teb_.initTrajectoryToGoal(initial_plan,<sp/>cfg_-&gt;robot.max_vel_x,<sp/>cfg_-&gt;robot.max_vel_theta,<sp/>cfg_-&gt;trajectory.global_plan_overwrite_orientation,<sp/>cfg_-&gt;trajectory.min_samples,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_-&gt;trajectory.allow_init_with_backwards_motion,<sp/>cfg_-&gt;trajectory.teb_init_skip_dist);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.disable_warm_start)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>teb_.clearTimedElasticBand();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>teb_.initTrajectoryToGoal(initial_plan,<sp/>cfg_-&gt;robot.max_vel_x,<sp/>cfg_-&gt;robot.max_vel_theta,<sp/>cfg_-&gt;trajectory.global_plan_overwrite_orientation,<sp/>cfg_-&gt;trajectory.min_samples,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_-&gt;trajectory.allow_init_with_backwards_motion,<sp/>cfg_-&gt;trajectory.teb_init_skip_dist);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>warm<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>PoseSE2<sp/>start_(initial_plan.front().pose);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>PoseSE2<sp/>goal_(initial_plan.back().pose);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teb_.sizePoses()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(goal_.position()<sp/>-<sp/>teb_.BackPose().position()).norm()<sp/>&lt;<sp/>cfg_-&gt;trajectory.force_reinit_new_goal_dist<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(g2o::normalize_theta(goal_.theta()<sp/>-<sp/>teb_.BackPose().theta()))<sp/>&lt;<sp/>cfg_-&gt;trajectory.force_reinit_new_goal_angular)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>warm<sp/>start!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teb_.updateAndPruneTEB(start_,<sp/>goal_,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_-&gt;trajectory.min_samples);<sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>TEB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>goal<sp/>too<sp/>far<sp/>away<sp/>-&gt;<sp/>reinit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;New<sp/>goal:<sp/>distance<sp/>to<sp/>existing<sp/>goal<sp/>is<sp/>higher<sp/>than<sp/>the<sp/>specified<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;threshold.<sp/>Reinitalizing<sp/>trajectories.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teb_.clearTimedElasticBand();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teb_.initTrajectoryToGoal(initial_plan,<sp/>cfg_-&gt;robot.max_vel_x,<sp/>cfg_-&gt;robot.max_vel_theta,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>cfg_-&gt;trajectory.min_samples,<sp/>cfg_-&gt;trajectory.allow_init_with_backwards_motion,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_-&gt;trajectory.teb_init_skip_dist);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>setVelocityStart(*<ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(free_goal_vel)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>setVelocityGoalFree();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>vel_goal_.first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>just<sp/>reactivate<sp/>and<sp/>use<sp/>the<sp/>previously<sp/>set<sp/>velocity<sp/>(should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>zero<sp/>if<sp/>nothing<sp/>was<sp/>modified)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prep_time<sp/>=<sp/>ros::Time::now()<sp/>-<sp/>prep_start_time;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>agent_prep_time_start<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>agents_vel_start_.clear();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>agents_vel_goal_.clear();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>agent_nominal_vels_.clear();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>current_agent_robot_min_dist_<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cfg_-&gt;planning_mode)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agents_tebs_map_.clear();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itr<sp/>=<sp/>agents_tebs_map_.begin();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itr<sp/>!=<sp/>agents_tebs_map_.end())<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial_agent_plan_vel_map-&gt;find(itr-&gt;first)<sp/>==<sp/>initial_agent_plan_vel_map-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itr<sp/>=<sp/>agents_tebs_map_.erase(itr);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itr;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_agents_.clear();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;rp<sp/>=<sp/>initial_plan.front().pose.position;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;initial_agent_plan_vel_kv<sp/>:<sp/>*initial_agent_plan_vel_map)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_id<sp/>=<sp/>initial_agent_plan_vel_kv.first;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;initial_agent_plan<sp/>=<sp/>initial_agent_plan_vel_kv.second.plan;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isMode<sp/>=<sp/>initial_agent_plan_vel_kv.second.isMode;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>erase<sp/>agent-teb<sp/>if<sp/>agent<sp/>plan<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial_agent_plan.empty()<sp/>||<sp/>initial_agent_plan[0].header.frame_id<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;static&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itr<sp/>=<sp/>agents_tebs_map_.find(agent_id);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itr<sp/>!=<sp/>agents_tebs_map_.end())<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;New<sp/>plan:<sp/>new<sp/>agent<sp/>plan<sp/>is<sp/>empty.<sp/>Removing<sp/>agent<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;trajectories.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agents_tebs_map_.erase(itr);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial_agent_plan[0].header.frame_id<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;static&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_agents_.push_back(initial_agent_plan[0].pose);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_nominal_vels_.push_back(initial_agent_plan_vel_kv.second.nominal_vel);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;hp<sp/>=<sp/>initial_agent_plan.front().pose.position;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>std::hypot(rp.x<sp/>-<sp/>hp.x,<sp/>rp.y<sp/>-<sp/>hp.y);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_agent_robot_min_dist_<sp/>=<sp/>std::min(dist,<sp/>current_agent_robot_min_dist_);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agents_tebs_map_.find(agent_id)<sp/>==<sp/>agents_tebs_map_.end())<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>new<sp/>agent-teb<sp/>for<sp/>new<sp/>agent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agents_tebs_map_[agent_id]<sp/>=<sp/>TimedElasticBand();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agents_tebs_map_[agent_id].initTrajectoryToGoal(initial_agent_plan,<sp/>cfg_-&gt;agent.max_vel_x,<sp/>cfg_-&gt;agent.max_vel_theta,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>cfg_-&gt;trajectory.agent_min_samples,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_-&gt;trajectory.allow_init_with_backwards_motion,<sp/>cfg_-&gt;trajectory.teb_init_skip_dist);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.disable_warm_start)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agents_tebs_map_[agent_id];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_teb.clearTimedElasticBand();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_teb.initTrajectoryToGoal(initial_agent_plan,<sp/>cfg_-&gt;agent.max_vel_x,<sp/>cfg_-&gt;agent.max_vel_theta,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>cfg_-&gt;trajectory.agent_min_samples,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_-&gt;trajectory.allow_init_with_backwards_motion,<sp/>cfg_-&gt;trajectory.teb_init_skip_dist);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>agent-teb<sp/>for<sp/>existing<sp/>agent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PoseSE2<sp/>agent_start_(initial_agent_plan.front().pose);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PoseSE2<sp/>agent_goal_(initial_agent_plan.back().pose);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agents_tebs_map_[agent_id];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent_teb.sizePoses()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(agent_goal_.position()<sp/>-<sp/>agent_teb.BackPose().position()).norm()<sp/>&lt;<sp/>cfg_-&gt;trajectory.force_reinit_new_goal_dist)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_teb.updateAndPruneTEB(agent_start_,<sp/>agent_goal_,<sp/>cfg_-&gt;trajectory.agent_min_samples);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;New<sp/>goal:<sp/>distance<sp/>to<sp/>existing<sp/>goal<sp/>is<sp/>higher<sp/>than<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;specified<sp/>threshold.<sp/>Reinitializing<sp/>agent<sp/>trajectories.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_teb.clearTimedElasticBand();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_teb.initTrajectoryToGoal(initial_agent_plan,<sp/>cfg_-&gt;agent.max_vel_x,<sp/>cfg_-&gt;agent.max_vel_theta,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>cfg_-&gt;trajectory.agent_min_samples,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cfg_-&gt;trajectory.teb_init_skip_dist);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>give<sp/>start<sp/>velocity<sp/>for<sp/>agents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;bool,<sp/>geometry_msgs::Twist&gt;<sp/>agent_start_vel;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_start_vel.first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_start_vel.second.linear.x<sp/>=<sp/>initial_agent_plan_vel_kv.second.start_vel.linear.x;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_start_vel.second.linear.y<sp/>=<sp/>initial_agent_plan_vel_kv.second.start_vel.linear.y;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_start_vel.second.angular.z<sp/>=<sp/>initial_agent_plan_vel_kv.second.start_vel.angular.z;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agents_vel_start_[agent_id]<sp/>=<sp/>agent_start_vel;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>set<sp/>goal<sp/>velocity<sp/>for<sp/>agents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;bool,<sp/>geometry_msgs::Twist&gt;<sp/>agent_goal_vel;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_goal_vel.first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agents_tebs_map_.clear();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>agent_prep_time<sp/>=<sp/>ros::Time::now()<sp/>-<sp/>agent_prep_time_start;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>optimize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>opt_start_time<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>teb_opt_result<sp/>=<sp/>optimizeTEB(cfg_-&gt;optim.no_inner_iterations,<sp/>cfg_-&gt;optim.no_outer_iterations,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1.0,<sp/>1.0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>op_costs,<sp/>dt_ref,<sp/>dt_hyst);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_costs)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>hateb_local_planner::OptimizationCost<sp/>op_cost;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>op_cost.type<sp/>=<sp/>hateb_local_planner::OptimizationCost::AGENT_ROBOT_MIN_DIST;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>op_cost.cost<sp/>=<sp/>current_agent_robot_min_dist_;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>op_costs-&gt;costs.push_back(op_cost);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>opt_time<sp/>=<sp/>ros::Time::now()<sp/>-<sp/>opt_start_time;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>total_time<sp/>=<sp/>ros::Time::now()<sp/>-<sp/>prep_start_time;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>ROS_DEBUG_STREAM_COND(total_time.toSec()<sp/>&gt;<sp/>0.1,<sp/></highlight><highlight class="stringliteral">&quot;\nteb<sp/>optimal<sp/>plan<sp/>times:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\ttotal<sp/>plan<sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::to_string(total_time.toSec())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\toptimizatoin<sp/>preparation<sp/>time<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::to_string(prep_time.toSec())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tagent<sp/>preparation<sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::to_string(prep_time.toSec())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tteb<sp/>optimize<sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::to_string(opt_time.toSec())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n-------------------------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>teb_opt_result;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::plan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tf::Pose<sp/>&amp;start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tf::Pose<sp/>&amp;goal,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Twist<sp/>*<ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>free_goal_vel,<sp/>hateb_local_planner::OptimizationCostArray<sp/>*op_costs,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_ref,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_hyst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mode)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>isMode_<sp/>=<sp/>Mode;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_time<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>PoseSE2<sp/>start_(start);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>PoseSE2<sp/>goal_(goal);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>geometry_msgs::Twist<sp/>*zero_vel;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Twist<sp/>*vel<sp/>=<sp/><ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref><sp/>?<sp/><ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref><sp/>:<sp/>zero_vel;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pre_plan_time<sp/>=<sp/>ros::Time::now()<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>plan(start_,<sp/>goal_,<sp/>vel,<sp/>free_goal_vel,<sp/>pre_plan_time.toSec(),<sp/>op_costs,<sp/>dt_ref,<sp/>dt_hyst);</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::plan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2<sp/>&amp;start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2<sp/>&amp;goal,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Twist<sp/>*<ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>free_goal_vel,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pre_plan_time,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hateb_local_planner::OptimizationCostArray<sp/>*op_costs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_ref,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_hyst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mode)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>isMode_<sp/>=<sp/>Mode;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>ROS_ASSERT_MSG(initialized_,<sp/></highlight><highlight class="stringliteral">&quot;Call<sp/>initialize()<sp/>first.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prep_start_time<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!teb_.isInit())<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>trajectory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>teb_.initTrajectoryToGoal(start,<sp/>goal,<sp/>0,<sp/>cfg_-&gt;robot.max_vel_x,<sp/>cfg_-&gt;trajectory.min_samples,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_-&gt;trajectory.allow_init_with_backwards_motion);<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>intermediate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>samples,<sp/>but<sp/>dt=1<sp/>-&gt;<sp/>autoResize<sp/>will<sp/>add<sp/>more<sp/>samples<sp/>before<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>teb_.initTEBtoGoal(start,<sp/>goal,<sp/>0,<sp/>1,<sp/>cfg_-&gt;trajectory.min_samples);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>warm<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teb_.sizePoses()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(goal.position()<sp/>-<sp/>teb_.BackPose().position()).norm()<sp/>&lt;<sp/>cfg_-&gt;trajectory.force_reinit_new_goal_dist<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(g2o::normalize_theta(goal.theta()<sp/>-<sp/>teb_.BackPose().theta()))<sp/>&lt;<sp/>cfg_-&gt;trajectory.force_reinit_new_goal_angular)<sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>warm<sp/>start!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teb_.updateAndPruneTEB(start,<sp/>goal,<sp/>cfg_-&gt;trajectory.min_samples);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>goal<sp/>too<sp/>far<sp/>away<sp/>-&gt;<sp/>reinit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;New<sp/>goal:<sp/>distance<sp/>to<sp/>existing<sp/>goal<sp/>is<sp/>higher<sp/>than<sp/>the<sp/>specified<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;threshold.<sp/>Reinitalizing<sp/>trajectories.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teb_.clearTimedElasticBand();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teb_.initTrajectoryToGoal(start,<sp/>goal,<sp/>0,<sp/>cfg_-&gt;robot.max_vel_x,<sp/>cfg_-&gt;trajectory.min_samples,<sp/>cfg_-&gt;trajectory.allow_init_with_backwards_motion);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>teb_.initTEBtoGoal(start,<sp/>goal,<sp/>0,<sp/>1,<sp/>cfg_-&gt;trajectory.min_samples);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref>)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>setVelocityStart(*<ref refid="namespacehateb__local__planner_1a44e9e507bb08b55ba047f7edcf443643" kindref="member">start_vel</ref>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(free_goal_vel)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>setVelocityGoalFree();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>just<sp/>reactivate<sp/>and<sp/>use<sp/>the<sp/>previously<sp/>set<sp/>velocity<sp/>(should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>zero<sp/>if<sp/>nothing<sp/>was<sp/>modified)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>vel_goal_.first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prep_time<sp/>=<sp/>ros::Time::now()<sp/>-<sp/>prep_start_time;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>optimize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>opt_start_time<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>teb_opt_result<sp/>=<sp/>optimizeTEB(cfg_-&gt;optim.no_inner_iterations,<sp/>cfg_-&gt;optim.no_outer_iterations,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1.0,<sp/>1.0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>op_costs,<sp/>dt_ref,<sp/>dt_hyst);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>opt_time<sp/>=<sp/>ros::Time::now()<sp/>-<sp/>opt_start_time;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>total_time<sp/>=<sp/>ros::Time::now()<sp/>-<sp/>prep_start_time;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>ROS_INFO_STREAM_COND((total_time.toSec()<sp/>+<sp/>pre_plan_time)<sp/>&gt;<sp/>0.05,<sp/></highlight><highlight class="stringliteral">&quot;\nteb<sp/>optimal<sp/>plan<sp/>times:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\ttotal<sp/>plan<sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::to_string(total_time.toSec()<sp/>+<sp/>pre_plan_time)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tpre-plan<sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::to_string(pre_plan_time)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\toptimizatoin<sp/>preparation<sp/>time<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::to_string(prep_time.toSec())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tteb<sp/>optimize<sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::to_string(opt_time.toSec())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n-------------------------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>teb_opt_result;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::buildGraph(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_multiplier)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!optimizer_-&gt;edges().empty()<sp/>||<sp/>!optimizer_-&gt;vertices().empty())<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>build<sp/>graph,<sp/>because<sp/>it<sp/>is<sp/>not<sp/>empty.<sp/>Call<sp/>graphClear()!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>TEB<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>AddTEBVertices();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>Edges<sp/>(local<sp/>cost<sp/>functions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;obstacles.legacy_obstacle_association)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>AddEdgesObstaclesLegacy(weight_multiplier);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>AddEdgesObstacles(weight_multiplier);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;obstacles.include_dynamic_obstacles)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>AddEdgesDynamicObstacles();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>AddEdgesViaPoints();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>AddEdgesVelocity();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>AddEdgesAcceleration();</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>AddEdgesTimeOptimal();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>AddEdgesShortestPath();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;robot.min_turning_radius<sp/>==<sp/>0<sp/>||<sp/>cfg_-&gt;optim.weight_kinematics_turning_radius<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>AddEdgesKinematicsDiffDrive();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>a<sp/>differential<sp/>drive<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>AddEdgesKinematicsCarlike();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>a<sp/>carlike<sp/>robot<sp/>since<sp/>the<sp/>turning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>is<sp/>bounded<sp/>from<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>AddEdgesPreferRotDir();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cfg_-&gt;planning_mode)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesObstaclesForAgents();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesDynamicObstaclesForAgents();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesViaPointsForAgents();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesVelocityForAgents();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesAccelerationForAgents();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesTimeOptimalForAgents();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesKinematicsDiffDriveForAgents();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AddEdgesKinematicsCarlikeForAgents();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;hateb.use_agent_robot_safety_c)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesAgentRobotSafety();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;hateb.use_agent_agent_safety_c)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesAgentAgentSafety();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;hateb.use_agent_robot_rel_vel_c)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesAgentRobotRelVelocity();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;hateb.use_agent_robot_visi_c)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesAgentRobotVisibility();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesStaticAgentVisibility();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;hateb.add_invisible_humans)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddEdgesInvisibleHumans();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::optimizeGraph(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>no_iterations,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear_after)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;robot.max_vel_x<sp/>&lt;<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;optimizeGraph():<sp/>Robot<sp/>Max<sp/>Velocity<sp/>is<sp/>smaller<sp/>than<sp/>0.01m/s.<sp/>Optimizing<sp/>aborted...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clear_after)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clearGraph();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!teb_.isInit()<sp/>||<sp/>teb_.sizePoses()<sp/>&lt;<sp/>cfg_-&gt;trajectory.min_samples)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;optimizeGraph():<sp/>TEB<sp/>is<sp/>empty<sp/>or<sp/>has<sp/>too<sp/>less<sp/>elements.<sp/>Skipping<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;optimization.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clear_after)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clearGraph();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>optimizer_-&gt;setVerbose(cfg_-&gt;optim.optimization_verbose);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>optimizer_-&gt;initializeOptimization();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>optimizer_-&gt;optimize(no_iterations);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>Hessian<sp/>for<sp/>visualization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>g2o::OptimizationAlgorithmLevenberg*<sp/>lm<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dynamic_cast&lt;g2o::OptimizationAlgorithmLevenberg*&gt;<sp/>(optimizer_-&gt;solver());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>lm-&gt;solver()-&gt;saveHessian(&quot;~/MasterThesis/Matlab/Hessian.txt&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iter)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;optimizeGraph():<sp/>Optimization<sp/>failed!<sp/>iter=%i&quot;</highlight><highlight class="normal">,<sp/>iter);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clear_after)<sp/>clearGraph();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::clearGraph()<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>optimizer<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optimizer_)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>delete<sp/>all<sp/>edges<sp/>but<sp/>keep<sp/>the<sp/>vertices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>doing<sp/>so,<sp/>we<sp/>will<sp/>delete<sp/>the<sp/>link<sp/>from<sp/>the<sp/>vertices<sp/>to<sp/>the<sp/>edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;vertices<sp/>=<sp/>optimizer_-&gt;vertices();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;v<sp/>:<sp/>vertices)<sp/>v.second-&gt;edges().clear();</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;vertices().clear();<sp/><sp/></highlight><highlight class="comment">//<sp/>necessary,<sp/>because<sp/>optimizer-&gt;clear<sp/>deletes<sp/>pointer-targets<sp/>(therefore<sp/>it<sp/>deletes<sp/>TEB<sp/>states!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;clear();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddTEBVertices()<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>vertices<sp/>to<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>ROS_DEBUG_COND(cfg_-&gt;optim.optimization_verbose,<sp/></highlight><highlight class="stringliteral">&quot;Adding<sp/>TEB<sp/>vertices<sp/>...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id_counter<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>vertices<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>teb_.sizePoses();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>teb_.PoseVertex(i)-&gt;setId(id_counter++);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;addVertex(teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teb_.sizeTimeDiffs()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>teb_.sizeTimeDiffs())<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>teb_.TimeDiffVertex(i)-&gt;setId(id_counter++);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addVertex(teb_.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cfg_-&gt;planning_mode)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>agent_teb.sizePoses();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_teb.PoseVertex(i)-&gt;setId(id_counter++);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addVertex(agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teb_.sizeTimeDiffs()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>agent_teb.sizeTimeDiffs())<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_teb.TimeDiffVertex(i)-&gt;setId(id_counter++);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addVertex(agent_teb.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesObstacles(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_multiplier)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_obstacle<sp/>==<sp/>0<sp/>||<sp/>weight_multiplier<sp/>==<sp/>0<sp/>||<sp/>obstacles_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inflated<sp/>=<sp/>cfg_-&gt;obstacles.inflation_dist<sp/>&gt;<sp/>cfg_-&gt;obstacles.min_obstacle_dist;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>information.fill(cfg_-&gt;optim.weight_obstacle<sp/>*<sp/>weight_multiplier);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information_inflated;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>information_inflated(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_obstacle<sp/>*<sp/>weight_multiplier;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>information_inflated(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_inflation;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>information_inflated(0,<sp/>1)<sp/>=<sp/>information_inflated(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>all<sp/>teb<sp/>points<sp/>(skip<sp/>first<sp/>and<sp/>last)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>teb_.sizePoses()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>left_min_dist<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right_min_dist<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>Obstacle<sp/>*left_obstacle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>Obstacle<sp/>*right_obstacle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Obstacle<sp/>*&gt;<sp/>relevant_obstacles;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d<sp/>pose_orient<sp/>=<sp/>teb_.Pose(i).orientationUnitVec();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>obstacles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1a6a5674a2ba3b2b0bd64cdd76db2fc7e3" kindref="member">ObstaclePtr</ref><sp/>&amp;obst<sp/>:<sp/>*obstacles_)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>handle<sp/>dynamic<sp/>obstacles<sp/>differently<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;obstacles.include_dynamic_obstacles<sp/>&amp;&amp;<sp/>obst-&gt;isDynamic())<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>distance<sp/>to<sp/>robot<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>robot_model_-&gt;calculateDistance(teb_.Pose(i),<sp/>obst.get());</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>considering<sp/>obstacle<sp/>if<sp/>really<sp/>close<sp/>to<sp/>the<sp/>current<sp/>pose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>cfg_-&gt;obstacles.min_obstacle_dist<sp/>*<sp/>cfg_-&gt;obstacles.obstacle_association_force_inclusion_factor)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relevant_obstacles.push_back(obst.get());</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cut-off<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>cfg_-&gt;obstacles.min_obstacle_dist<sp/>*<sp/>cfg_-&gt;obstacles.obstacle_association_cutoff_factor)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>side<sp/>(left<sp/>or<sp/>right)<sp/>and<sp/>assign<sp/>obstacle<sp/>if<sp/>closer<sp/>than<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacehateb__local__planner_1a93d058c71c6324fe929db8d83d7fa43a" kindref="member">cross2d</ref>(pose_orient,<sp/>obst-&gt;getCentroid())<sp/>&gt;<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>left_min_dist)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left_min_dist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left_obstacle<sp/>=<sp/>obst.get();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>right_min_dist)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_min_dist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_obstacle<sp/>=<sp/>obst.get();</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>obstacle<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left_obstacle)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inflated)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeInflatedObstacle;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information_inflated);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>left_obstacle,<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>left_obstacle,<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right_obstacle)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inflated)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeInflatedObstacle;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information_inflated);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>right_obstacle,<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>right_obstacle,<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obstacle<sp/>*obst<sp/>:<sp/>relevant_obstacles)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inflated)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeInflatedObstacle;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information_inflated);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>obst,<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>obst,<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesObstaclesLegacy(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_multiplier)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_obstacle<sp/>==<sp/>0<sp/>||<sp/>weight_multiplier<sp/>==<sp/>0<sp/>||<sp/>obstacles_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>information.fill(cfg_-&gt;optim.weight_obstacle<sp/>*<sp/>weight_multiplier);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information_inflated;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>information_inflated(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_obstacle<sp/>*<sp/>weight_multiplier;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>information_inflated(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_inflation;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>information_inflated(0,<sp/>1)<sp/>=<sp/>information_inflated(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inflated<sp/>=<sp/>cfg_-&gt;obstacles.inflation_dist<sp/>&gt;<sp/>cfg_-&gt;obstacles.min_obstacle_dist;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obstacle<sp/>:<sp/>*obstacles_)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;obstacles.include_dynamic_obstacles<sp/>&amp;&amp;<sp/>obstacle-&gt;isDynamic())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>handle<sp/>dynamic<sp/>obstacles<sp/>differently<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;obstacles.obstacle_poses_affected<sp/>&gt;=<sp/>teb_.sizePoses())<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>teb_.sizePoses()<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>teb_.findClosestTrajectoryPose(*(obstacle));</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>obstacle<sp/>is<sp/>outside<sp/>index-range<sp/>between<sp/>start<sp/>and<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((index<sp/>&lt;=<sp/>1)<sp/>||<sp/>(index<sp/>&gt;<sp/>teb_.sizePoses()<sp/>-<sp/>2))<sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>and<sp/>goal<sp/>are<sp/>fixed<sp/>and<sp/>findNearestBandpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finds<sp/>first<sp/>or<sp/>last<sp/>conf<sp/>if<sp/>intersection<sp/>point<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>outside<sp/>the<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inflated)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeInflatedObstacle;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>teb_.PoseVertex(index));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information_inflated);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>teb_.PoseVertex(index));</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neighbour_idx<sp/>=<sp/>0;<sp/>neighbour_idx<sp/>&lt;<sp/>floor(cfg_-&gt;obstacles.obstacle_poses_affected<sp/>/<sp/>2);<sp/>neighbour_idx++)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>+<sp/>neighbour_idx<sp/>&lt;<sp/>teb_.sizePoses())<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inflated)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst_n_r<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeInflatedObstacle;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setVertex(0,<sp/>teb_.PoseVertex(index<sp/>+<sp/>neighbour_idx));</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setInformation(information_inflated);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst_n_r);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst_n_r<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setVertex(0,<sp/>teb_.PoseVertex(index<sp/>+<sp/>neighbour_idx));</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst_n_r);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>-<sp/>neighbour_idx<sp/>&gt;=<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>needs<sp/>to<sp/>be<sp/>casted<sp/>to<sp/>int<sp/>to<sp/>allow<sp/>negative<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inflated)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst_n_l<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeInflatedObstacle;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setVertex(0,<sp/>teb_.PoseVertex(index<sp/>-<sp/>neighbour_idx));</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setInformation(information_inflated);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst_n_l);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst_n_l<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setVertex(0,<sp/>teb_.PoseVertex(index<sp/>-<sp/>neighbour_idx));</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst_n_l);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Needs<sp/>an<sp/>update<sp/>--&gt;<sp/>please<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesObstaclesForAgents()<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_obstacle<sp/>==<sp/>0<sp/>||<sp/>obstacles_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obstacle<sp/>:<sp/>*obstacles_)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obstacle-&gt;isDynamic())<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>handle<sp/>dynamic<sp/>obstacles<sp/>differently<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;obstacles.obstacle_poses_affected<sp/>&gt;=<sp/>agent_teb.sizePoses())<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>agent_teb.sizePoses()<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>agent_teb.findClosestTrajectoryPose(*(obstacle));</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((index<sp/>&lt;=<sp/>1)<sp/>||<sp/>(index<sp/>&gt;<sp/>agent_teb.sizePoses()<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>information.fill(cfg_-&gt;optim.weight_obstacle);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(index));</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::HUMAN);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neighbour_idx<sp/>=<sp/>0;<sp/>neighbour_idx<sp/>&lt;<sp/>floor(cfg_-&gt;obstacles.obstacle_poses_affected<sp/>/<sp/>2);<sp/>neighbour_idx++)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>+<sp/>neighbour_idx<sp/>&lt;<sp/>agent_teb.sizePoses())<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst_n_r<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(index<sp/>+<sp/>neighbour_idx));</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_r-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::HUMAN);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst_n_r);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index)<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(neighbour_idx)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dist_bandpt_obst_n_l<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeObstacle;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(index<sp/>-<sp/>neighbour_idx));</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_bandpt_obst_n_l-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::HUMAN);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dist_bandpt_obst_n_l);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesDynamicObstacles(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_multiplier)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_obstacle<sp/>==<sp/>0<sp/>||<sp/>weight_multiplier<sp/>==<sp/>0<sp/>||<sp/>obstacles_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_dynamic_obstacle<sp/>*<sp/>weight_multiplier;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_dynamic_obstacle_inflation;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>information(0,<sp/>1)<sp/>=<sp/>information(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obstacle<sp/>:<sp/>*obstacles_)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obstacle-&gt;isDynamic()<sp/>||<sp/>obstacle-&gt;isHuman())<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>first<sp/>and<sp/>last<sp/>pose,<sp/>as<sp/>they<sp/>are<sp/>fixed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>teb_.TimeDiff(0);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>teb_.sizePoses()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dynobst_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeDynamicObstacle(time);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dynobst_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dynobst_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dynobst_edge-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::ROBOT);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dynobst_edge);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>+=<sp/>teb_.TimeDiff(i);<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>check<sp/>the<sp/>time<sp/>diff<sp/>bounds,<sp/>since<sp/>we<sp/>iterate<sp/>to<sp/>&quot;&lt;<sp/>sizePoses()-1&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesInvisibleHumans(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_multiplier)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_invisible_human<sp/>==<sp/>0<sp/>||<sp/>weight_multiplier<sp/>==<sp/>0<sp/>||<sp/>obstacles_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>isMode_<sp/>&gt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_invisible_human<sp/>*<sp/>weight_multiplier;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obstacle<sp/>:<sp/>*obstacles_)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obstacle-&gt;isDynamic()<sp/>||<sp/>!obstacle-&gt;isHuman())<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>first<sp/>and<sp/>last<sp/>pose,<sp/>as<sp/>they<sp/>are<sp/>fixed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>teb_.TimeDiff(0);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>teb_.sizePoses()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*inv_human_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeInvisibleHuman(time);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_human_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_human_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_human_edge-&gt;setVertex(2,<sp/>teb_.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_human_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_human_edge-&gt;setParameters(*cfg_,<sp/>obstacle.get());</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(inv_human_edge);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>+=<sp/>teb_.TimeDiff(i);<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>check<sp/>the<sp/>time<sp/>diff<sp/>bounds,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>iterate<sp/>to<sp/>&quot;&lt;<sp/>sizePoses()-1&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesDynamicObstaclesForAgents(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_multiplier)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_obstacle<sp/>==<sp/>0<sp/>||<sp/>weight_multiplier<sp/>==<sp/>0<sp/>||<sp/>obstacles_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_dynamic_obstacle<sp/>*<sp/>weight_multiplier;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_dynamic_obstacle_inflation;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>information(0,<sp/>1)<sp/>=<sp/>information(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obstacle<sp/>:<sp/>*obstacles_)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obstacle-&gt;isDynamic())<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>agent_teb.sizePoses()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*dynobst_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeDynamicObstacle(i);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynobst_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynobst_edge-&gt;setVertex(1,<sp/>agent_teb.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynobst_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynobst_edge-&gt;setParameters(*cfg_,<sp/>obstacle.get(),<sp/>cohan_msgs::AgentType::HUMAN);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(dynobst_edge);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesViaPoints()<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_viapoint<sp/>==<sp/>0<sp/>||<sp/>via_points_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>via_points_-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_pose_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>3)<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>do<sp/>not<sp/>have<sp/>any<sp/>degrees<sp/>of<sp/>freedom<sp/>for<sp/>reaching<sp/>via-points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;via_point<sp/>:<sp/>*via_points_)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>teb_.findClosestTrajectoryPose(via_point,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>start_pose_idx);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;trajectory.via_points_ordered)<sp/>start_pose_idx<sp/>=<sp/>index<sp/>+<sp/>2;<sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>a<sp/>point<sp/>to<sp/>have<sp/>a<sp/>DOF<sp/>inbetween<sp/>for<sp/>further<sp/>via-points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>point<sp/>conicides<sp/>with<sp/>goal<sp/>or<sp/>is<sp/>located<sp/>behind<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>std::min(index,<sp/>n<sp/>-<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>a<sp/>pose<sp/>before<sp/>the<sp/>goal,<sp/>since<sp/>we<sp/>can<sp/>move<sp/>it<sp/>away!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>point<sp/>coincides<sp/>with<sp/>start<sp/>or<sp/>is<sp/>located<sp/>before<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;trajectory.via_points_ordered)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>connect<sp/>the<sp/>via<sp/>point<sp/>with<sp/>the<sp/>second<sp/>(and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-fixed)<sp/>pose.<sp/>It<sp/>is<sp/>likely<sp/>that<sp/>autoresize<sp/>adds<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>poses<sp/>inbetween<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TebOptimalPlanner::AddEdgesViaPoints():<sp/>skipping<sp/>a<sp/>via-point<sp/>that<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>close<sp/>or<sp/>behind<sp/>the<sp/>current<sp/>robot<sp/>pose.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>via<sp/>points<sp/>really<sp/>close<sp/>or<sp/>behind<sp/>the<sp/>current<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>information.fill(cfg_-&gt;optim.weight_viapoint);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*edge_viapoint<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeViaPoint;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_viapoint-&gt;setVertex(0,<sp/>teb_.PoseVertex(index));</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_viapoint-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_viapoint-&gt;setParameters(*cfg_,<sp/>&amp;via_point);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(edge_viapoint);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesViaPointsForAgents()<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_agent_viapoint<sp/>==<sp/>0<sp/>||<sp/>via_points_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>via_points_-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_pose_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_via_points_kv<sp/>:<sp/>*agents_via_points_map_)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agents_tebs_map_.find(agent_via_points_kv.first)<sp/>==<sp/>agents_tebs_map_.end())<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_WARN_THROTTLE(<ref refid="optimal__planner_8cpp_1ac8e179e7ade35b9594ba65a297d058b7" kindref="member">THROTTLE_RATE</ref>,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inconsistant<sp/>data<sp/>between<sp/>agents_tebs_map<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;agents_via_points_map<sp/>(for<sp/>id<sp/>%ld)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_via_points_kv.first);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_via_points<sp/>=<sp/>agent_via_points_kv.second;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agents_tebs_map_[agent_via_points_kv.first];</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_via_point<sp/>:<sp/>agent_via_points)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>agent_teb.findClosestTrajectoryPose(agent_via_point,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>start_pose_idx);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;trajectory.via_points_ordered)<sp/>start_pose_idx<sp/>=<sp/>index<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>std::min(index,<sp/>n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>std::max(index,<sp/>1);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>information.fill(cfg_-&gt;optim.weight_agent_viapoint);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*edge_viapoint<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeViaPoint;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_viapoint-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(index));</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_viapoint-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_viapoint-&gt;setParameters(*cfg_,<sp/>&amp;agent_via_point);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(edge_viapoint);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesVelocity()<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;robot.max_vel_y<sp/>==<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>non-holonomic<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_max_vel_x<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_max_vel_theta<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_max_vel_x;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_max_vel_theta;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>1)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>0)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*velocity_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeVelocity;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setVertex(2,<sp/>teb_.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setParameters(*cfg_,<sp/>robot_model_.get(),<sp/>isMode_);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(velocity_edge);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>holonomic-robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_max_vel_x<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_max_vel_y<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_max_vel_theta<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>information.fill(0);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_max_vel_x;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_max_vel_y;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>information(2,<sp/>2)<sp/>=<sp/>cfg_-&gt;optim.weight_max_vel_theta;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*velocity_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeVelocityHolonomic;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setVertex(2,<sp/>teb_.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_edge-&gt;setParameters(*cfg_,<sp/>robot_model_.get(),<sp/>isMode_);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(velocity_edge);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesVelocityForAgents()<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;agent.max_vel_y<sp/>==<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>non-holonomic<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_max_agent_vel_x<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_max_agent_vel_theta<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_nominal_agent_vel_x<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>information.fill(0);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_max_agent_vel_x;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_max_agent_vel_theta;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>information(2,<sp/>2)<sp/>=<sp/>cfg_-&gt;optim.weight_nominal_agent_vel_x;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itr_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>agent_teb.sizePoses();</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_velocity_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeVelocityAgent;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setVertex(2,<sp/>agent_teb.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setParameters(*cfg_,<sp/>agent_nominal_vels_[itr_idx]);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_velocity_edge);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr_idx++;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>holonomic-agent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_max_agent_vel_x<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_max_agent_vel_y<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_max_agent_vel_theta<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_nominal_agent_vel_x<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>4,<sp/>4&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>information.fill(0);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_max_agent_vel_x;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_max_agent_vel_y;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>information(2,<sp/>2)<sp/>=<sp/>cfg_-&gt;optim.weight_max_agent_vel_theta;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>information(3,<sp/>3)<sp/>=<sp/>cfg_-&gt;optim.weight_nominal_agent_vel_x;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itr_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>agent_teb.sizePoses();</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_velocity_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeVelocityHolonomicAgent;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setVertex(2,<sp/>agent_teb.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_velocity_edge-&gt;setParameters(*cfg_,<sp/>agent_nominal_vels_[itr_idx]);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_velocity_edge);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr_idx++;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesAcceleration()<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_acc_lim_x<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_acc_lim_theta<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;robot.max_vel_y<sp/>==<sp/>0<sp/>||<sp/>cfg_-&gt;robot.acc_lim_y<sp/>==<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>non-holonomic<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>information.fill(0);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_acc_lim_x;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_acc_lim_theta;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>an<sp/>initial<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vel_start_.first)<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationStart;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(0));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(1));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(2,<sp/>teb_.TimeDiffVertex(0));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setInitialVelocity(vel_start_.second);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(acceleration_edge);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>add<sp/>the<sp/>usual<sp/>acceleration<sp/>edge<sp/>for<sp/>each<sp/>tuple<sp/>of<sp/>three<sp/>teb<sp/>poses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAcceleration;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(2,<sp/>teb_.PoseVertex(i<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(3,<sp/>teb_.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(4,<sp/>teb_.TimeDiffVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(acceleration_edge);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>a<sp/>goal<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vel_goal_.first)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationGoal;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(n<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(n<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(2,<sp/>teb_.TimeDiffVertex(teb_.sizeTimeDiffs()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setGoalVelocity(vel_goal_.second);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(acceleration_edge);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>holonomic<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>information.fill(0);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_acc_lim_x;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_acc_lim_y;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>information(2,<sp/>2)<sp/>=<sp/>cfg_-&gt;optim.weight_acc_lim_theta;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>an<sp/>initial<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vel_start_.first)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationHolonomicStart;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(0));</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(1));</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(2,<sp/>teb_.TimeDiffVertex(0));</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setInitialVelocity(vel_start_.second);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(acceleration_edge);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>add<sp/>the<sp/>usual<sp/>acceleration<sp/>edge<sp/>for<sp/>each<sp/>tuple<sp/>of<sp/>three<sp/>teb<sp/>poses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationHolonomic;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(2,<sp/>teb_.PoseVertex(i<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(3,<sp/>teb_.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(4,<sp/>teb_.TimeDiffVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(acceleration_edge);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>a<sp/>goal<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vel_goal_.first)<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationHolonomicGoal;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(n<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(n<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setVertex(2,<sp/>teb_.TimeDiffVertex(teb_.sizeTimeDiffs()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setGoalVelocity(vel_goal_.second);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(acceleration_edge);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesAccelerationForAgents()<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_agent_acc_lim_x<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_agent_acc_lim_theta<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;agent.max_vel_y<sp/>==<sp/>0<sp/>||<sp/>cfg_-&gt;agent.acc_lim_y<sp/>==<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>non-holonomic<sp/>agent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>information.fill(0);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_agent_acc_lim_x;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_agent_acc_lim_theta;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_it<sp/>=<sp/>agent_teb_kv.first;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>an<sp/>initial<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>agent_teb.sizePoses();</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agents_vel_start_[agent_it].first)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationStart;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(0));</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(1));</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(2,<sp/>agent_teb.TimeDiffVertex(0));</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setInitialVelocity(agents_vel_start_[agent_it].second);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_acceleration_edge);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>add<sp/>the<sp/>usual<sp/>acceleration<sp/>edge<sp/>for<sp/>each<sp/>tuple<sp/>of<sp/>three<sp/>teb<sp/>poses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAcceleration;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(2,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(3,<sp/>agent_teb.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(4,<sp/>agent_teb.TimeDiffVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_acceleration_edge);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>a<sp/>goal<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agents_vel_goal_[agent_it].first)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationGoal;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(n<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(n<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(2,<sp/>agent_teb.TimeDiffVertex(agent_teb.sizeTimeDiffs()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setGoalVelocity(agents_vel_goal_[agent_it].second);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_acceleration_edge);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>holonomic<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>information.fill(0);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>information(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_acc_lim_x;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>information(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_acc_lim_y;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>information(2,<sp/>2)<sp/>=<sp/>cfg_-&gt;optim.weight_acc_lim_theta;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_it<sp/>=<sp/>agent_teb_kv.first;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>an<sp/>initial<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>agent_teb.sizePoses();</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>an<sp/>initial<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vel_start_.first)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationHolonomicStart;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(0));</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(1));</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(2,<sp/>agent_teb.TimeDiffVertex(0));</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setInitialVelocity(agents_vel_start_[agent_it].second);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_acceleration_edge);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>add<sp/>the<sp/>usual<sp/>acceleration<sp/>edge<sp/>for<sp/>each<sp/>tuple<sp/>of<sp/>three<sp/>teb<sp/>poses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationHolonomic;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(2,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(3,<sp/>agent_teb.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(4,<sp/>agent_teb.TimeDiffVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_acceleration_edge);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>a<sp/>goal<sp/>velocity<sp/>should<sp/>be<sp/>taken<sp/>into<sp/>accound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vel_goal_.first)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_acceleration_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAccelerationHolonomicGoal;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(n<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(n<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setVertex(2,<sp/>agent_teb.TimeDiffVertex(agent_teb.sizeTimeDiffs()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setGoalVelocity(agents_vel_goal_[agent_it].second);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_acceleration_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_acceleration_edge);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesTimeOptimal()<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_optimaltime<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>information.fill(cfg_-&gt;optim.weight_optimaltime);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>teb_.sizeTimeDiffs();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*timeoptimal_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeTimeOptimal;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>timeoptimal_edge-&gt;setVertex(0,<sp/>teb_.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>timeoptimal_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>timeoptimal_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(timeoptimal_edge);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesTimeOptimalForAgents()<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_agent_optimaltime<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>information.fill(cfg_-&gt;optim.weight_agent_optimaltime);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>no_time_diffs(agent_teb.sizeTimeDiffs());</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>no_time_diffs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*timeoptimal_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeTimeOptimal;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeoptimal_edge-&gt;setVertex(0,<sp/>agent_teb.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeoptimal_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeoptimal_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(timeoptimal_edge);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesShortestPath()<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_shortest_path<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>information.fill(cfg_-&gt;optim.weight_shortest_path);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>teb_.sizePoses()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*shortest_path_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeShortestPath;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>shortest_path_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>shortest_path_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>shortest_path_edge-&gt;setInformation(information);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>shortest_path_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(shortest_path_edge);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesKinematicsDiffDrive()<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_kinematics_nh<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_kinematics_forward_drive<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>edge<sp/>for<sp/>satisfiying<sp/>kinematic<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information_kinematics;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>information_kinematics.fill(0.0);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>information_kinematics(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_kinematics_nh;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>information_kinematics(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_kinematics_forward_drive;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>teb_.sizePoses()<sp/>-<sp/>1;<sp/>i++)<sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>twiced<sp/>start<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*kinematics_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeKinematicsDiffDrive;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setInformation(information_kinematics);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(kinematics_edge);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesKinematicsDiffDriveForAgents()<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_kinematics_nh<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_kinematics_forward_drive<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>edge<sp/>for<sp/>satisfiying<sp/>kinematic<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information_kinematics;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>information_kinematics.fill(0.0);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>information_kinematics(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_kinematics_nh;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>information_kinematics(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_kinematics_forward_drive;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>agent_teb.sizePoses()<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*kinematics_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeKinematicsDiffDrive;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setInformation(information_kinematics);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(kinematics_edge);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesKinematicsCarlike()<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_kinematics_nh<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_kinematics_turning_radius<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>edge<sp/>for<sp/>satisfiying<sp/>kinematic<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information_kinematics;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>information_kinematics.fill(0.0);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>information_kinematics(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_kinematics_nh;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>information_kinematics(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_kinematics_turning_radius;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>teb_.sizePoses()<sp/>-<sp/>1;<sp/>i++)<sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>twiced<sp/>start<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*kinematics_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeKinematicsCarlike;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setInformation(information_kinematics);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(kinematics_edge);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesKinematicsCarlikeForAgents()<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;optim.weight_kinematics_nh<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cfg_-&gt;optim.weight_kinematics_turning_radius<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>edge<sp/>for<sp/>satisfiying<sp/>kinematic<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>2,<sp/>2&gt;<sp/>information_kinematics;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>information_kinematics.fill(0.0);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>information_kinematics(0,<sp/>0)<sp/>=<sp/>cfg_-&gt;optim.weight_kinematics_nh;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>information_kinematics(1,<sp/>1)<sp/>=<sp/>cfg_-&gt;optim.weight_kinematics_turning_radius;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>agent_teb.sizePoses()<sp/>-<sp/>1;<sp/>i++)<sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>twiced<sp/>start<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*kinematics_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeKinematicsCarlike;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setVertex(0,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setInformation(information_kinematics);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kinematics_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(kinematics_edge);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesPreferRotDir()<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(roesmann):<sp/>Note,<sp/>these<sp/>edges<sp/>can<sp/>result<sp/>in<sp/>odd<sp/>predictions,<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>particular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>can<sp/>observe<sp/>a<sp/>substantional<sp/>mismatch<sp/>between<sp/>open-<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closed-loop<sp/>planning<sp/>leading<sp/>to<sp/>a<sp/>poor<sp/>control<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At<sp/>the<sp/>moment,<sp/>we<sp/>keep<sp/>these<sp/>functionality<sp/>for<sp/>oscillation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recovery:<sp/>Activating<sp/>the<sp/>edge<sp/>for<sp/>a<sp/>short<sp/>time<sp/>period<sp/>might</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>be<sp/>crucial<sp/>and<sp/>could<sp/>move<sp/>the<sp/>robot<sp/>to<sp/>a<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oscillation-free<sp/>state.<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>analyzed<sp/>in<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefer_rotdir_<sp/>==<sp/>RotType::none<sp/>||<sp/>cfg_-&gt;optim.weight_prefer_rotdir<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>weight<sp/>equals<sp/>zero<sp/>skip<sp/>adding<sp/>edges!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefer_rotdir_<sp/>!=<sp/>RotType::right<sp/>&amp;&amp;<sp/>prefer_rotdir_<sp/>!=<sp/>RotType::left)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TebOptimalPlanner::AddEdgesPreferRotDir():<sp/>unsupported<sp/>RotType<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;selected.<sp/>Skipping<sp/>edge<sp/>creation.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>edge<sp/>for<sp/>satisfiying<sp/>kinematic<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information_rotdir;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>information_rotdir.fill(cfg_-&gt;optim.weight_prefer_rotdir);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>teb_.sizePoses()<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/><sp/></highlight><highlight class="comment">//<sp/>currently:<sp/>apply<sp/>to<sp/>first<sp/>3<sp/>rotations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*rotdir_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgePreferRotDir;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>rotdir_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>rotdir_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>rotdir_edge-&gt;setInformation(information_rotdir);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefer_rotdir_<sp/>==<sp/>RotType::left)<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotdir_edge-&gt;preferLeft();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefer_rotdir_<sp/>==<sp/>RotType::right)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotdir_edge-&gt;preferRight();</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(rotdir_edge);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesAgentRobotSafety()<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>robot_teb_size<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_agent_robot_min_dist_<sp/>&lt;<sp/>2.0)<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>(i<sp/>&lt;<sp/>agent_teb.sizePoses())<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>robot_teb_size);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information_agent_robot;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>information_agent_robot.fill(cfg_-&gt;optim.weight_agent_robot_safety);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_robot_safety_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAgentRobotSafety;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_safety_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_safety_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_safety_edge-&gt;setInformation(information_agent_robot);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_safety_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_robot_safety_edge);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesAgentAgentSafety()<sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oi<sp/>=<sp/>agents_tebs_map_.begin();<sp/>oi<sp/>!=<sp/>agents_tebs_map_.end();)<sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent1_teb<sp/>=<sp/>oi-&gt;second;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>++oi;<sp/>ii<sp/>!=<sp/>agents_tebs_map_.end();<sp/>ii++)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent2_teb<sp/>=<sp/>ii-&gt;second;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>(k<sp/>&lt;<sp/>agent1_teb.sizePoses())<sp/>&amp;&amp;<sp/>(k<sp/>&lt;<sp/>agent2_teb.sizePoses());<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information_agent_agent;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>information_agent_agent.fill(cfg_-&gt;optim.weight_agent_agent_safety);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_agent_safety_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAgentAgentSafety;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_agent_safety_edge-&gt;setVertex(0,<sp/>agent1_teb.PoseVertex(k));</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_agent_safety_edge-&gt;setVertex(1,<sp/>agent2_teb.PoseVertex(k));</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent_agent_safety_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_agent_safety_edge);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesAgentRobotRelVelocity()<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information_agent_robot_rel_vel;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>information_agent_robot_rel_vel.fill(cfg_-&gt;optim.weight_agent_robot_rel_vel);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>robot_teb_size<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>agent_teb_size<sp/>=<sp/>agent_teb.sizePoses();</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>(i<sp/>&lt;<sp/>agent_teb_size<sp/>-<sp/>1)<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>robot_teb_size<sp/>-<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_robot_rel_vel_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAgentRobotRelVelocity;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_rel_vel_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_rel_vel_edge-&gt;setVertex(1,<sp/>teb_.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_rel_vel_edge-&gt;setVertex(2,<sp/>teb_.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_rel_vel_edge-&gt;setVertex(3,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_rel_vel_edge-&gt;setVertex(4,<sp/>agent_teb.PoseVertex(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_rel_vel_edge-&gt;setVertex(5,<sp/>agent_teb.TimeDiffVertex(i));</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_rel_vel_edge-&gt;setInformation(information_agent_robot_rel_vel);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_rel_vel_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_robot_rel_vel_edge);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesAgentRobotVisibility()<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>robot_teb_size<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>(i<sp/>&lt;<sp/>agent_teb.sizePoses())<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>robot_teb_size);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information_agent_robot;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>information_agent_robot.fill(cfg_-&gt;optim.weight_agent_robot_visibility);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*agent_robot_visibility_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeAgentRobotVisibility;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_visibility_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_visibility_edge-&gt;setVertex(1,<sp/>agent_teb.PoseVertex(i));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_visibility_edge-&gt;setInformation(information_agent_robot);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_robot_visibility_edge-&gt;setHATebConfig(*cfg_);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(agent_robot_visibility_edge);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::AddEdgesStaticAgentVisibility()<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>robot_teb_size<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>&amp;agent_teb_kv<sp/>:<sp/>agents_tebs_map_)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_kv.second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent<sp/>:<sp/>static_agents_)<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>PoseSE2<sp/>agent_pose(agent);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>robot_teb_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>1,<sp/>1&gt;<sp/>information_agent_robot;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>information_agent_robot.fill(cfg_-&gt;optim.weight_agent_robot_visibility);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*static_agent_visibility_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EdgeStaticAgentVisibility;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_agent_visibility_edge-&gt;setVertex(0,<sp/>teb_.PoseVertex(i));</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_agent_visibility_edge-&gt;setInformation(information_agent_robot);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_agent_visibility_edge-&gt;setParameters(*cfg_,<sp/>agent_pose);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optimizer_-&gt;addEdge(static_agent_visibility_edge);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::computeCurrentCost(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obst_cost_scale,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>viapoint_cost_scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alternative_time_cost,<sp/>hateb_local_planner::OptimizationCostArray<sp/>*op_costs)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>graph<sp/>is<sp/>empty/exist<sp/><sp/>-&gt;<sp/>important<sp/>if<sp/>function<sp/>is<sp/>called<sp/>between<sp/>buildGraph<sp/>and<sp/>optimizeGraph/clearGraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>graph_exist_flag(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optimizer_-&gt;edges().empty()<sp/>&amp;&amp;<sp/>optimizer_-&gt;vertices().empty())<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>the<sp/>graph<sp/>is<sp/>build<sp/>again,<sp/>for<sp/>time<sp/>efficiency<sp/>make<sp/>sure<sp/>to<sp/>call<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>between<sp/>buildGraph<sp/>and<sp/>Optimize<sp/>(deleted),<sp/>but<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>application</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>buildGraph();</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>optimizer_-&gt;initializeOptimization();</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>graph_exist_flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>optimizer_-&gt;computeInitialGuess();</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>cost_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alternative_time_cost)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>cost_<sp/>+=<sp/>teb_.getSumOfAllTimeDiffs();</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TEST<sp/>we<sp/>use<sp/>SumOfAllTimeDiffs()<sp/>here,<sp/>because<sp/>edge<sp/>cost<sp/>depends<sp/>on<sp/>number<sp/>of<sp/>samples,<sp/>which<sp/>is<sp/>not<sp/>always<sp/>the<sp/>same<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>similar<sp/>TEBs,<sp/>since<sp/>we<sp/>are<sp/>using<sp/>an<sp/>AutoResize<sp/>Function<sp/>with<sp/>hysteresis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>need<sp/>pointers<sp/>to<sp/>all<sp/>edges<sp/>-&gt;<sp/>calculate<sp/>error<sp/>for<sp/>each<sp/>edge-type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>aren&apos;t<sp/>storing<sp/>edge<sp/>pointers,<sp/>we<sp/>need<sp/>to<sp/>check<sp/>every<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*it<sp/>:<sp/>optimizer_-&gt;activeEdges())<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cur_cost<sp/>=<sp/>it-&gt;chi2();</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EdgeObstacle<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EdgeInflatedObstacle<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EdgeDynamicObstacle<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_cost<sp/>*=<sp/>obst_cost_scale;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EdgeViaPoint<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_cost<sp/>*=<sp/>viapoint_cost_scale;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EdgeTimeOptimal<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>alternative_time_cost)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>these<sp/>edges<sp/>if<sp/>alternative_time_cost<sp/>is<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>cost_<sp/>+=<sp/>cur_cost;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>temporary<sp/>created<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!graph_exist_flag)<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>clearGraph();</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::extractVelocity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2<sp/>&amp;pose1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2<sp/>&amp;pose2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;vx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;vy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;omega)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dt<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>vx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>vy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>omega<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/>delta_s<sp/>=<sp/>pose2.position()<sp/>-<sp/>pose1.position();</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg_-&gt;robot.max_vel_y<sp/>==<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>nonholonomic<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>conf1dir(cos(pose1.theta()),<sp/>sin(pose1.theta()));</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translational<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dir<sp/>=<sp/>delta_s.dot(conf1dir);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/>vx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(g2o::sign(dir))<sp/>*<sp/>delta_s.norm()<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>vy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>holonomic<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>pose<sp/>2<sp/>into<sp/>the<sp/>current<sp/>robot<sp/>frame<sp/>(pose1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>velocities<sp/>only<sp/>the<sp/>rotation<sp/>of<sp/>the<sp/>direction<sp/>vector<sp/>is<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(map-&gt;pose1-frame:<sp/>inverse<sp/>2d<sp/>rotation<sp/>matrix)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cos_theta1<sp/>=<sp/>std::cos(pose1.theta());</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sin_theta1<sp/>=<sp/>std::sin(pose1.theta());</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p1_dx<sp/>=<sp/>(cos_theta1<sp/>*<sp/>delta_s.x())<sp/>+<sp/>(sin_theta1<sp/>*<sp/>delta_s.y());</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p1_dy<sp/>=<sp/>(-sin_theta1<sp/>*<sp/>delta_s.x())<sp/>+<sp/>(cos_theta1<sp/>*<sp/>delta_s.y());</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>vx<sp/>=<sp/>p1_dx<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>vy<sp/>=<sp/>p1_dy<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rotational<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>orientdiff<sp/>=<sp/>g2o::normalize_theta(pose2.theta()<sp/>-<sp/>pose1.theta());</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>omega<sp/>=<sp/>orientdiff<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::getVelocityCommand(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;vx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;vy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;omega,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>look_ahead_poses,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_ref)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(teb_.sizePoses()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TebOptimalPlanner::getVelocityCommand():<sp/>The<sp/>trajectory<sp/>contains<sp/>less<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;than<sp/>2<sp/>poses.<sp/>Make<sp/>sure<sp/>to<sp/>init<sp/>and<sp/>optimize/plan<sp/>the<sp/>trajectory<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fist.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>vx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>vy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>omega<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>look_ahead_poses<sp/>=<sp/>std::max(1,<sp/>std::min(look_ahead_poses,<sp/>teb_.sizePoses()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;<sp/>counter<sp/>&lt;<sp/>look_ahead_poses;<sp/>++counter)<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>dt<sp/>+=<sp/>teb_.TimeDiff(counter);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dt<sp/>&gt;=<sp/>dt_ref<sp/>*<sp/>look_ahead_poses)<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>look_ahead_poses<sp/>=<sp/>counter<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dt<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;TebOptimalPlanner::getVelocityCommand()<sp/>-<sp/>timediff&lt;=0<sp/>is<sp/>invalid!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>vx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>vy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>omega<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>velocity<sp/>from<sp/>the<sp/>first<sp/>two<sp/>configurations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>extractVelocity(teb_.Pose(0),<sp/>teb_.Pose(look_ahead_poses),<sp/>dt,<sp/>vx,<sp/>vy,<sp/>omega);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TebOptimalPlanner::getVelocityProfile(std::vector&lt;geometry_msgs::Twist&gt;<sp/>&amp;velocity_profile)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>velocity_profile.resize(n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>velocity_profile.front().linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>velocity_profile.front().angular.x<sp/>=<sp/>velocity_profile.front().angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>velocity_profile.front().linear.x<sp/>=<sp/>vel_start_.second.linear.x;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/>velocity_profile.front().linear.y<sp/>=<sp/>vel_start_.second.linear.y;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>velocity_profile.front().angular.z<sp/>=<sp/>vel_start_.second.angular.z;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity_profile[i].linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity_profile[i].angular.x<sp/>=<sp/>velocity_profile[i].angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>extractVelocity(teb_.Pose(i<sp/>-<sp/>1),<sp/>teb_.Pose(i),<sp/>teb_.TimeDiff(i<sp/>-<sp/>1),<sp/>velocity_profile[i].linear.x,<sp/>velocity_profile[i].linear.y,<sp/>velocity_profile[i].angular.z);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>goal<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>velocity_profile.back().linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>velocity_profile.back().angular.x<sp/>=<sp/>velocity_profile.back().angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>velocity_profile.back().linear.x<sp/>=<sp/>vel_goal_.second.linear.x;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>velocity_profile.back().linear.y<sp/>=<sp/>vel_goal_.second.linear.y;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>velocity_profile.back().angular.z<sp/>=<sp/>vel_goal_.second.angular.z;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal">cohan_msgs::Trajectory<sp/>TebOptimalPlanner::getFullTrajectory()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>teb_.sizePoses();</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>cohan_msgs::Trajectory<sp/>trajectory;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trajectory;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>curr_time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>cohan_msgs::TrajectoryPoint<sp/>start;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>teb_.Pose(0).toPoseMsg(start.pose);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>start.velocity.linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>start.velocity.angular.x<sp/>=<sp/>start.velocity.angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>start.velocity.linear.x<sp/>=<sp/>vel_start_.second.linear.x;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/>start.velocity.linear.y<sp/>=<sp/>vel_start_.second.linear.y;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>start.velocity.angular.z<sp/>=<sp/>vel_start_.second.angular.z;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>start.time_from_start.fromSec(curr_time);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>trajectory.points.push_back(start);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>curr_time<sp/>+=<sp/>teb_.TimeDiff(0);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>intermediate<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>cohan_msgs::TrajectoryPoint<sp/>point;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>teb_.Pose(i).toPoseMsg(point.pose);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>point.velocity.linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>point.velocity.angular.x<sp/>=<sp/>point.velocity.angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel1_x;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel1_y;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel2_x;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel2_y;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omega1;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omega2;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>extractVelocity(teb_.Pose(i<sp/>-<sp/>1),<sp/>teb_.Pose(i),<sp/>teb_.TimeDiff(i<sp/>-<sp/>1),<sp/>vel1_x,<sp/>vel1_y,<sp/>omega1);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>extractVelocity(teb_.Pose(i),<sp/>teb_.Pose(i<sp/>+<sp/>1),<sp/>teb_.TimeDiff(i),<sp/>vel2_x,<sp/>vel2_y,<sp/>omega2);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>point.velocity.linear.x<sp/>=<sp/>0.5<sp/>*<sp/>(vel1_x<sp/>+<sp/>vel2_x);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>point.velocity.linear.y<sp/>=<sp/>0.5<sp/>*<sp/>(vel1_y<sp/>+<sp/>vel2_y);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>point.velocity.angular.z<sp/>=<sp/>0.5<sp/>*<sp/>(omega1<sp/>+<sp/>omega2);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>point.time_from_start.fromSec(curr_time);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>trajectory.points.push_back(point);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_time<sp/>+=<sp/>teb_.TimeDiff(i);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>cohan_msgs::TrajectoryPoint<sp/>goal;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>teb_.BackPose().toPoseMsg(goal.pose);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/>goal.velocity.linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/>goal.velocity.angular.x<sp/>=<sp/>goal.velocity.angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>goal.velocity.linear.x<sp/>=<sp/>vel_goal_.second.linear.x;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/>goal.velocity.linear.y<sp/>=<sp/>vel_goal_.second.linear.y;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/>goal.velocity.angular.z<sp/>=<sp/>vel_goal_.second.angular.z;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/>goal.time_from_start.fromSec(curr_time);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/>trajectory.points.push_back(goal);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trajectory;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal">cohan_msgs::Trajectory<sp/>TebOptimalPlanner::getFullAgentTrajectory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>agent_id)<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/>cohan_msgs::Trajectory<sp/>agent_trajectory;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>agent_teb_it<sp/>=<sp/>agents_tebs_map_.find(agent_id);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent_teb_it<sp/>!=<sp/>agents_tebs_map_.end())<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;agent_teb<sp/>=<sp/>agent_teb_it-&gt;second;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>agent_teb_size<sp/>=<sp/>agent_teb.sizePoses();</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent_teb_size<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;TEB<sp/>size<sp/>is<sp/>%d<sp/>for<sp/>agent<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>agent_teb_size,<sp/>agent_id);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_trajectory;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>curr_time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>cohan_msgs::TrajectoryPoint<sp/>start;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_teb.Pose(0).toPoseMsg(start.pose);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>start.velocity.linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>start.velocity.angular.x<sp/>=<sp/>start.velocity.angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>start.velocity.linear.x<sp/>=<sp/>agents_vel_start_[agent_id].second.linear.x;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>start.velocity.linear.y<sp/>=<sp/>agents_vel_start_[agent_id].second.linear.y;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/>start.velocity.angular.z<sp/>=<sp/>agents_vel_start_[agent_id].second.angular.z;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>start.time_from_start.fromSec(curr_time);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_trajectory.points.push_back(start);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>curr_time<sp/>+=<sp/>agent_teb.TimeDiff(0);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intermediate<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>agent_teb_size<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cohan_msgs::TrajectoryPoint<sp/>point;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_teb.Pose(i).toPoseMsg(point.pose);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point.velocity.linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point.velocity.angular.x<sp/>=<sp/>point.velocity.angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel1_x;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel1_y;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel2_x;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel2_y;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omega1;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omega2;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extractVelocity(agent_teb.Pose(i<sp/>-<sp/>1),<sp/>agent_teb.Pose(i),<sp/>agent_teb.TimeDiff(i<sp/>-<sp/>1),<sp/>vel1_x,<sp/>vel1_y,<sp/>omega1);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extractVelocity(agent_teb.Pose(i),<sp/>agent_teb.Pose(i<sp/>+<sp/>1),<sp/>agent_teb.TimeDiff(i),<sp/>vel2_x,<sp/>vel2_y,<sp/>omega2);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point.velocity.linear.x<sp/>=<sp/>0.5<sp/>*<sp/>(vel1_x<sp/>+<sp/>vel2_x);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point.velocity.linear.y<sp/>=<sp/>0.5<sp/>*<sp/>(vel1_y<sp/>+<sp/>vel2_y);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point.velocity.angular.z<sp/>=<sp/>0.5<sp/>*<sp/>(omega1<sp/>+<sp/>omega2);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point.time_from_start.fromSec(curr_time);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>agent_trajectory.points.push_back(point);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curr_time<sp/>+=<sp/>agent_teb.TimeDiff(i);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>cohan_msgs::TrajectoryPoint<sp/>goal;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_teb.BackPose().toPoseMsg(goal.pose);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.velocity.linear.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.velocity.angular.x<sp/>=<sp/>goal.velocity.angular.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.velocity.linear.x<sp/>=<sp/>agents_vel_goal_[agent_id].second.linear.x;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.velocity.linear.y<sp/>=<sp/>agents_vel_goal_[agent_id].second.linear.y;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.velocity.angular.z<sp/>=<sp/>agents_vel_goal_[agent_id].second.angular.z;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.time_from_start.fromSec(curr_time);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>agent_trajectory.points.push_back(goal);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>agent_trajectory;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TebOptimalPlanner::isTrajectoryFeasible(base_local_planner::CostmapModel<sp/>*costmap_model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::Point&gt;<sp/>&amp;footprint_spec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inscribed_radius,</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>circumscribed_radius,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>look_ahead_idx)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(look_ahead_idx<sp/>&lt;<sp/>0<sp/>||<sp/>look_ahead_idx<sp/>&gt;=<sp/>teb().sizePoses())<sp/>look_ahead_idx<sp/>=<sp/>teb().sizePoses()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>look_ahead_idx;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(costmap_model-&gt;footprintCost(teb().Pose(i).x(),<sp/>teb().Pose(i).y(),<sp/>teb().Pose(i).theta(),<sp/>footprint_spec,<sp/>inscribed_radius,<sp/>circumscribed_radius)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visualization_)<sp/>{</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visualization_-&gt;publishInfeasibleRobotPose(teb().Pose(i),<sp/>*robot_model_);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>the<sp/>distance<sp/>between<sp/>two<sp/>poses<sp/>is<sp/>higher<sp/>than<sp/>the<sp/>robot<sp/>radius</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>the<sp/>orientation<sp/>diff<sp/>is<sp/>bigger<sp/>than<sp/>the<sp/>specified<sp/>threshold<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolates<sp/>in<sp/>that<sp/>case.<sp/>(if<sp/>obstacles<sp/>are<sp/>pushing<sp/>two<sp/>consecutive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>poses<sp/>away,<sp/>the<sp/>center<sp/>between<sp/>two<sp/>consecutive<sp/>poses<sp/>might<sp/>coincide<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>obstacle<sp/>;-)!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>look_ahead_idx)<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta_rot<sp/>=<sp/>g2o::normalize_theta(g2o::normalize_theta(teb().Pose(i<sp/>+<sp/>1).theta())<sp/>-<sp/>g2o::normalize_theta(teb().Pose(i).theta()));</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>delta_dist<sp/>=<sp/>teb().Pose(i<sp/>+<sp/>1).position()<sp/>-<sp/>teb().Pose(i).position();</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(delta_rot)<sp/>&gt;<sp/>cfg_-&gt;trajectory.min_resolution_collision_check_angular<sp/>||<sp/>delta_dist.norm()<sp/>&gt;<sp/>inscribed_radius)<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_additional_samples<sp/>=<sp/>std::max(std::ceil(fabs(delta_rot)<sp/>/<sp/>cfg_-&gt;trajectory.min_resolution_collision_check_angular),<sp/>std::ceil(delta_dist.norm()<sp/>/<sp/>inscribed_radius))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PoseSE2<sp/>intermediate_pose<sp/>=<sp/>teb().Pose(i);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>0;<sp/>step<sp/>&lt;<sp/>n_additional_samples;<sp/>++step)<sp/>{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intermediate_pose.position()<sp/>=<sp/>intermediate_pose.position()<sp/>+<sp/>delta_dist<sp/>/<sp/>(n_additional_samples<sp/>+<sp/>1.0);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intermediate_pose.theta()<sp/>=<sp/>g2o::normalize_theta(intermediate_pose.theta()<sp/>+<sp/>(delta_rot<sp/>/<sp/>(n_additional_samples<sp/>+<sp/>1.0)));</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(costmap_model-&gt;footprintCost(intermediate_pose.x(),<sp/>intermediate_pose.y(),<sp/>intermediate_pose.theta(),<sp/>footprint_spec,<sp/>inscribed_radius,<sp/>circumscribed_radius)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visualization_)<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visualization_-&gt;publishInfeasibleRobotPose(intermediate_pose,<sp/>*robot_model_);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hateb_local_planner</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ptsingaman/ros_ws/CoHAN2.0/src/hateb_local_planner/src/optimal_planner.cpp"/>
  </compounddef>
</doxygen>
