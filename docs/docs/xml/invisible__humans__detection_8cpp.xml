<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="invisible__humans__detection_8cpp" kind="file" language="C++">
    <compoundname>invisible_humans_detection.cpp</compoundname>
    <includes refid="map__scanner_8h" local="no">invisible_humans_detection/map_scanner.h</includes>
    <includes local="no">ros/console.h</includes>
    <incdepgraph>
      <node id="6">
        <label>geometry_msgs/PoseArray.h</label>
      </node>
      <node id="17">
        <label>visualization_msgs/MarkerArray.h</label>
      </node>
      <node id="3">
        <label>cohan_msgs/PassageType.h</label>
      </node>
      <node id="19">
        <label>cmath</label>
      </node>
      <node id="18">
        <label>cassert</label>
      </node>
      <node id="20">
        <label>ros/console.h</label>
      </node>
      <node id="12">
        <label>tf2/utils.h</label>
      </node>
      <node id="11">
        <label>tf/tf.h</label>
      </node>
      <node id="14">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="4">
        <label>costmap_converter/ObstacleArrayMsg.h</label>
      </node>
      <node id="13">
        <label>tf2_eigen/tf2_eigen.h</label>
      </node>
      <node id="2">
        <label>invisible_humans_detection/map_scanner.h</label>
        <link refid="map__scanner_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>costmap_converter/ObstacleMsg.h</label>
      </node>
      <node id="1">
        <label>invisible_humans_detection.cpp</label>
        <link refid="invisible__humans__detection_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>visualization_msgs/Marker.h</label>
      </node>
      <node id="8">
        <label>ros/ros.h</label>
      </node>
      <node id="15">
        <label>tf2_ros/transform_listener.h</label>
      </node>
      <node id="7">
        <label>nav_msgs/OccupancyGrid.h</label>
      </node>
      <node id="9">
        <label>sensor_msgs/LaserScan.h</label>
      </node>
      <node id="10">
        <label>std_msgs/Int8.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceinvisible__humans__detection">invisible_humans_detection</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="invisible__humans__detection_8cpp_1ad7a65b9516782c43db8997a8eef5afb3" prot="public" static="no">
        <name>MAP_FRAME</name>
        <initializer>&quot;map&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="invisible_humans_detection/src/invisible_humans_detection.cpp" line="39" column="11" bodyfile="invisible_humans_detection/src/invisible_humans_detection.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="invisible__humans__detection_8cpp_1a30d0bb104c2d03680e5eb1a59fd4c311" prot="public" static="no">
        <name>FOOTPRINT_FRAME</name>
        <initializer>&quot;base_footprint&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="invisible_humans_detection/src/invisible_humans_detection.cpp" line="40" column="9" bodyfile="invisible_humans_detection/src/invisible_humans_detection.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Software<sp/>License<sp/>Agreement<sp/>(BSD<sp/>License)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2025<sp/>LAAS/CNRS</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>institute<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Phani<sp/>Teja<sp/>Singamaneni<sp/>(email:ptsingaman@laas.fr)</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="map__scanner_8h" kindref="compound">invisible_humans_detection/map_scanner.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ros/console.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_FRAME<sp/>&quot;map&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FOOTPRINT_FRAME<sp/>&quot;base_footprint&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinvisible__humans__detection" kindref="compound">invisible_humans_detection</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66ac3ccfb680d85b9df5432eaa63fe04" kindref="member">MapScanner::MapScanner</ref>()<sp/>{<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1add9c07f51ccfe8144d7eb940b7ae13bc" kindref="member">initialize</ref>();<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="classinvisible__humans__detection_1_1MapScanner_1a0c2c5932317636e1fe10bc6beb307981" kindref="member">MapScanner::~MapScanner</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1add9c07f51ccfe8144d7eb940b7ae13bc" kindref="member">MapScanner::initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh(</highlight><highlight class="stringliteral">&quot;~/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1a34a622304fb065a868f0a61a63b4bd" kindref="member">loadRosParamFromNodeHandle</ref>(nh);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>Tf<sp/>listener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>tf2_ros::TransformListener<sp/>tf_listener(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a35e76ba0e48cca53ac6793b912a8f69a" kindref="member">tf_</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Timer<sp/>for<sp/>corner<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1aef190cc69d0a4e72ea479d49c454b412" kindref="member">get_robot_pose_</ref><sp/>=<sp/>nh.createTimer(ros::Duration(0.02),<sp/>&amp;<ref refid="classinvisible__humans__detection_1_1MapScanner_1a7487ca072aafca927379e9814c28c17c" kindref="member">MapScanner::detectOccludedCorners</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>Subscribers<sp/>and<sp/>Publishers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6afd47b8d1cd7546e9acf5d64998e997" kindref="member">map_sub_</ref><sp/>=<sp/>nh.subscribe(</highlight><highlight class="stringliteral">&quot;/map&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>&amp;<ref refid="classinvisible__humans__detection_1_1MapScanner_1a946a51241f2460951227c6cb3bbb601e" kindref="member">MapScanner::mapCB</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a0c7ed15202d90ec590118d3f308bb84f" kindref="member">scan_pub_</ref><sp/>=<sp/>nh.advertise&lt;sensor_msgs::LaserScan&gt;(</highlight><highlight class="stringliteral">&quot;map_scan&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a229ccc056a5aa864715bc808bff26991" kindref="member">pub_invis_human_viz_</ref><sp/>=<sp/>nh.advertise&lt;visualization_msgs::MarkerArray&gt;(</highlight><highlight class="stringliteral">&quot;invisible_humans_markers&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad2317a882b114fb63eaff2c1ea316f86" kindref="member">pub_invis_human_corners_</ref><sp/>=<sp/>nh.advertise&lt;geometry_msgs::PoseArray&gt;(</highlight><highlight class="stringliteral">&quot;invisible_humans_corners&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1afe2173690e6003fa71ea27e1e29c7e23" kindref="member">pub_invis_humans_pos_</ref><sp/>=<sp/>nh.advertise&lt;geometry_msgs::PoseArray&gt;(</highlight><highlight class="stringliteral">&quot;invisible_humans&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a4e199ca4b9861bab1ac8fa3827d7bc4e" kindref="member">pub_invis_human_</ref><sp/>=<sp/>nh.advertise&lt;costmap_converter::ObstacleArrayMsg&gt;(</highlight><highlight class="stringliteral">&quot;invisible_humans_obs&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a91ed0a4ce202a288bac9694c11868b39" kindref="member">passage_detect_pub_</ref><sp/>=<sp/>nh.advertise&lt;cohan_msgs::PassageType&gt;(</highlight><highlight class="stringliteral">&quot;passage&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>laser<sp/>scan<sp/>msg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad5d2ce299b0488d0e7eb36d846c99427" kindref="member">scan_msg_</ref>.angle_min<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a2a40e548145d945ab6489a73193a4b39" kindref="member">angle_min_</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad5d2ce299b0488d0e7eb36d846c99427" kindref="member">scan_msg_</ref>.angle_max<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ac974e09631c7f28c21de1a07a90fa972" kindref="member">angle_max_</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad5d2ce299b0488d0e7eb36d846c99427" kindref="member">scan_msg_</ref>.angle_increment<sp/>=<sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1ac974e09631c7f28c21de1a07a90fa972" kindref="member">angle_max_</ref><sp/>-<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a2a40e548145d945ab6489a73193a4b39" kindref="member">angle_min_</ref>)<sp/>/<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a8ffd6cc6d7ebf854d12bb866458a6678" kindref="member">samples_</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad5d2ce299b0488d0e7eb36d846c99427" kindref="member">scan_msg_</ref>.range_min<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a9c58837c64e34fe7afcc1b8ba8c48c22" kindref="member">range_min_</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad5d2ce299b0488d0e7eb36d846c99427" kindref="member">scan_msg_</ref>.range_max<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab9cd8b04b6c881ecf0f98fc82276d97a" kindref="member">range_max_</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1a34a622304fb065a868f0a61a63b4bd" kindref="member">MapScanner::loadRosParamFromNodeHandle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::NodeHandle<sp/>&amp;private_nh)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>space<sp/>param</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;ns&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1afda176adc9dfaa2422f87d2b2981b7c7" kindref="member">ns_</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Laser<sp/>scan<sp/>parameters<sp/>(can<sp/>be<sp/>set<sp/>using<sp/>ros<sp/>parameter<sp/>server)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;samples&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a8ffd6cc6d7ebf854d12bb866458a6678" kindref="member">samples_</ref>,<sp/>1081);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;range_min&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a9c58837c64e34fe7afcc1b8ba8c48c22" kindref="member">range_min_</ref>,<sp/>0.05);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;range_max&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab9cd8b04b6c881ecf0f98fc82276d97a" kindref="member">range_max_</ref>,<sp/>7.0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;angle_min&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a2a40e548145d945ab6489a73193a4b39" kindref="member">angle_min_</ref>,<sp/>-2.358);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;angle_max&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ac974e09631c7f28c21de1a07a90fa972" kindref="member">angle_max_</ref>,<sp/>2.358);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;scan_resolution&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab098835d6886f6de9f1cb599d867a498" kindref="member">scan_resolution_</ref>,<sp/>700);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Other<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;publish_scan&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a5f0287b10ddfcd10c2aa119878878462" kindref="member">publish_scan_</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;human_radius&quot;</highlight><highlight class="normal">,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a3fbe3e6c8d45d59dedb315d4ab6b6f6a" kindref="member">human_radius_</ref>,<sp/>0.31);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a946a51241f2460951227c6cb3bbb601e" kindref="member">MapScanner::mapCB</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nav_msgs::OccupancyGrid<sp/>&amp;grid)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>map<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref><sp/>=<sp/>grid;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a0658a5d4ec14e5831bc0f46b6415c644" kindref="member">origin_x_</ref><sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.info.origin.position.x;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a21e8c09b7bc1d53c7f220ca179b582a9" kindref="member">origin_y_</ref><sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.info.origin.position.y;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6de905111dc614547392948053119547" kindref="member">resolution_</ref><sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.info.resolution;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad51890bcaff889c6fe3f8f45a7df87d0" kindref="member">size_x_</ref><sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.info.width;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab667eb47f7b6e7ecea17e3e35ca808a7" kindref="member">size_y_</ref><sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.info.height;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a95ca803c84523a6cc10b6cb527e48b42" kindref="member">MapScanner::publishInvisibleHumans</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseArray<sp/>&amp;corners,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseArray<sp/>&amp;poses,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;inv_humans)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>Poses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1afe2173690e6003fa71ea27e1e29c7e23" kindref="member">pub_invis_humans_pos_</ref>.publish(poses);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad2317a882b114fb63eaff2c1ea316f86" kindref="member">pub_invis_human_corners_</ref>.publish(corners);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>costmap_converter::ObstacleArrayMsg<sp/>obstacle_msg;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>obstacle_msg.header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>obstacle_msg.header.frame_id<sp/>=<sp/><ref refid="invisible__humans__detection_8cpp_1ad7a65b9516782c43db8997a8eef5afb3" kindref="member">MAP_FRAME</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>CHANGE<sp/>HERE<sp/>:<sp/>odom<sp/>/<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;human<sp/>:<sp/>inv_humans)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>atan2(human[3],<sp/>human[2]);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>tf2::Quaternion<sp/>quaternion_tf2;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>quaternion_tf2.setRPY(0,<sp/>0,<sp/>yaw);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Quaternion<sp/>quaternion<sp/>=<sp/>tf2::toMsg(quaternion_tf2);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid_scan<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[<ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>.size()<sp/>/<sp/>2];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Point32<sp/>point;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>point.x<sp/>=<sp/>human[0];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>point.y<sp/>=<sp/>human[1];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>costmap_converter::ObstacleMsg<sp/>obstacle;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>obstacle.radius<sp/>=<sp/>0.07;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>obstacle.id<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>obstacle.polygon.points.push_back(point);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>obstacle.orientation<sp/>=<sp/>quaternion;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>obstacle.velocities.twist.linear.x<sp/>=<sp/>human[2];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>obstacle.velocities.twist.linear.y<sp/>=<sp/>human[3];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>obstacle_msg.obstacles.push_back(obstacle);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>Obstacle<sp/>msg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a4e199ca4b9861bab1ac8fa3827d7bc4e" kindref="member">pub_invis_human_</ref>.publish(obstacle_msg);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a7487ca072aafca927379e9814c28c17c" kindref="member">MapScanner::detectOccludedCorners</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent<sp/>&amp;event)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Robot<sp/>Pose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>geometry_msgs::TransformStamped<sp/>footprint_transform;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>base_frame<sp/>=<sp/><ref refid="invisible__humans__detection_8cpp_1a30d0bb104c2d03680e5eb1a59fd4c311" kindref="member">FOOTPRINT_FRAME</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classinvisible__humans__detection_1_1MapScanner_1afda176adc9dfaa2422f87d2b2981b7c7" kindref="member">ns_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_frame<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1afda176adc9dfaa2422f87d2b2981b7c7" kindref="member">ns_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="invisible__humans__detection_8cpp_1a30d0bb104c2d03680e5eb1a59fd4c311" kindref="member">FOOTPRINT_FRAME</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad5d2ce299b0488d0e7eb36d846c99427" kindref="member">scan_msg_</ref>.header.frame_id<sp/>=<sp/>base_frame;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>footprint_transform<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a35e76ba0e48cca53ac6793b912a8f69a" kindref="member">tf_</ref>.lookupTransform(<ref refid="invisible__humans__detection_8cpp_1ad7a65b9516782c43db8997a8eef5afb3" kindref="member">MAP_FRAME</ref>,<sp/>base_frame,<sp/>ros::Time(0),<sp/>ros::Duration(1.0));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(tf2::TransformException<sp/>&amp;ex)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ex.what());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.header<sp/>=<sp/>footprint_transform.header;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.x<sp/>=<sp/>footprint_transform.transform.translation.x;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.y<sp/>=<sp/>footprint_transform.transform.translation.y;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.z<sp/>=<sp/>footprint_transform.transform.translation.z;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.orientation<sp/>=<sp/>footprint_transform.transform.rotation;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>tf2::getYaw(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.orientation);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ang<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a2a40e548145d945ab6489a73193a4b39" kindref="member">angle_min_</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle_increment<sp/>=<sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1ac974e09631c7f28c21de1a07a90fa972" kindref="member">angle_max_</ref><sp/>-<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a2a40e548145d945ab6489a73193a4b39" kindref="member">angle_min_</ref>)<sp/>/<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a8ffd6cc6d7ebf854d12bb866458a6678" kindref="member">samples_</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab9cd8b04b6c881ecf0f98fc82276d97a" kindref="member">range_max_</ref><sp/>/<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab098835d6886f6de9f1cb599d867a498" kindref="member">scan_resolution_</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1e82d587c69a0be59c8e23d8869bfaa2" kindref="member">robot_vec_</ref><sp/>&lt;&lt;<sp/>cos(theta),<sp/>sin(theta);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>.resize(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a8ffd6cc6d7ebf854d12bb866458a6678" kindref="member">samples_</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>the<sp/>map<sp/>using<sp/>a<sp/>fake<sp/>laser<sp/>at<sp/>robot&apos;s<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a8ffd6cc6d7ebf854d12bb866458a6678" kindref="member">samples_</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.data.empty())<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ray<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a9c58837c64e34fe7afcc1b8ba8c48c22" kindref="member">range_min_</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>r_dir{(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a1e82d587c69a0be59c8e23d8869bfaa2" kindref="member">robot_vec_</ref>.x()<sp/>*<sp/>cos(ang))<sp/>-<sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a1e82d587c69a0be59c8e23d8869bfaa2" kindref="member">robot_vec_</ref>.y()<sp/>*<sp/>sin(ang)),<sp/>(+<ref refid="classinvisible__humans__detection_1_1MapScanner_1a1e82d587c69a0be59c8e23d8869bfaa2" kindref="member">robot_vec_</ref>.x()<sp/>*<sp/>sin(ang))<sp/>+<sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a1e82d587c69a0be59c8e23d8869bfaa2" kindref="member">robot_vec_</ref>.y()<sp/>*<sp/>cos(ang))};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[i]<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab9cd8b04b6c881ecf0f98fc82276d97a" kindref="member">range_max_</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab098835d6886f6de9f1cb599d867a498" kindref="member">scan_resolution_</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rx<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.x<sp/>+<sp/>(ray<sp/>*<sp/>r_dir.x());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ry<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.y<sp/>+<sp/>(ray<sp/>*<sp/>r_dir.y());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mx;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classinvisible__humans__detection_1_1MapScanner_1ac03cfd9ccf098da909697e29512c02c2" kindref="member">worldToMap</ref>(rx,<sp/>ry,<sp/>mx,<sp/>my))<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1adf0d1b7df374ce5fe3e3a4e42c51da51" kindref="member">getIndex</ref>(mx,<sp/>my);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.data[idx])<sp/>==<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[i]<sp/>=<sp/>ray;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ray<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>ang<sp/>+=<sp/>angle_increment;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>this<sp/>scan<sp/>if<sp/>requried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a5f0287b10ddfcd10c2aa119878878462" kindref="member">publish_scan_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ad5d2ce299b0488d0e7eb36d846c99427" kindref="member">scan_msg_</ref>.ranges<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a0c7ed15202d90ec590118d3f308bb84f" kindref="member">scan_pub_</ref>.publish(<ref refid="classinvisible__humans__detection_1_1MapScanner_1ad5d2ce299b0488d0e7eb36d846c99427" kindref="member">scan_msg_</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Corner<sp/>detection<sp/>part<sp/>starts<sp/>from<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="namespaceinvisible__humans__detection_1ae25a689c317c3768475551c8cd57fce6" kindref="member">Coordinates</ref><sp/>corner_set1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="namespaceinvisible__humans__detection_1ae25a689c317c3768475551c8cd57fce6" kindref="member">Coordinates</ref><sp/>corner_set2;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>std::vector&lt;char&gt;<sp/>dir;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>ang<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a2a40e548145d945ab6489a73193a4b39" kindref="member">angle_min_</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a8ffd6cc6d7ebf854d12bb866458a6678" kindref="member">samples_</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ang)<sp/>&lt;<sp/>M_PI<sp/>/<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_x<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[i]<sp/>*<sp/>cos(ang);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_y<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[i]<sp/>*<sp/>sin(ang);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>next_x<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[i<sp/>+<sp/>1]<sp/>*<sp/>cos(ang<sp/>+<sp/>angle_increment);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>next_y<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[i<sp/>+<sp/>1]<sp/>*<sp/>sin(ang<sp/>+<sp/>angle_increment);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Distance<sp/>and<sp/>range<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_dist<sp/>=<sp/>std::hypot(current_x,<sp/>current_y);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>next_dist<sp/>=<sp/>std::hypot(next_x,<sp/>next_y);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>std::hypot(next_x<sp/>-<sp/>current_x,<sp/>next_y<sp/>-<sp/>current_y);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>under_rad<sp/>=<sp/>std::min(current_dist,<sp/>next_dist);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Update<sp/>the<sp/>magic<sp/>numbers<sp/>here<sp/>--&gt;<sp/>make<sp/>them<sp/>parameters<sp/>or<sp/>fix<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>0.15<sp/>&amp;&amp;<sp/>under_rad<sp/>&lt;=<sp/>5.0<sp/>&amp;&amp;<sp/>(fabs(next_x<sp/>-<sp/>current_x)<sp/>&gt;=<sp/>0.5<sp/>||<sp/>fabs(next_y<sp/>-<sp/>current_y)<sp/>&gt;=<sp/>0.5))<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_dist<sp/>&lt;<sp/>next_dist)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner_set1.emplace_back(current_x,<sp/>current_y);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner_set2.emplace_back(next_x,<sp/>next_y);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.push_back(</highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner_set1.emplace_back(next_x,<sp/>next_y);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner_set2.emplace_back(current_x,<sp/>current_y);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.push_back(</highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1aee5345161c56788fa0098e634465d05b" kindref="member">corner_ranges_</ref>.push_back(i);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>ang<sp/>+=<sp/>angle_increment;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Locate<sp/>the<sp/>invisible<sp/>humans<sp/>using<sp/>the<sp/>detected<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1aef399ed829a281387d030b39ce5e8bcd" kindref="member">locateInvHumans</ref>(corner_set1,<sp/>corner_set2,<sp/>dir,<sp/>footprint_transform);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1aef399ed829a281387d030b39ce5e8bcd" kindref="member">MapScanner::locateInvHumans</ref>(<ref refid="namespaceinvisible__humans__detection_1ae25a689c317c3768475551c8cd57fce6" kindref="member">Coordinates</ref><sp/>c1,<sp/><ref refid="namespaceinvisible__humans__detection_1ae25a689c317c3768475551c8cd57fce6" kindref="member">Coordinates</ref><sp/>c2,<sp/>std::vector&lt;char&gt;<sp/>direction,<sp/>geometry_msgs::TransformStamped<sp/>&amp;footprint_transform)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>assert(c1.size()<sp/>==<sp/>c2.size());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_corners<sp/>=<sp/>c1.size();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle_increment<sp/>=<sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1ac974e09631c7f28c21de1a07a90fa972" kindref="member">angle_max_</ref><sp/>-<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a2a40e548145d945ab6489a73193a4b39" kindref="member">angle_min_</ref>)<sp/>/<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a8ffd6cc6d7ebf854d12bb866458a6678" kindref="member">samples_</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>std::vector&lt;Point&gt;<sp/>centers;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>inv_humans;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>geometry_msgs::PoseArray<sp/>corner_array;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>corner_array.header.stamp<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>corner_array.header.frame_id<sp/>=<sp/><ref refid="invisible__humans__detection_8cpp_1ad7a65b9516782c43db8997a8eef5afb3" kindref="member">MAP_FRAME</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>geometry_msgs::PoseArray<sp/>inv_array;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>inv_array.header.stamp<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>inv_array.header.frame_id<sp/>=<sp/><ref refid="invisible__humans__detection_8cpp_1ad7a65b9516782c43db8997a8eef5afb3" kindref="member">MAP_FRAME</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>visualization_msgs::MarkerArray<sp/>marker_array;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>tf2::Quaternion<sp/>q(footprint_transform.transform.rotation.x,<sp/>footprint_transform.transform.rotation.y,<sp/>footprint_transform.transform.rotation.z,<sp/>footprint_transform.transform.rotation.w);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>tf2::Vector3<sp/>p(footprint_transform.transform.translation.x,<sp/>footprint_transform.transform.translation.y,<sp/>footprint_transform.transform.translation.z);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>tf2::Transform<sp/>transform(q,<sp/>p);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>corners<sp/>to<sp/>find<sp/>the<sp/>invisible<sp/>humans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_corners<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_corners;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>two<sp/>vertices<sp/>of<sp/>the<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>c1[i].first;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>c1[i].second;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2<sp/>=<sp/>c2[i].first;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/>c2[i].second;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>unit<sp/>vector<sp/>of<sp/>two<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v_mag<sp/>=<sp/>std::hypot(x2<sp/>-<sp/>x1,<sp/>y2<sp/>-<sp/>y1);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ux<sp/>=<sp/>(x2<sp/>-<sp/>x1)<sp/>/<sp/>v_mag;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uy<sp/>=<sp/>(y2<sp/>-<sp/>y1)<sp/>/<sp/>v_mag;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>size<sp/>for<sp/>increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alp<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>variables<sp/>and<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref><sp/>center<sp/>=<sp/>{0.0,<sp/>0.0};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref><sp/>pt;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tf2::Vector3<sp/>in_pose_l;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tf2::Vector3<sp/>in_pose_r;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tf2::Vector3<sp/>in_pose_mid;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tf2::Vector3<sp/>robot_position;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>remove_detection<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>first<sp/>point<sp/>on<sp/>\vec(X1X2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xt<sp/>=<sp/>x1<sp/>+<sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a3fbe3e6c8d45d59dedb315d4ab6b6f6a" kindref="member">human_radius_</ref><sp/>*<sp/>ux);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yt<sp/>=<sp/>y1<sp/>+<sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a3fbe3e6c8d45d59dedb315d4ab6b6f6a" kindref="member">human_radius_</ref><sp/>*<sp/>uy);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>point<sp/>pt<sp/>depeding<sp/>on<sp/>the<sp/>direction<sp/>of<sp/>sequence<sp/>of<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a806c90ec44d3512f5458c8c2ee62adda" kindref="member">getRightPoint</ref>(<ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref>(x1,<sp/>y1),<sp/><ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref>(x2,<sp/>y2),<sp/><ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref>(xt,<sp/>yt),<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a3fbe3e6c8d45d59dedb315d4ab6b6f6a" kindref="member">human_radius_</ref>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a0c6024b6a09b868790d9cfb35f721996" kindref="member">getLeftPoint</ref>(<ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref>(x1,<sp/>y1),<sp/><ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref>(x2,<sp/>y2),<sp/><ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref>(xt,<sp/>yt),<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a3fbe3e6c8d45d59dedb315d4ab6b6f6a" kindref="member">human_radius_</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>angle<sp/>\beta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>atan2(pt.second,<sp/>pt.first);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>index<sp/>of<sp/>\beta<sp/>in<sp/>the<sp/>laser<sp/>ranges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ang_idx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((angle<sp/>-<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a2a40e548145d945ab6489a73193a4b39" kindref="member">angle_min_</ref>)<sp/>/<sp/>angle_increment);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>given<sp/>point<sp/>is<sp/>inside<sp/>or<sp/>outside<sp/>the<sp/>polygon;<sp/>continue<sp/>if<sp/>it<sp/>is<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[ang_idx]<sp/>&gt;<sp/>std::hypot(pt.first,<sp/>pt.second))<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>the<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xt<sp/>=<sp/>xt<sp/>+<sp/>alp<sp/>*<sp/>ux;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yt<sp/>=<sp/>yt<sp/>+<sp/>alp<sp/>*<sp/>uy;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center.first<sp/>=<sp/>(xt<sp/>+<sp/>pt.first)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center.second<sp/>=<sp/>(yt<sp/>+<sp/>pt.second)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overlap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_div<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ri<sp/>=<sp/>0;<sp/>ri<sp/>&lt;<sp/>n_div;<sp/>ri++)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>left<sp/>and<sp/>right<sp/>points<sp/>of<sp/>pt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a5c6d4fcb8467c18d49ef561f3e8d2d94" kindref="member">getTwoPoints</ref>(<ref refid="namespaceinvisible__humans__detection_1ac0e57bfc66ce6a431f5c889b6b1bd52c" kindref="member">Point</ref>(xt,<sp/>yt),<sp/>pt,<sp/>((ri<sp/>+<sp/>1)<sp/>/<sp/>n_div)<sp/>*<sp/>(1.5<sp/>*<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a3fbe3e6c8d45d59dedb315d4ab6b6f6a" kindref="member">human_radius_</ref>));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>do<sp/>the<sp/>transforms<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_pose_l<sp/>=<sp/>tf2::Vector3(points[0].first,<sp/>points[0].second,<sp/>0.0);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_pose_l<sp/>=<sp/>transform<sp/>*<sp/>in_pose_l;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_pose_r<sp/>=<sp/>tf2::Vector3(points[1].first,<sp/>points[1].second,<sp/>0.0);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_pose_r<sp/>=<sp/>transform<sp/>*<sp/>in_pose_r;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_pose_mid<sp/>=<sp/>tf2::Vector3(center.first,<sp/>center.second,<sp/>0.0);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_pose_mid<sp/>=<sp/>transform<sp/>*<sp/>in_pose_mid;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>robot_position<sp/>=<sp/>tf2::Vector3(0.,<sp/>0.,<sp/>0.);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>robot_position<sp/>=<sp/>transform<sp/>*<sp/>robot_position;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mx_l;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_l;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mx_r;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_r;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mx_c;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_c;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ac03cfd9ccf098da909697e29512c02c2" kindref="member">worldToMap</ref>(in_pose_l.x(),<sp/>in_pose_l.y(),<sp/>mx_l,<sp/>my_l);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ac03cfd9ccf098da909697e29512c02c2" kindref="member">worldToMap</ref>(in_pose_r.x(),<sp/>in_pose_r.y(),<sp/>mx_r,<sp/>my_r);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ac03cfd9ccf098da909697e29512c02c2" kindref="member">worldToMap</ref>(in_pose_mid.x(),<sp/>in_pose_mid.y(),<sp/>mx_c,<sp/>my_c);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_idx_l<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1adf0d1b7df374ce5fe3e3a4e42c51da51" kindref="member">getIndex</ref>(mx_l,<sp/>my_l);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_idx_r<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1adf0d1b7df374ce5fe3e3a4e42c51da51" kindref="member">getIndex</ref>(mx_r,<sp/>my_r);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_idx_c<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1adf0d1b7df374ce5fe3e3a4e42c51da51" kindref="member">getIndex</ref>(mx_c,<sp/>my_c);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>map_len<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.data.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>index<sp/>limits<sp/>of<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_idx_c<sp/>&gt;<sp/>map_len<sp/>||<sp/>m_idx_l<sp/>&gt;<sp/>map_len<sp/>||<sp/>m_idx_r<sp/>&gt;<sp/>map_len)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove_detection<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there<sp/>is<sp/>no<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.data[m_idx_l]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.data[m_idx_r]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a6eadf3ded7b8e0eb4c5b474e01c7556d" kindref="member">map_</ref>.data[m_idx_c]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>the<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xt<sp/>=<sp/>xt<sp/>+<sp/>alp<sp/>*<sp/>ux;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yt<sp/>=<sp/>yt<sp/>+<sp/>alp<sp/>*<sp/>uy;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Condition<sp/>to<sp/>reduce<sp/>false<sp/>detections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::hypot(xt<sp/>-<sp/>x1,<sp/>yt<sp/>-<sp/>y1)<sp/>&gt;=<sp/>std::hypot(x2<sp/>-<sp/>x1,<sp/>y2<sp/>-<sp/>y1)<sp/>||<sp/>std::hypot(xt,<sp/>yt)<sp/>&gt;=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1ab9cd8b04b6c881ecf0f98fc82276d97a" kindref="member">range_max_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove_detection<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>was<sp/>a<sp/>previous<sp/>overlap<sp/>continue<sp/>to<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlap)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>break<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>detection<sp/>was<sp/>flagged<sp/>to<sp/>remove,<sp/>continue<sp/>search<sp/>and<sp/>discard<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove_detection)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Point<sp/>p<sp/>=<sp/>{pt.first,<sp/>pt.second};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>centers.push_back(p);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>add<sp/>the<sp/>corners<sp/>and<sp/>invibsle<sp/>humans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>corner_position<sp/>=<sp/>tf2::Vector3(x1,<sp/>y1,<sp/>0.);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>corner_position<sp/>=<sp/>transform<sp/>*<sp/>corner_position;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::Pose<sp/>corner_pose;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>corner_pose.position.x<sp/>=<sp/>corner_position.x();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>corner_pose.position.y<sp/>=<sp/>corner_position.y();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>corner_pose.orientation.w<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>corner_array.poses.push_back(corner_pose);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel_ux<sp/>=<sp/>robot_position.x()<sp/>-<sp/>in_pose_mid.x();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel_uy<sp/>=<sp/>robot_position.y()<sp/>-<sp/>in_pose_mid.y();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vec_ang<sp/>=<sp/>atan2(vel_uy,<sp/>vel_ux);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>inv<sp/>human<sp/>info<sp/>for<sp/>obstacle<sp/>msg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>info<sp/>=<sp/>{in_pose_mid.x(),<sp/>in_pose_mid.y(),<sp/>1.5<sp/>*<sp/>cos(vec_ang),<sp/>1.5<sp/>*<sp/>sin(vec_ang)};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_humans.push_back(info);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>objects<sp/>to<sp/>publish<sp/>the<sp/>rviz<sp/>markers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>atan2(1.5<sp/>*<sp/>sin(vec_ang),<sp/>1.5<sp/>*<sp/>cos(vec_ang));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tf2::Quaternion<sp/>quaternion_tf2;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quaternion_tf2.setRPY(0.,<sp/>0.,<sp/>yaw);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::Quaternion<sp/>q<sp/>=<sp/>tf2::toMsg(quaternion_tf2);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::PoseStamped<sp/>inv_pose;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_pose.pose.position.x<sp/>=<sp/>in_pose_mid.x();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_pose.pose.position.y<sp/>=<sp/>in_pose_mid.y();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_pose.pose.orientation<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visualization_msgs::Marker<sp/>arrow;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.header.frame_id<sp/>=<sp/><ref refid="invisible__humans__detection_8cpp_1ad7a65b9516782c43db8997a8eef5afb3" kindref="member">MAP_FRAME</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.id<sp/>=<sp/>m_id;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.type<sp/>=<sp/>visualization_msgs::Marker::ARROW;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.action<sp/>=<sp/>visualization_msgs::Marker::ADD;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.pose.orientation<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.pose.position.x<sp/>=<sp/>in_pose_mid.x();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.pose.position.y<sp/>=<sp/>in_pose_mid.y();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.pose.position.z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.lifetime<sp/>=<sp/>ros::Duration(0.1);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.scale.x<sp/>=<sp/>0.6;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.scale.y<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.scale.z<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.color.a<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrow.color.b<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_id<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visualization_msgs::Marker<sp/>marker;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.header.frame_id<sp/>=<sp/><ref refid="invisible__humans__detection_8cpp_1ad7a65b9516782c43db8997a8eef5afb3" kindref="member">MAP_FRAME</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.id<sp/>=<sp/>m_id;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.type<sp/>=<sp/>visualization_msgs::Marker::CYLINDER;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.action<sp/>=<sp/>visualization_msgs::Marker::ADD;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.pose.orientation.w<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.pose.position.x<sp/>=<sp/>in_pose_mid.x();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.pose.position.y<sp/>=<sp/>in_pose_mid.y();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.pose.position.z<sp/>=<sp/>0.6;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.lifetime<sp/>=<sp/>ros::Duration(0.1);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.x<sp/>=<sp/>0.6;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.y<sp/>=<sp/>0.6;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.z<sp/>=<sp/>1.2;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.color.a<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.color.r<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_id<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker_array.markers.push_back(marker);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker_array.markers.push_back(arrow);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>the<sp/>markers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv_array.poses.push_back(inv_pose.pose);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a229ccc056a5aa864715bc808bff26991" kindref="member">pub_invis_human_viz_</ref>.publish(marker_array);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>all<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a95ca803c84523a6cc10b6cb527e48b42" kindref="member">publishInvisibleHumans</ref>(corner_array,<sp/>inv_array,<sp/>inv_humans);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>the<sp/>passages<sp/>using<sp/>these<sp/>estimates<sp/>for<sp/>inv<sp/>humans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a13a1c0ff5dd037b23b90ed9246a3ebaa" kindref="member">detectPassages</ref>(inv_array);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Check<sp/>this<sp/>method:<sp/>Make<sp/>it<sp/>configurable<sp/>to<sp/>different<sp/>envs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a13a1c0ff5dd037b23b90ed9246a3ebaa" kindref="member">MapScanner::detectPassages</ref>(geometry_msgs::PoseArray<sp/>detections)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>cohan_msgs::PassageType<sp/>psg_type;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>psg_type.type<sp/>=<sp/>cohan_msgs::PassageType::OPEN;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detections.poses.empty())<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;double,<sp/>int&gt;<sp/>dists;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>999;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid_scan<sp/>=<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[<ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>.size()<sp/>/<sp/>2];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>distances<sp/>and<sp/>indices<sp/>of<sp/>the<sp/>inv<sp/>humans<sp/>from<sp/>the<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pose<sp/>:<sp/>detections.poses)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>std::hypot(pose.position.x<sp/>-<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.x,<sp/>pose.position.y<sp/>-<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.y);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dists[dist]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Passage<sp/>detection<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inv1<sp/>=<sp/>dists.begin();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dists.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inv2<sp/>=<sp/>std::next(dists.begin(),<sp/>1);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seperation_dist<sp/>=</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::hypot(detections.poses[inv1-&gt;second].position.x<sp/>-<sp/>detections.poses[inv2-&gt;second].position.x,<sp/>detections.poses[inv1-&gt;second].position.y<sp/>-<sp/>detections.poses[inv2-&gt;second].position.y);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>mid_point((detections.poses[inv1-&gt;second].position.x<sp/>+<sp/>detections.poses[inv2-&gt;second].position.x)<sp/>/<sp/>2,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(detections.poses[inv1-&gt;second].position.y<sp/>+<sp/>detections.poses[inv2-&gt;second].position.y)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>robot_point(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.x,<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a66263d61dccd54e6f5a78657a11abb7d" kindref="member">robot_pose_</ref>.pose.position.y);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dectection_robot_dir<sp/>=<sp/>((robot_point<sp/>-<sp/>mid_point).dot(<ref refid="classinvisible__humans__detection_1_1MapScanner_1a1e82d587c69a0be59c8e23d8869bfaa2" kindref="member">robot_vec_</ref>))<sp/>/<sp/>(robot_point<sp/>-<sp/>mid_point).norm();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dectection_robot_dir<sp/>&lt;<sp/>-0.9)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Condition<sp/>for<sp/>door</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv1-&gt;first<sp/>&lt;<sp/>2.0<sp/>&amp;&amp;<sp/>abs(inv1-&gt;first<sp/>-<sp/>inv2-&gt;first)<sp/>&lt;<sp/>0.1<sp/>&amp;&amp;<sp/>seperation_dist<sp/>&lt;<sp/>3.0<sp/>&amp;&amp;<sp/>seperation_dist<sp/>&gt;<sp/>0.6)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid_scan<sp/>&gt;<sp/>1.33)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;It&apos;s<sp/>a<sp/>door&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psg_type.type<sp/>=<sp/>cohan_msgs::PassageType::DOOR;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>not<sp/>enough<sp/>space<sp/>to<sp/>enter,<sp/>it<sp/>might<sp/>be<sp/>a<sp/>pillar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>a<sp/>pillar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psg_type.type<sp/>=<sp/>cohan_msgs::PassageType::PILLAR;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Neither,<sp/>a<sp/>possible<sp/>passage<sp/>(No<sp/>need<sp/>to<sp/>switch<sp/>to<sp/>PASS<sp/>THROUGH<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;Possibility<sp/>of<sp/>door<sp/>or<sp/>narrow<sp/>junction<sp/>pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Condition<sp/>for<sp/>a<sp/>wall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv1-&gt;first<sp/>&lt;<sp/>2.0<sp/>&amp;&amp;<sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a1804fabbd161d9fed6b5e76081cef8e3" kindref="member">ranges_</ref>[<ref refid="classinvisible__humans__detection_1_1MapScanner_1aee5345161c56788fa0098e634465d05b" kindref="member">corner_ranges_</ref>[inv1-&gt;second]]<sp/>&lt;<sp/>3.0)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>a<sp/>wall&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psg_type.type<sp/>=<sp/>cohan_msgs::PassageType::WALL;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a91ed0a4ce202a288bac9694c11868b39" kindref="member">passage_detect_pub_</ref>.publish(psg_type);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner_1a91ed0a4ce202a288bac9694c11868b39" kindref="member">passage_detect_pub_</ref>.publish(psg_type);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>invisible_humans_detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(DOXYGEN_SHOULD_SKIP_THIS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ROS<sp/>node<sp/>for<sp/>invisible<sp/>humans<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;map_scanner_node&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><ref refid="classinvisible__humans__detection_1_1MapScanner" kindref="compound">invisible_humans_detection::MapScanner</ref><sp/>mp_scanner;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="invisible_humans_detection/src/invisible_humans_detection.cpp"/>
  </compounddef>
</doxygen>
