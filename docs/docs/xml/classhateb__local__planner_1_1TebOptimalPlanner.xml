<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhateb__local__planner_1_1TebOptimalPlanner" kind="class" language="C++" prot="public">
    <compoundname>hateb_local_planner::TebOptimalPlanner</compoundname>
    <basecompoundref refid="classhateb__local__planner_1_1PlannerInterface" prot="public" virt="non-virtual">hateb_local_planner::PlannerInterface</basecompoundref>
    <includes refid="optimal__planner_8h" local="no">optimal_planner.h</includes>
      <sectiondef kind="user-defined">
      <header>Hyper-Graph creation and optimization</header>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1aa42b22823a3d4b3c5f00040fe411652f" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classhateb__local__planner_1_1HATebConfig" kindref="compound">HATebConfig</ref> *</type>
        <definition>const HATebConfig* hateb_local_planner::TebOptimalPlanner::cfg_</definition>
        <argsstring></argsstring>
        <name>cfg_</name>
        <briefdescription>
<para>Config class that stores and manages all related parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="815" column="21" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1ad51a6e60f6fe04294738dc457c7da274" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" kindref="member">ObstContainer</ref> *</type>
        <definition>ObstContainer* hateb_local_planner::TebOptimalPlanner::obstacles_</definition>
        <argsstring></argsstring>
        <name>obstacles_</name>
        <briefdescription>
<para>Store obstacles that are relevant for planning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="816" column="17" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a9c7d7580f44b6fe694077bf37e746ac9" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref> *</type>
        <definition>const ViaPointContainer* hateb_local_planner::TebOptimalPlanner::via_points_</definition>
        <argsstring></argsstring>
        <name>via_points_</name>
        <briefdescription>
<para>Store via points for planning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="817" column="27" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1af44d6e2ddac97306ad0f182321451b0d" prot="protected" static="no" mutable="no">
        <type>const std::map&lt; uint64_t, <ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref> &gt; *</type>
        <definition>const std::map&lt;uint64_t, ViaPointContainer&gt;* hateb_local_planner::TebOptimalPlanner::agents_via_points_map_</definition>
        <argsstring></argsstring>
        <name>agents_via_points_map_</name>
        <briefdescription>
<para>Store via points for multiple agents, where each agent is identified by a unique ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="818" column="18" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a8142463fe70a9bff9e074c19c992848a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref></type>
        <definition>TebVisualizationPtr hateb_local_planner::TebOptimalPlanner::visualization_</definition>
        <argsstring></argsstring>
        <name>visualization_</name>
        <briefdescription>
<para>Instance of the visualization class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="821" column="23" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1ace92d0665c002c8621ec11ace0c47b24" prot="protected" static="no" mutable="no">
        <type><ref refid="classhateb__local__planner_1_1TimedElasticBand" kindref="compound">TimedElasticBand</ref></type>
        <definition>TimedElasticBand hateb_local_planner::TebOptimalPlanner::teb_</definition>
        <argsstring></argsstring>
        <name>teb_</name>
        <briefdescription>
<para>Actual trajectory object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="822" column="20" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a33d5e38ed7f95f0924fc607bac41756a" prot="protected" static="no" mutable="no">
        <type>std::map&lt; uint64_t, <ref refid="classhateb__local__planner_1_1TimedElasticBand" kindref="compound">TimedElasticBand</ref> &gt;</type>
        <definition>std::map&lt;uint64_t, TimedElasticBand&gt; hateb_local_planner::TebOptimalPlanner::agents_tebs_map_</definition>
        <argsstring></argsstring>
        <name>agents_tebs_map_</name>
        <briefdescription>
<para>Map of TEBs of agents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="823" column="12" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a52b08b9d6e873e779327d6a42fe00114" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacehateb__local__planner_1acb633f39a551ef9e0a25c9e1134ae491" kindref="member">FootprintModelPtr</ref></type>
        <definition>FootprintModelPtr hateb_local_planner::TebOptimalPlanner::robot_model_</definition>
        <argsstring></argsstring>
        <name>robot_model_</name>
        <briefdescription>
<para>Robot model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="824" column="21" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a952cbdd8979cc17fc7e98b9f180c404a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacehateb__local__planner_1a96f5d84de31cd8eeeffbbf5341bac099" kindref="member">CircularFootprintPtr</ref></type>
        <definition>CircularFootprintPtr hateb_local_planner::TebOptimalPlanner::agent_model_</definition>
        <argsstring></argsstring>
        <name>agent_model_</name>
        <briefdescription>
<para>Agent Footprint model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="825" column="24" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a64cf586227584f0c198e9472ed947124" prot="protected" static="no" mutable="no">
        <type>boost::shared_ptr&lt; g2o::SparseOptimizer &gt;</type>
        <definition>boost::shared_ptr&lt;g2o::SparseOptimizer&gt; hateb_local_planner::TebOptimalPlanner::optimizer_</definition>
        <argsstring></argsstring>
        <name>optimizer_</name>
        <briefdescription>
<para>g2o optimizer for trajectory optimization </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="826" column="21" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a4b07cf964d0d8364197e0081470213bb" prot="protected" static="no" mutable="no">
        <type>std::map&lt; uint64_t, std::pair&lt; bool, geometry_msgs::Twist &gt; &gt;</type>
        <definition>std::map&lt;uint64_t, std::pair&lt;bool, geometry_msgs::Twist&gt; &gt; hateb_local_planner::TebOptimalPlanner::agents_vel_start_</definition>
        <argsstring></argsstring>
        <name>agents_vel_start_</name>
        <briefdescription>
<para>Initial velocities for each agent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="828" column="12" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a117c3f2fffb806daef219d80f1937539" prot="protected" static="no" mutable="no">
        <type>std::map&lt; uint64_t, std::pair&lt; bool, geometry_msgs::Twist &gt; &gt;</type>
        <definition>std::map&lt;uint64_t, std::pair&lt;bool, geometry_msgs::Twist&gt; &gt; hateb_local_planner::TebOptimalPlanner::agents_vel_goal_</definition>
        <argsstring></argsstring>
        <name>agents_vel_goal_</name>
        <briefdescription>
<para>Goal velocities for each agent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="829" column="12" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1aa210497f3e6af552c4928d7c092620c5" prot="protected" static="no" mutable="no">
        <type>std::pair&lt; bool, geometry_msgs::Twist &gt;</type>
        <definition>std::pair&lt;bool, geometry_msgs::Twist&gt; hateb_local_planner::TebOptimalPlanner::vel_start_</definition>
        <argsstring></argsstring>
        <name>vel_start_</name>
        <briefdescription>
<para>Store the initial velocity at the start pose. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="830" column="13" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1ab2cd55c7ba11881ad5db9a2283b89934" prot="protected" static="no" mutable="no">
        <type>std::pair&lt; bool, geometry_msgs::Twist &gt;</type>
        <definition>std::pair&lt;bool, geometry_msgs::Twist&gt; hateb_local_planner::TebOptimalPlanner::vel_goal_</definition>
        <argsstring></argsstring>
        <name>vel_goal_</name>
        <briefdescription>
<para>Store the final velocity at the goal pose. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="831" column="13" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a09b5d2c3f6c651a1b6d9983d6c2d9e81" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; geometry_msgs::Pose &gt;</type>
        <definition>std::vector&lt;geometry_msgs::Pose&gt; hateb_local_planner::TebOptimalPlanner::static_agents_</definition>
        <argsstring></argsstring>
        <name>static_agents_</name>
        <briefdescription>
<para>Store poses of static agents in the environment that do not move but need consideration for visibility and safety. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="832" column="15" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1ab1e6b47afbdddd72f4a989d8b8354b08" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <briefdescription>
<para>Keeps track about the correct initialization of this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="833" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a4d9a257275f24978ca8e228ba515fbb2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::optimized_</definition>
        <argsstring></argsstring>
        <name>optimized_</name>
        <briefdescription>
<para>This variable is <computeroutput>true</computeroutput> as long as the last optimization has been completed successful. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="834" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1aea6400f6fb4a92f40bf9d643b76f2bcf" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double hateb_local_planner::TebOptimalPlanner::agent_radius_</definition>
        <argsstring></argsstring>
        <name>agent_radius_</name>
        <briefdescription>
<para>Radius of the circular footprint used for agent collision checking and safety distances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="835" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1abd20c5c60c6066d7ff1022dcf69dc8a9" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double hateb_local_planner::TebOptimalPlanner::robot_radius_</definition>
        <argsstring></argsstring>
        <name>robot_radius_</name>
        <briefdescription>
<para>Radius of the robot&apos;s circular footprint used for collision checking and safety calculations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="836" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1aed52b08f563713ce69eaac77023c6766" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int hateb_local_planner::TebOptimalPlanner::isMode_</definition>
        <argsstring></argsstring>
        <name>isMode_</name>
        <briefdescription>
<para>Planning Mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="837" column="7" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1ac91b322e1d8d1e39286b0be9f956ea51" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; hateb_local_planner::TebOptimalPlanner::agent_nominal_vels_</definition>
        <argsstring></argsstring>
        <name>agent_nominal_vels_</name>
        <briefdescription>
<para>Nominal agent velocities calculated using moving average filter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="838" column="15" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a7050b3136dd36dd78c46cf787cf1ee48" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double hateb_local_planner::TebOptimalPlanner::current_agent_robot_min_dist_</definition>
        <argsstring></argsstring>
        <name>current_agent_robot_min_dist_</name>
        <briefdescription>
<para>Controls addition of edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="839" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a7ba7a2159f87949c2d326a26928b52a0" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double hateb_local_planner::TebOptimalPlanner::cost_</definition>
        <argsstring></argsstring>
        <name>cost_</name>
        <briefdescription>
<para>Store cost value of the current hyper-graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="840" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhateb__local__planner_1_1TebOptimalPlanner_1a953a0e6660c94cac119eddc00d805db4" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacehateb__local__planner_1a463aa878b6972598ee87204519a60ba0" kindref="member">RotType</ref></type>
        <definition>RotType hateb_local_planner::TebOptimalPlanner::prefer_rotdir_</definition>
        <argsstring></argsstring>
        <name>prefer_rotdir_</name>
        <briefdescription>
<para>Store whether to prefer a specific initial rotation in optimization (might be activated in case the robot oscillates) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="841" column="11" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::buildGraph</definition>
        <argsstring>(double weight_multiplier=1.0)</argsstring>
        <name>buildGraph</name>
        <param>
          <type>double</type>
          <declname>weight_multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Build the hyper-graph representing the TEB optimization problem. </para>
        </briefdescription>
        <detaileddescription>
<para>This method creates the optimization problem according to the hyper-graph formulation. <linebreak/>
For more details refer to the literature cited in the <ref refid="classhateb__local__planner_1_1TebOptimalPlanner" kindref="compound">TebOptimalPlanner</ref> class description. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ad30a68e2dcf7ae8f2246cb4e83212189" kindref="member">clearGraph</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weight_multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify a weight multipler for selected weights in optimizeGraph This might be used for weight adapation strategies. Currently, only obstacle collision weights are considered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the graph was created successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="532" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="493" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::optimizeGraph</definition>
        <argsstring>(int no_iterations, bool clear_after=true)</argsstring>
        <name>optimizeGraph</name>
        <param>
          <type>int</type>
          <declname>no_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clear_after</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Optimize the previously constructed hyper-graph to deform / optimize the TEB. </para>
        </briefdescription>
        <detaileddescription>
<para>This method invokes the g2o framework to solve the optimization problem considering dedicated sparsity patterns. <linebreak/>
The current implementation calls a non-constrained sparse Levenberg-Marquardt algorithm. Constraints are considered by utilizing penalty approximations. Refer to the literature cited in the <ref refid="classhateb__local__planner_1_1TebOptimalPlanner" kindref="compound">TebOptimalPlanner</ref> class description. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ad30a68e2dcf7ae8f2246cb4e83212189" kindref="member">clearGraph</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>no_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of solver iterations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_after</parametername>
</parameternamelist>
<parameterdescription>
<para>Clear the graph after optimization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if optimization terminates successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="546" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="575" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ad30a68e2dcf7ae8f2246cb4e83212189" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::clearGraph</definition>
        <argsstring>()</argsstring>
        <name>clearGraph</name>
        <briefdescription>
<para>Clear an existing internal hyper-graph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="553" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="614" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1abb871a3666c6c162bf13826912d6c682" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddTEBVertices</definition>
        <argsstring>()</argsstring>
        <name>AddTEBVertices</name>
        <briefdescription>
<para>Add all relevant vertices to the hyper-graph as optimizable variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Vertices (if unfixed) represent the variables that will be optimized. <linebreak/>
In case of the Timed-Elastic-Band poses and time differences form the vertices of the hyper-graph. <linebreak/>
The order of insertion of vertices (to the graph) is important for efficiency, since it affect the sparsity pattern of the underlying hessian computed for optimization. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1VertexPose" kindref="compound">VertexPose</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1VertexTimeDiff" kindref="compound">VertexTimeDiff</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="567" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="628" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a9e66de71f2e136a715296dda5286fa92" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesVelocity</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesVelocity</name>
        <briefdescription>
<para>Add all edges (local cost functions) for limiting the translational and angular velocity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeVelocity" kindref="compound">EdgeVelocity</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="575" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1092" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a7bd944f8d39cb4e2bef171c9e1276f34" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesVelocityForAgents</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesVelocityForAgents</name>
        <briefdescription>
<para>Add all edges (local cost functions) for limiting the translational and angular velocity for agents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeVelocity" kindref="compound">EdgeVelocity</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="583" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1140" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ae56d9d6b2080734e948b9e7d21af8551" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesAcceleration</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesAcceleration</name>
        <briefdescription>
<para>Add all edges (local cost functions) for limiting the translational and angular acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAcceleration" kindref="compound">EdgeAcceleration</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAccelerationStart" kindref="compound">EdgeAccelerationStart</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAccelerationGoal" kindref="compound">EdgeAccelerationGoal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="593" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1201" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a2310b1e815a2cc8c400c231fda34c659" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesAccelerationForAgents</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesAccelerationForAgents</name>
        <briefdescription>
<para>Add all edges (local cost functions) for limiting the translational and angular acceleration for agents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAcceleration" kindref="compound">EdgeAcceleration</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAccelerationStart" kindref="compound">EdgeAccelerationStart</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAccelerationGoal" kindref="compound">EdgeAccelerationGoal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="603" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1298" bodyend="1401"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a2ec83c6e8e9459b7d0fb9daf764888c4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesTimeOptimal</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesTimeOptimal</name>
        <briefdescription>
<para>Add all edges (local cost functions) for minimizing the transition time (resp. minimize time differences) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeTimeOptimal" kindref="compound">EdgeTimeOptimal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="611" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1403" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a4b06134de8d274a75dcd582e7d4220f1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesTimeOptimalForAgents</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesTimeOptimalForAgents</name>
        <briefdescription>
<para>Add all edges (local cost functions) for minimizing the transition time (resp. minimize time differences) for agents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeTimeOptimal" kindref="compound">EdgeTimeOptimal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="619" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1420" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a81df95911b309937169f8a58d2cdc01e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesShortestPath</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesShortestPath</name>
        <briefdescription>
<para>Add all edges (local cost functions) for minimizing the path length. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeShortestPath" kindref="compound">EdgeShortestPath</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="627" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1442" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1aa3343a30796dd331151e617584c62e50" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesObstacles</definition>
        <argsstring>(double weight_multiplier=1.0)</argsstring>
        <name>AddEdgesObstacles</name>
        <param>
          <type>double</type>
          <declname>weight_multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Add all edges (local cost functions) related to keeping a distance from static obstacles. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>do not combine with AddEdgesInflatedObstacles </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeObstacle" kindref="compound">EdgeObstacle</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weight_multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify an additional weight multipler (in addition to the the config weight) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="637" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="663" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ac7ce3bd03cf3cc29a1b9f4a21963a89f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesObstaclesLegacy</definition>
        <argsstring>(double weight_multiplier=1.0)</argsstring>
        <name>AddEdgesObstaclesLegacy</name>
        <param>
          <type>double</type>
          <declname>weight_multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Add all edges (local cost functions) related to keeping a distance from static obstacles (legacy association strategy) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>do not combine with AddEdgesInflatedObstacles </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeObstacle" kindref="compound">EdgeObstacle</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weight_multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify an additional weight multipler (in addition to the the config weight) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="647" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="776" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ac1983bbafe462e79f30786632cd034c1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesObstaclesForAgents</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesObstaclesForAgents</name>
        <briefdescription>
<para>Add edges to the graph to maintain distance between agents and static obstacles. </para>
        </briefdescription>
        <detaileddescription>
<para>This method adds edges (cost functions) that help maintain safe distances between each agent and static obstacles in the environment. Similar to <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1aa3343a30796dd331151e617584c62e50" kindref="member">AddEdgesObstacles()</ref> but specifically handles the agent trajectories from the agents_tebs_map_. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeObstacle" kindref="compound">EdgeObstacle</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="659" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="863" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a69bb902b27e36c8b28c4dbc6c9fd4009" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesViaPoints</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesViaPoints</name>
        <briefdescription>
<para>Add all edges (local cost functions) related to minimizing the distance to via-points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeViaPoint" kindref="compound">EdgeViaPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="667" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1005" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1abbcab2e75f41d0da7bcaf3144e0dea90" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesViaPointsForAgents</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesViaPointsForAgents</name>
        <briefdescription>
<para>Add all edges (local cost functions) related to minimizing the distance to via-points for agents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeViaPoint" kindref="compound">EdgeViaPoint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="675" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1049" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a1e2de6f5b024cadd4ea0ba7e65ab6fb6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesDynamicObstacles</definition>
        <argsstring>(double weight_multiplier=1.0)</argsstring>
        <name>AddEdgesDynamicObstacles</name>
        <param>
          <type>double</type>
          <declname>weight_multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Add all edges (local cost functions) related to keeping a distance from dynamic (moving) obstacles. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeDynamicObstacle" kindref="compound">EdgeDynamicObstacle</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weight_multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify an additional weight multipler (in addition to the the config weight) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="684" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="918" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a78ddfdcb28ed218af26b8c43c3c38fed" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesDynamicObstaclesForAgents</definition>
        <argsstring>(double weight_multiplier=1.0)</argsstring>
        <name>AddEdgesDynamicObstaclesForAgents</name>
        <param>
          <type>double</type>
          <declname>weight_multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Add all edges (local cost functions) related to keeping a distance from dynamic (moving) obstacles in case of humans. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeDynamicObstacle" kindref="compound">EdgeDynamicObstacle</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weight_multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify an additional weight multipler (in addition to the the config weight) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="693" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="975" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1afd4450aa795e5f89c0efbc59294217f0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesInvisibleHumans</definition>
        <argsstring>(double weight_multiplier=1.0)</argsstring>
        <name>AddEdgesInvisibleHumans</name>
        <param>
          <type>double</type>
          <declname>weight_multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Add edges to consider invisible humans in trajectory optimization. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds cost function edges to handle regions where humans might be present but not directly visible to the robot&apos;s sensors. This helps create safer trajectories in areas with potential occlusions or blind spots. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeInvisibleHuman" kindref="compound">EdgeInvisibleHuman</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weight_multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for the invisible human cost weights </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="706" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="946" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ab044b20d3bbcb9c95abed920bfbf6cfe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesStaticAgentVisibility</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesStaticAgentVisibility</name>
        <briefdescription>
<para>Add edges to consider visibility constraints for static agents. Penelizes robot for entering a human fov from behind and very closely. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeStaticAgentVisibility" kindref="compound">EdgeStaticAgentVisibility</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="715" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1680" bodyend="1698"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a4d5d01b4db85b827e4c719e014ed60ce" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesKinematicsDiffDrive</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesKinematicsDiffDrive</name>
        <briefdescription>
<para>Add all edges (local cost functions) for satisfying kinematic constraints of a differential drive robot. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>do not combine with <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a9959ed52d6b8f4066e86fc9f16791b41" kindref="member">AddEdgesKinematicsCarlike()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a9959ed52d6b8f4066e86fc9f16791b41" kindref="member">AddEdgesKinematicsCarlike</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="724" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1460" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a8edc5b0029aa28739803bd9127bd8e87" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesKinematicsDiffDriveForAgents</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesKinematicsDiffDriveForAgents</name>
        <briefdescription>
<para>Add all edges (local cost functions) for satisfying kinematic constraints of a differential drive agents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>do not combine with <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a9959ed52d6b8f4066e86fc9f16791b41" kindref="member">AddEdgesKinematicsCarlike()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a9959ed52d6b8f4066e86fc9f16791b41" kindref="member">AddEdgesKinematicsCarlike</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="733" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1482" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a9959ed52d6b8f4066e86fc9f16791b41" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesKinematicsCarlike</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesKinematicsCarlike</name>
        <briefdescription>
<para>Add all edges (local cost functions) for satisfying kinematic constraints of a carlike robot. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>do not combine with <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4d5d01b4db85b827e4c719e014ed60ce" kindref="member">AddEdgesKinematicsDiffDrive()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4d5d01b4db85b827e4c719e014ed60ce" kindref="member">AddEdgesKinematicsDiffDrive</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="742" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1506" bodyend="1526"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a8ade0d2d1bdc5274ba3e5b2e48e167e7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesKinematicsCarlikeForAgents</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesKinematicsCarlikeForAgents</name>
        <briefdescription>
<para>Add all edges (local cost functions) for satisfying kinematic constraints of a carlike agent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>do not combine with <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4d5d01b4db85b827e4c719e014ed60ce" kindref="member">AddEdgesKinematicsDiffDrive()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4d5d01b4db85b827e4c719e014ed60ce" kindref="member">AddEdgesKinematicsDiffDrive</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="751" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1528" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a17cd71f01a09b38e3d7b5a5ea2bd91d2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesPreferRotDir</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesPreferRotDir</name>
        <briefdescription>
<para>Add all edges (local cost functions) for prefering a specifiy turning direction (by penalizing the other one) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="757" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1553" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a49d2bfe46aa01efaa91131effd1fb578" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesAgentRobotSafety</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesAgentRobotSafety</name>
        <briefdescription>
<para>Add edges to maintain safety distance between agents and robot. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds cost function edges that ensure a minimum safety distance is maintained between the robot and all agents during trajectory optimization. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAgentRobotSafety" kindref="compound">EdgeAgentRobotSafety</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="768" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1595" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1abf991d67b7c8c6c637e4ab4411e6ac78" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesAgentAgentSafety</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesAgentAgentSafety</name>
        <briefdescription>
<para>Add edges to maintain safety distances between different agents. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds cost function edges that ensure minimum safety distances are maintained between different agents during trajectory optimization to avoid inter-agent collisions. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAgentAgentSafety" kindref="compound">EdgeAgentAgentSafety</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="779" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1616" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a8ffc5ca6ebfffd7f194b722ce6403c55" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesAgentRobotRelVelocity</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesAgentRobotRelVelocity</name>
        <briefdescription>
<para>Add edges to control relative velocities between agents and robot. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds cost function edges that help the robot to exploit the existing space and robot&apos;s velocity to increase human comfort. This makes the robot reduce its velocity in constrained spaces and move farther away with maximum velocity in open spaces. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAgentRobotRelVelocity" kindref="compound">EdgeAgentRobotRelVelocity</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="792" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1636" bodyend="1658"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ace57ea9d0185fc851db21cdf4bd2c14c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::AddEdgesAgentRobotVisibility</definition>
        <argsstring>()</argsstring>
        <name>AddEdgesAgentRobotVisibility</name>
        <briefdescription>
<para>Add edges to maintain visibility constraints between agents and robot. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds cost function edges that encourage the robot to enter the human&apos;s FOV at an appropriate angle and distance, helping ensure that agents (especially humans) can see and predict the robot&apos;s movements. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1EdgeAgentRobotVisibility" kindref="compound">EdgeAgentRobotVisibility</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" kindref="member">buildGraph</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="804" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1660" bodyend="1678"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a9aa2ce0ddb8fef62607def2381356383" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::shared_ptr&lt; g2o::SparseOptimizer &gt;</type>
        <definition>boost::shared_ptr&lt; g2o::SparseOptimizer &gt; hateb_local_planner::TebOptimalPlanner::initOptimizer</definition>
        <argsstring>()</argsstring>
        <name>initOptimizer</name>
        <briefdescription>
<para>Initialize and configure the g2o sparse optimizer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>shared pointer to the g2o::SparseOptimizer instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="812" column="28" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="178" bodyend="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Plan a trajectory  &lt;br&gt;</header>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a72af0ce6cd3dcfd1d24e035febe32d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::plan</definition>
        <argsstring>(const std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;initial_plan, const geometry_msgs::Twist *start_vel=nullptr, bool free_goal_vel=false, const AgentPlanVelMap *initial_agent_plan_vel_map=nullptr, hateb_local_planner::OptimizationCostArray *op_costs=nullptr, double dt_ref=0.4, double dt_hyst=0.1, int Mode=0) override</argsstring>
        <name>plan</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1a1ee40214ccd1ff016a792ee80d0469ef">plan</reimplements>
        <param>
          <type>const std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>initial_plan</declname>
        </param>
        <param>
          <type>const geometry_msgs::Twist *</type>
          <declname>start_vel</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>free_goal_vel</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespacehateb__local__planner_1a3b4752a48696bcc63570d62786fb9736" kindref="member">AgentPlanVelMap</ref> *</type>
          <declname>initial_agent_plan_vel_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>hateb_local_planner::OptimizationCostArray *</type>
          <declname>op_costs</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dt_ref</declname>
          <defval>0.4</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dt_hyst</declname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>Mode</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Plan a trajectory based on an initial reference plan. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this method to create and optimize a trajectory that is initialized according to an initial reference plan (given as a container of poses). <linebreak/>
The method supports hot-starting from previous solutions, if avaiable: <linebreak/>
<itemizedlist>
<listitem><para>If no trajectory exist yet, a new trajectory is initialized based on the initial plan, see <ref refid="classhateb__local__planner_1_1TimedElasticBand_1a90e4e78ffbbaab507e418faa2bb87a80" kindref="member">TimedElasticBand::initTEBtoGoal</ref></para>
</listitem><listitem><para>If a previous solution is avaiable, update the trajectory based on the initial plan, see bool <ref refid="classhateb__local__planner_1_1TimedElasticBand_1aca5d7bbd67a53062d95690efdd76056e" kindref="member">TimedElasticBand::updateAndPruneTEB</ref></para>
</listitem><listitem><para>Afterwards optimize the recently initialized or updated trajectory by calling <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8da0bf1d43d59b6e1225687c24bc873b" kindref="member">optimizeTEB()</ref> and invoking g2o <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initial_plan</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of geometry_msgs::PoseStamped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>Current start velocity (e.g. the velocity of the robot, only linear.x, linear.y (holonomic) and angular.z are used) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_goal_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, a nonzero final velocity at the goal pose is allowed, otherwise the final velocity will be zero (default: false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if planning was successful, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="165" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="258" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ad8526644ac8d76a91afd3909bfad3a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::plan</definition>
        <argsstring>(const tf::Pose &amp;start, const tf::Pose &amp;goal, const geometry_msgs::Twist *start_vel=nullptr, bool free_goal_vel=false, hateb_local_planner::OptimizationCostArray *op_costs=nullptr, double dt_ref=0.4, double dt_hyst=0.1, int Mode=0) override</argsstring>
        <name>plan</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1aa5585acd9d1bf0e6843123ea84b58a40">plan</reimplements>
        <param>
          <type>const tf::Pose &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const tf::Pose &amp;</type>
          <declname>goal</declname>
        </param>
        <param>
          <type>const geometry_msgs::Twist *</type>
          <declname>start_vel</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>free_goal_vel</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>hateb_local_planner::OptimizationCostArray *</type>
          <declname>op_costs</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dt_ref</declname>
          <defval>0.4</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dt_hyst</declname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>Mode</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Plan a trajectory between a given start and goal pose (tf::Pose version) </para>
        </briefdescription>
        <detaileddescription>
<para>Call this method to create and optimize a trajectory that is initialized between a given start and goal pose. <linebreak/>
The method supports hot-starting from previous solutions, if avaiable: <linebreak/>
<itemizedlist>
<listitem><para>If no trajectory exist yet, a new trajectory is initialized between start and goal poses, see <ref refid="classhateb__local__planner_1_1TimedElasticBand_1a90e4e78ffbbaab507e418faa2bb87a80" kindref="member">TimedElasticBand::initTEBtoGoal</ref></para>
</listitem><listitem><para>If a previous solution is avaiable, update the trajectory <simplesect kind="see"><para>bool <ref refid="classhateb__local__planner_1_1TimedElasticBand_1aca5d7bbd67a53062d95690efdd76056e" kindref="member">TimedElasticBand::updateAndPruneTEB</ref></para>
</simplesect>
</para>
</listitem><listitem><para>Afterwards optimize the recently initialized or updated trajectory by calling <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8da0bf1d43d59b6e1225687c24bc873b" kindref="member">optimizeTEB()</ref> and invoking g2o <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>tf::Pose containing the start pose of the trajectory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>tf::Pose containing the goal pose of the trajectory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>Current start velocity (e.g. the velocity of the robot, only linear.x, linear.y (holonomic) and angular.z are used) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_goal_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, a nonzero final velocity at the goal pose is allowed, otherwise the final velocity will be zero (default: false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if planning was successful, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="185" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="426" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1af54b613fc63f7386338911ebc988e453" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::plan</definition>
        <argsstring>(const PoseSE2 &amp;start, const PoseSE2 &amp;goal, const geometry_msgs::Twist *start_vel=nullptr, bool free_goal_vel=false, double pre_plan_time=0.0, hateb_local_planner::OptimizationCostArray *op_costs=nullptr, double dt_ref=0.4, double dt_hyst=0.1, int Mode=0) override</argsstring>
        <name>plan</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1a387497f9fae389811ff721429b28d3f5">plan</reimplements>
        <param>
          <type>const <ref refid="classhateb__local__planner_1_1PoseSE2" kindref="compound">PoseSE2</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classhateb__local__planner_1_1PoseSE2" kindref="compound">PoseSE2</ref> &amp;</type>
          <declname>goal</declname>
        </param>
        <param>
          <type>const geometry_msgs::Twist *</type>
          <declname>start_vel</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>free_goal_vel</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>pre_plan_time</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>hateb_local_planner::OptimizationCostArray *</type>
          <declname>op_costs</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dt_ref</declname>
          <defval>0.4</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dt_hyst</declname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>Mode</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Plan a trajectory between a given start and goal pose. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this method to create and optimize a trajectory that is initialized between a given start and goal pose. <linebreak/>
The method supports hot-starting from previous solutions, if avaiable: <linebreak/>
<itemizedlist>
<listitem><para>If no trajectory exist yet, a new trajectory is initialized between start and goal poses <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a90e4e78ffbbaab507e418faa2bb87a80" kindref="member">TimedElasticBand::initTEBtoGoal</ref></para>
</simplesect>
</para>
</listitem><listitem><para>If a previous solution is avaiable, update the trajectory <simplesect kind="see"><para>bool <ref refid="classhateb__local__planner_1_1TimedElasticBand_1aca5d7bbd67a53062d95690efdd76056e" kindref="member">TimedElasticBand::updateAndPruneTEB</ref></para>
</simplesect>
</para>
</listitem><listitem><para>Afterwards optimize the recently initialized or updated trajectory by calling <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8da0bf1d43d59b6e1225687c24bc873b" kindref="member">optimizeTEB()</ref> and invoking g2o <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhateb__local__planner_1_1PoseSE2" kindref="compound">PoseSE2</ref> containing the start pose of the trajectory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhateb__local__planner_1_1PoseSE2" kindref="compound">PoseSE2</ref> containing the goal pose of the trajectory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial velocity at the start pose (twist message containing the translational and angular velocity). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_goal_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, a nonzero final velocity at the goal pose is allowed, otherwise the final velocity will be zero (default: false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if planning was successful, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="204" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="438" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a005e0f7192ea5ebb6b74f3ef2c933fb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::getVelocityCommand</definition>
        <argsstring>(double &amp;vx, double &amp;vy, double &amp;omega, int look_ahead_poses, double dt_ref) const override</argsstring>
        <name>getVelocityCommand</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1a358434cc932aef04ef5c058de6e9932d">getVelocityCommand</reimplements>
        <param>
          <type>double &amp;</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>omega</declname>
        </param>
        <param>
          <type>int</type>
          <declname>look_ahead_poses</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt_ref</declname>
        </param>
        <briefdescription>
<para>Get the velocity command from a previously optimized plan to control the robot at the current sampling interval. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Call <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a72af0ce6cd3dcfd1d24e035febe32d25" kindref="member">plan()</ref> first and check if the generated plan is feasible. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">vx</parametername>
</parameternamelist>
<parameterdescription>
<para>translational velocity [m/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">vy</parametername>
</parameternamelist>
<parameterdescription>
<para>strafing velocity which can be nonzero for holonomic robots[m/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">omega</parametername>
</parameternamelist>
<parameterdescription>
<para>rotational velocity [rad/s] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if command is valid, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="215" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1784" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a8da0bf1d43d59b6e1225687c24bc873b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::optimizeTEB</definition>
        <argsstring>(int iterations_innerloop, int iterations_outerloop, bool compute_cost_afterwards=true, double obst_cost_scale=1.0, double viapoint_cost_scale=1.0, bool alternative_time_cost=false, hateb_local_planner::OptimizationCostArray *op_costs=nullptr, double dt_ref=0.4, double dt_hyst=0.1)</argsstring>
        <name>optimizeTEB</name>
        <param>
          <type>int</type>
          <declname>iterations_innerloop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations_outerloop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compute_cost_afterwards</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>double</type>
          <declname>obst_cost_scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>viapoint_cost_scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alternative_time_cost</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>hateb_local_planner::OptimizationCostArray *</type>
          <declname>op_costs</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dt_ref</declname>
          <defval>0.4</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dt_hyst</declname>
          <defval>0.1</defval>
        </param>
        <briefdescription>
<para>Optimize a previously initialized trajectory (actual TEB optimization loop). </para>
        </briefdescription>
        <detaileddescription>
<para>optimizeTEB implements the main optimization loop. <linebreak/>
It consist of two nested loops:<itemizedlist>
<listitem><para>The outer loop resizes the trajectory according to the temporal resolution by invoking <ref refid="classhateb__local__planner_1_1TimedElasticBand_1a3576adcaec45103edd7e1d0da6b97a7b" kindref="member">TimedElasticBand::autoResize()</ref>. Afterwards the internal method <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" kindref="member">optimizeGraph()</ref> is called that constitutes the innerloop.</para>
</listitem><listitem><para>The inner loop calls the solver (g2o framework, resp. sparse Levenberg-Marquardt) and iterates a specified number of optimization calls (<computeroutput>iterations_innerloop</computeroutput>).</para>
</listitem></itemizedlist>
</para>
<para>The outer loop is repeated <computeroutput>iterations_outerloop</computeroutput> times. <linebreak/>
The ratio of inner and outer loop iterations significantly defines the contraction behavior and convergence rate of the trajectory optimization. Based on our experiences, 2-6 innerloop iterations are sufficient. <linebreak/>
The number of outer loop iterations should be determined by considering the maximum CPU time required to match the control rate. <linebreak/>
Optionally, the cost vector can be calculated by specifying <computeroutput>compute_cost_afterwards</computeroutput>, see <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1aa55295bf6fe8b04a4bda0575d1babe6f" kindref="member">computeCurrentCost()</ref>. <simplesect kind="remark"><para>This method is usually called from a <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a72af0ce6cd3dcfd1d24e035febe32d25" kindref="member">plan()</ref> method </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterations_innerloop</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations for the actual solver loop </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations_outerloop</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how often the trajectory should be resized followed by the inner solver loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compute_cost_afterwards</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput> Calculate the cost vector according to <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1aa55295bf6fe8b04a4bda0575d1babe6f" kindref="member">computeCurrentCost()</ref>, the vector can be accessed afterwards using <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a967863b8064782d23e3e78f4714243dd" kindref="member">getCurrentCost()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obst_cost_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify extra scaling for obstacle costs (only used if <computeroutput>compute_cost_afterwards</computeroutput> is true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viapoint_cost_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify extra scaling for via-point costs (only used if <computeroutput>compute_cost_afterwards</computeroutput> is true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternative_time_cost</parametername>
</parameternamelist>
<parameterdescription>
<para>Replace the cost for the time optimal objective by the actual (weighted) transition time (only used if <computeroutput>compute_cost_afterwards</computeroutput> is true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the optimization terminates successfully, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="244" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="205" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a852d1bc329c4098614c268da81ddb85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::optimizeTEB</definition>
        <argsstring>(int iterations_innerloop, int iterations_outerloop, bool compute_cost_afterwards=true, double obst_cost_scale=1.0, double viapoint_cost_scale=1.0, bool alternative_time_cost=false, hateb_local_planner::OptimizationCostArray *op_costs=nullptr)</argsstring>
        <name>optimizeTEB</name>
        <param>
          <type>int</type>
          <declname>iterations_innerloop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations_outerloop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compute_cost_afterwards</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>double</type>
          <declname>obst_cost_scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>viapoint_cost_scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alternative_time_cost</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>hateb_local_planner::OptimizationCostArray *</type>
          <declname>op_costs</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="247" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="198" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Desired initial and final velocity</header>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1aabb3685f9bdc42bac14d98caad532b3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::setVelocityStart</definition>
        <argsstring>(const geometry_msgs::Twist &amp;vel_start)</argsstring>
        <name>setVelocityStart</name>
        <param>
          <type>const geometry_msgs::Twist &amp;</type>
          <declname>vel_start</declname>
        </param>
        <briefdescription>
<para>Set the initial velocity at the trajectory&apos;s start pose (e.g. the robot&apos;s velocity) [twist overload]. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Calling this function is not neccessary if the initial velocity is passed via the <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a72af0ce6cd3dcfd1d24e035febe32d25" kindref="member">plan()</ref> method </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vel_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Current start velocity (e.g. the velocity of the robot, only linear.x and angular.z are used, for holonomic robots also linear.y) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="261" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="246" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a255f3d596ec6dc4ee5ce86f65eb65520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::setVelocityGoal</definition>
        <argsstring>(const geometry_msgs::Twist &amp;vel_goal)</argsstring>
        <name>setVelocityGoal</name>
        <param>
          <type>const geometry_msgs::Twist &amp;</type>
          <declname>vel_goal</declname>
        </param>
        <briefdescription>
<para>Set the desired final velocity at the trajectory&apos;s goal pose. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Call this function only if a non-zero velocity is desired and if <computeroutput>free_goal_vel</computeroutput> is set to <computeroutput>false</computeroutput> in <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a72af0ce6cd3dcfd1d24e035febe32d25" kindref="member">plan()</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vel_goal</parametername>
</parameternamelist>
<parameterdescription>
<para>twist message containing the translational and angular final velocity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="268" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ac5504eee9026e2000c0f85ddacc3f4d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::setVelocityGoalFree</definition>
        <argsstring>()</argsstring>
        <name>setVelocityGoalFree</name>
        <briefdescription>
<para>Set the desired final velocity at the trajectory&apos;s goal pose to be the maximum velocity limit. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Calling this function is not neccessary if <computeroutput>free_goal_vel</computeroutput> is set to <computeroutput>false</computeroutput> in <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a72af0ce6cd3dcfd1d24e035febe32d25" kindref="member">plan()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="274" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="274" bodyend="274"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Take obstacles into account</header>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a3cc45673b854d1958597dc499577afc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::setObstVector</definition>
        <argsstring>(ObstContainer *obst_vector)</argsstring>
        <name>setObstVector</name>
        <param>
          <type><ref refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" kindref="member">ObstContainer</ref> *</type>
          <declname>obst_vector</declname>
        </param>
        <briefdescription>
<para>Assign a new set of obstacles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obst_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an obstacle container (can also be a nullptr) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This method overrids the obstacle container optinally assigned in the constructor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="286" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="286" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1af0d499cf5cdfe8dc3a0c7c8ab8fbc128" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" kindref="member">ObstContainer</ref> &amp;</type>
        <definition>const ObstContainer&amp; hateb_local_planner::TebOptimalPlanner::getObstVector</definition>
        <argsstring>() const</argsstring>
        <name>getObstVector</name>
        <briefdescription>
<para>Access the internal obstacle container. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const reference to the obstacle container </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="292" column="23" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="292" bodyend="292"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Take via-points into account</header>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a0b5e4c78ce6ea5d02eedd3f2bd1307ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::setViaPoints</definition>
        <argsstring>(const ViaPointContainer *via_points)</argsstring>
        <name>setViaPoints</name>
        <param>
          <type>const <ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref> *</type>
          <declname>via_points</declname>
        </param>
        <briefdescription>
<para>Assign a new set of via-points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>via_points</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a via_point container (can also be a nullptr)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Any previously set container will be overwritten. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="304" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a7b0f7d57647482300be8f01e2a3d91f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref> &amp;</type>
        <definition>const ViaPointContainer&amp; hateb_local_planner::TebOptimalPlanner::getViaPoints</definition>
        <argsstring>() const</argsstring>
        <name>getViaPoints</name>
        <briefdescription>
<para>Access the internal via-point container. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const reference to the via-point container </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="310" column="27" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="310" bodyend="310"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Visualization</header>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ab509baedc43b5e1ce404a2d504ddfcf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::setVisualization</definition>
        <argsstring>(TebVisualizationPtr visualization)</argsstring>
        <name>setVisualization</name>
        <param>
          <type><ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref></type>
          <declname>visualization</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="classhateb__local__planner_1_1TebVisualization" kindref="compound">TebVisualization</ref> class to enable visiualization routines (e.g. publish the local plan and pose sequence) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visualization</parametername>
</parameternamelist>
<parameterdescription>
<para>shared pointer to a <ref refid="classhateb__local__planner_1_1TebVisualization" kindref="compound">TebVisualization</ref> instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4585cb586dc1cbf1194843868b60e8a0" kindref="member">visualize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="322" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a4585cb586dc1cbf1194843868b60e8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::visualize</definition>
        <argsstring>() override</argsstring>
        <name>visualize</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1ad13778a54ca5746f9ec1f10bcfabb343">visualize</reimplements>
        <briefdescription>
<para>Publish the local plan and pose sequence via ros topics (e.g. subscribe with rviz). </para>
        </briefdescription>
        <detaileddescription>
<para>Make sure to register a <ref refid="classhateb__local__planner_1_1TebVisualization" kindref="compound">TebVisualization</ref> instance before using <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab509baedc43b5e1ce404a2d504ddfcf9" kindref="member">setVisualization()</ref> or an overlaoded constructor. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab509baedc43b5e1ce404a2d504ddfcf9" kindref="member">setVisualization</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="330" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="113" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Utility methods and more</header>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a12c802c1639871abc3477951f45edd5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::clearPlanner</definition>
        <argsstring>() override</argsstring>
        <name>clearPlanner</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1a325a73a30d9288b7d0d25aff9cc79bf9">clearPlanner</reimplements>
        <briefdescription>
<para>Reset the planner by clearing the internal graph and trajectory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="340" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="340" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a2ce41fa5830735c10cc96bb95b12a7b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::setPreferredTurningDir</definition>
        <argsstring>(RotType dir) override</argsstring>
        <name>setPreferredTurningDir</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1a77c2811290d77a03dfd9f3fca759e41b">setPreferredTurningDir</reimplements>
        <param>
          <type><ref refid="namespacehateb__local__planner_1a463aa878b6972598ee87204519a60ba0" kindref="member">RotType</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Prefer a desired initial turning direction (by penalizing the opposing one) </para>
        </briefdescription>
        <detaileddescription>
<para>A desired (initial) turning direction might be specified in case the planned trajectory oscillates between two solutions (in the same equivalence class!) with similar cost. Check the parameters in order to adjust the weight of the penalty. Initial means that the penalty is applied only to the first few poses of the trajectory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>This parameter might be <ref refid="namespacehateb__local__planner_1a463aa878b6972598ee87204519a60ba0a811882fecd5c7618d7099ebbd39ea254" kindref="member">RotType::left</ref> (prefer left), <ref refid="namespacehateb__local__planner_1a463aa878b6972598ee87204519a60ba0a7c4f29407893c334a6cb7a87bf045c0d" kindref="member">RotType::right</ref> (prefer right) or <ref refid="namespacehateb__local__planner_1a463aa878b6972598ee87204519a60ba0a334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">RotType::none</ref> (prefer none) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="356" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ab017ee3df54520ff900b74ffa25305f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhateb__local__planner_1_1TimedElasticBand" kindref="compound">TimedElasticBand</ref> &amp;</type>
        <definition>TimedElasticBand&amp; hateb_local_planner::TebOptimalPlanner::teb</definition>
        <argsstring>()</argsstring>
        <name>teb</name>
        <briefdescription>
<para>Access the internal <ref refid="classhateb__local__planner_1_1TimedElasticBand" kindref="compound">TimedElasticBand</ref> trajectory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>In general, the underlying teb must not be modified directly. Use with care... </para>
</simplesect>
<simplesect kind="return"><para>reference to the teb </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="371" column="20" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a35eb7521494e328b0dab77b8baddda6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classhateb__local__planner_1_1TimedElasticBand" kindref="compound">TimedElasticBand</ref> &amp;</type>
        <definition>const TimedElasticBand&amp; hateb_local_planner::TebOptimalPlanner::teb</definition>
        <argsstring>() const</argsstring>
        <name>teb</name>
        <briefdescription>
<para>Access the internal <ref refid="classhateb__local__planner_1_1TimedElasticBand" kindref="compound">TimedElasticBand</ref> trajectory (read-only). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to the teb </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="377" column="26" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="377" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a054e0ebddcb9d09be34c9ad350aee100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::shared_ptr&lt; g2o::SparseOptimizer &gt;</type>
        <definition>boost::shared_ptr&lt;g2o::SparseOptimizer&gt; hateb_local_planner::TebOptimalPlanner::optimizer</definition>
        <argsstring>()</argsstring>
        <name>optimizer</name>
        <briefdescription>
<para>Access the internal g2o optimizer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>In general, the underlying optimizer must not be modified directly. Use with care... </para>
</simplesect>
<simplesect kind="return"><para>const shared pointer to the g2o sparse optimizer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="384" column="21" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="384" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a707e4da47e72d554fcd260bee581572d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::shared_ptr&lt; const g2o::SparseOptimizer &gt;</type>
        <definition>boost::shared_ptr&lt;const g2o::SparseOptimizer&gt; hateb_local_planner::TebOptimalPlanner::optimizer</definition>
        <argsstring>() const</argsstring>
        <name>optimizer</name>
        <briefdescription>
<para>Access the internal g2o optimizer (read-only). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const shared pointer to the g2o sparse optimizer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="390" column="21" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="390" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a219b36a893a99d4ed3893e4f6f097f2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::isOptimized</definition>
        <argsstring>() const</argsstring>
        <name>isOptimized</name>
        <briefdescription>
<para>Check if last optimization was successful. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the last optimization returned without errors, otherwise <computeroutput>false</computeroutput> (also if no optimization has been called before). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="397" column="8" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1aa55295bf6fe8b04a4bda0575d1babe6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::computeCurrentCost</definition>
        <argsstring>(double obst_cost_scale=1.0, double viapoint_cost_scale=1.0, bool alternative_time_cost=false, hateb_local_planner::OptimizationCostArray *op_costs=NULL)</argsstring>
        <name>computeCurrentCost</name>
        <param>
          <type>double</type>
          <declname>obst_cost_scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>viapoint_cost_scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alternative_time_cost</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>hateb_local_planner::OptimizationCostArray *</type>
          <declname>op_costs</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Compute the cost vector of a given optimization problen (hyper-graph must exist). </para>
        </briefdescription>
        <detaileddescription>
<para>Use this method to obtain information about the current edge errors / costs (local cost functions). <linebreak/>
The vector of cost values is composed according to the different edge types (time_optimal, obstacles, ...). <linebreak/>
Refer to the method declaration for the detailed composition. <linebreak/>
The cost for the edges that minimize time differences (<ref refid="classhateb__local__planner_1_1EdgeTimeOptimal" kindref="compound">EdgeTimeOptimal</ref>) corresponds to the sum of all single squared time differneces: <formula id="31">$ \sum_i \Delta T_i^2 $</formula>. Sometimes, the user may want to get a value that is proportional or identical to the actual trajectory transition time <formula id="32">$ \sum_i \Delta T_i $</formula>. <linebreak/>
Set <computeroutput>alternative_time_cost</computeroutput> to true in order to get the cost calculated using the latter equation, but check the implemented definition, if the value is scaled to match the magnitude of other cost values. <simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a967863b8064782d23e3e78f4714243dd" kindref="member">getCurrentCost</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8da0bf1d43d59b6e1225687c24bc873b" kindref="member">optimizeTEB</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obst_cost_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify extra scaling for obstacle costs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viapoint_cost_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify extra scaling for via points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternative_time_cost</parametername>
</parameternamelist>
<parameterdescription>
<para>Replace the cost for the time optimal objective by the actual (weighted) transition time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TebCostVec containing the cost values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="417" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1700" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1aa1686a692dedc3f7d1aac627e028bfb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void hateb_local_planner::TebOptimalPlanner::computeCurrentCost</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;cost, double obst_cost_scale=1.0, double viapoint_cost_scale=1.0, bool alternative_time_cost=false)</argsstring>
        <name>computeCurrentCost</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>cost</declname>
        </param>
        <param>
          <type>double</type>
          <declname>obst_cost_scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>viapoint_cost_scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alternative_time_cost</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute and return the cost of the current optimization graph (supports multiple trajectories) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cost</parametername>
</parameternamelist>
<parameterdescription>
<para>current cost value for each trajectory [for a planner with just a single trajectory: size=1, vector will not be cleared] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obst_cost_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify extra scaling for obstacle costs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viapoint_cost_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify extra scaling for via points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternative_time_cost</parametername>
</parameternamelist>
<parameterdescription>
<para>Replace the cost for the time optimal objective by the actual (weighted) transition time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="427" column="16" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="427" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a967863b8064782d23e3e78f4714243dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double hateb_local_planner::TebOptimalPlanner::getCurrentCost</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentCost</name>
        <briefdescription>
<para>Access the cost vector. </para>
        </briefdescription>
        <detaileddescription>
<para>The accumulated cost value previously calculated using computeCurrentCost or by calling optimizeTEB with enabled cost flag. <simplesect kind="return"><para>const reference to the TebCostVec. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="439" column="10" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="439" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ac8627e934f47df48df7c1f86e5908f35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::extractVelocity</definition>
        <argsstring>(const PoseSE2 &amp;pose1, const PoseSE2 &amp;pose2, double dt, double &amp;vx, double &amp;vy, double &amp;omega) const</argsstring>
        <name>extractVelocity</name>
        <param>
          <type>const <ref refid="classhateb__local__planner_1_1PoseSE2" kindref="compound">PoseSE2</ref> &amp;</type>
          <declname>pose1</declname>
        </param>
        <param>
          <type>const <ref refid="classhateb__local__planner_1_1PoseSE2" kindref="compound">PoseSE2</ref> &amp;</type>
          <declname>pose2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>omega</declname>
        </param>
        <briefdescription>
<para>Extract the velocity from consecutive poses and a time difference (including strafing velocity for holonomic robots) </para>
        </briefdescription>
        <detaileddescription>
<para>The velocity is extracted using finite differences. The direction of the translational velocity is also determined. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pose1</parametername>
</parameternamelist>
<parameterdescription>
<para>pose at time k </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pose2</parametername>
</parameternamelist>
<parameterdescription>
<para>consecutive pose at time k+1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>actual time difference between k and k+1 (must be &gt;0 !!!) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">vx</parametername>
</parameternamelist>
<parameterdescription>
<para>translational velocity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">vy</parametername>
</parameternamelist>
<parameterdescription>
<para>strafing velocity which can be nonzero for holonomic robots </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">omega</parametername>
</parameternamelist>
<parameterdescription>
<para>rotational velocity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="453" column="15" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1747" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ad7e220472dd5755a74fca06af0dbe569" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::getVelocityProfile</definition>
        <argsstring>(std::vector&lt; geometry_msgs::Twist &gt; &amp;velocity_profile) const</argsstring>
        <name>getVelocityProfile</name>
        <param>
          <type>std::vector&lt; geometry_msgs::Twist &gt; &amp;</type>
          <declname>velocity_profile</declname>
        </param>
        <briefdescription>
<para>Compute the velocity profile of the trajectory. </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes the translational and rotational velocity for the complete planned trajectory. The first velocity is the one that is provided as initial velocity (fixed). Velocities at index k=2...end-1 are related to the transition from pose_{k-1} to pose_k. The last velocity is the final velocity (fixed). The number of Twist objects is therefore sizePoses()+1; In summary: v[0] = v_start, v[1,...end-1] = +-(pose_{k+1}-pose{k})/dt, v(end) = v_goal It can be used for evaluation and debugging purposes or for open-loop control. For computing the velocity required for controlling the robot to the next step refer to <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a005e0f7192ea5ebb6b74f3ef2c933fb9" kindref="member">getVelocityCommand()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">velocity_profile</parametername>
</parameternamelist>
<parameterdescription>
<para>velocity profile will be written to this vector (after clearing any existing content) with the size=no_poses+1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="473" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1820" bodyend="1843"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ab620a549c6ed5a462bd3fc6d6d463d7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>cohan_msgs::Trajectory</type>
        <definition>cohan_msgs::Trajectory hateb_local_planner::TebOptimalPlanner::getFullTrajectory</definition>
        <argsstring>() const override</argsstring>
        <name>getFullTrajectory</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1ac4ed82c643aca4b4b905724b420a8120">getFullTrajectory</reimplements>
        <briefdescription>
<para>Return the complete trajectory including poses, velocity profiles and temporal information. </para>
        </briefdescription>
        <detaileddescription>
<para>It is useful for evaluation and debugging purposes or for open-loop control. Since the velocity obtained using difference quotients is the mean velocity between consecutive poses, the velocity at each pose at time stamp k is obtained by taking the average between both velocities. The velocity of the first pose is v_start (provided initial value) and the last one is v_goal (usually zero, if free_goal_vel is off). See <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ad7e220472dd5755a74fca06af0dbe569" kindref="member">getVelocityProfile()</ref> for the list of velocities between consecutive points. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">trajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting trajectory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="485" column="26" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1845" bodyend="1902"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1ad4f03a12bed54ae68f062bdb947e0b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>cohan_msgs::Trajectory</type>
        <definition>cohan_msgs::Trajectory hateb_local_planner::TebOptimalPlanner::getFullAgentTrajectory</definition>
        <argsstring>(uint64_t agent_id) override</argsstring>
        <name>getFullAgentTrajectory</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1aeef5a419198a00524cdc6c366c430c06">getFullAgentTrajectory</reimplements>
        <param>
          <type>uint64_t</type>
          <declname>agent_id</declname>
        </param>
        <briefdescription>
<para>Return the complete trajectory for a specific agent including poses, velocity profiles and temporal information. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab620a549c6ed5a462bd3fc6d6d463d7b" kindref="member">getFullTrajectory()</ref> but specifically for retrieving an agent&apos;s planned trajectory. The trajectory includes pose sequence, velocity profile, and timing information useful for evaluation and debugging of agent behavior. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>agent_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier of the agent whose trajectory should be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The complete trajectory message for the specified agent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="496" column="26" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1904" bodyend="1963"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a93e4efa3fe4ab6e8716875e84184fdd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hateb_local_planner::TebOptimalPlanner::isTrajectoryFeasible</definition>
        <argsstring>(base_local_planner::CostmapModel *costmap_model, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint_spec, double inscribed_radius=0.0, double circumscribed_radius=0.0, int look_ahead_idx=-1) override</argsstring>
        <name>isTrajectoryFeasible</name>
        <reimplements refid="classhateb__local__planner_1_1PlannerInterface_1affce54636c6c06fa05bf29af3b5f2789">isTrajectoryFeasible</reimplements>
        <param>
          <type>base_local_planner::CostmapModel *</type>
          <declname>costmap_model</declname>
        </param>
        <param>
          <type>const std::vector&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint_spec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>look_ahead_idx</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Check whether the planned trajectory is feasible or not. </para>
        </briefdescription>
        <detaileddescription>
<para>This method currently checks only that the trajectory, or a part of the trajectory is collision free. Obstacles are here represented as costmap instead of the internal ObstacleContainer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>costmap_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the costmap model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>The specification of the footprint of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the inscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circumscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circumscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>look_ahead_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of poses along the trajectory that should be verified, if -1, the complete trajectory will be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the robot footprint along the first part of the trajectory intersects with any obstacle in the costmap, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="511" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="1964" bodyend="2000"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a92efa06e92650e10e4a5004b2f0b7caf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::registerG2OTypes</definition>
        <argsstring>()</argsstring>
        <name>registerG2OTypes</name>
        <briefdescription>
<para>Register the vertices and edges defined for the TEB to the g2o::Factory. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows the user to export the internal graph to a text file for instance. Access the <ref refid="classhateb__local__planner_1_1TebOptimalPlanner_1a054e0ebddcb9d09be34c9ad350aee100" kindref="member">optimizer()</ref> for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="364" column="15" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="140" bodyend="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1aca96b2f03ab832b2c4159973909ca14f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hateb_local_planner::TebOptimalPlanner::TebOptimalPlanner</definition>
        <argsstring>()</argsstring>
        <name>TebOptimalPlanner</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="114" column="3" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="57" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1aace5b058d2ba554c7baf34b316ac0d30" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>hateb_local_planner::TebOptimalPlanner::TebOptimalPlanner</definition>
        <argsstring>(const HATebConfig &amp;cfg, ObstContainer *obstacles=nullptr, FootprintModelPtr robot_model=boost::make_shared&lt; PointFootprint &gt;(), TebVisualizationPtr visual=TebVisualizationPtr(), const ViaPointContainer *via_points=nullptr, CircularFootprintPtr agent_model=boost::make_shared&lt; CircularFootprint &gt;(), const std::map&lt; uint64_t, ViaPointContainer &gt; *agents_via_points_map=nullptr)</argsstring>
        <name>TebOptimalPlanner</name>
        <param>
          <type>const <ref refid="classhateb__local__planner_1_1HATebConfig" kindref="compound">HATebConfig</ref> &amp;</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" kindref="member">ObstContainer</ref> *</type>
          <declname>obstacles</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1acb633f39a551ef9e0a25c9e1134ae491" kindref="member">FootprintModelPtr</ref></type>
          <declname>robot_model</declname>
          <defval>boost::make_shared&lt; <ref refid="classhateb__local__planner_1_1PointFootprint" kindref="compound">PointFootprint</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref></type>
          <declname>visual</declname>
          <defval><ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref> *</type>
          <declname>via_points</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1a96f5d84de31cd8eeeffbbf5341bac099" kindref="member">CircularFootprintPtr</ref></type>
          <declname>agent_model</declname>
          <defval>boost::make_shared&lt; <ref refid="classhateb__local__planner_1_1CircularFootprint" kindref="compound">CircularFootprint</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::map&lt; uint64_t, <ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref> &gt; *</type>
          <declname>agents_via_points_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Construct and initialize the TEB optimal planner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to the <ref refid="classhateb__local__planner_1_1HATebConfig" kindref="compound">HATebConfig</ref> class for internal parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obstacles</parametername>
</parameternamelist>
<parameterdescription>
<para>Container storing all relevant obstacles (see <ref refid="classhateb__local__planner_1_1Obstacle" kindref="compound">Obstacle</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>robot_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared pointer to the robot shape model used for optimization (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visual</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared pointer to the <ref refid="classhateb__local__planner_1_1TebVisualization" kindref="compound">TebVisualization</ref> class (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>via_points</parametername>
</parameternamelist>
<parameterdescription>
<para>Container storing via-points (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="124" column="12" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1aac129050e8c23c3f6600e530b399e03a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hateb_local_planner::TebOptimalPlanner::~TebOptimalPlanner</definition>
        <argsstring>() override</argsstring>
        <name>~TebOptimalPlanner</name>
        <briefdescription>
<para>Destruct the optimal planner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="131" column="3" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="73" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classhateb__local__planner_1_1TebOptimalPlanner_1a183c70cf7d4dcfe626d157348b5b84cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hateb_local_planner::TebOptimalPlanner::initialize</definition>
        <argsstring>(const HATebConfig &amp;cfg, ObstContainer *obstacles=nullptr, FootprintModelPtr robot_model=boost::make_shared&lt; PointFootprint &gt;(), TebVisualizationPtr visual=TebVisualizationPtr(), const ViaPointContainer *via_points=nullptr, CircularFootprintPtr agent_model=boost::make_shared&lt; CircularFootprint &gt;(), const std::map&lt; uint64_t, ViaPointContainer &gt; *agents_via_points_map=nullptr)</argsstring>
        <name>initialize</name>
        <param>
          <type>const <ref refid="classhateb__local__planner_1_1HATebConfig" kindref="compound">HATebConfig</ref> &amp;</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1aa2fd52c70b6b2295dc138647919ea794" kindref="member">ObstContainer</ref> *</type>
          <declname>obstacles</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1acb633f39a551ef9e0a25c9e1134ae491" kindref="member">FootprintModelPtr</ref></type>
          <declname>robot_model</declname>
          <defval>boost::make_shared&lt; <ref refid="classhateb__local__planner_1_1PointFootprint" kindref="compound">PointFootprint</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref></type>
          <declname>visual</declname>
          <defval><ref refid="namespacehateb__local__planner_1a189cd7a87216df6bcfef993ad267dd11" kindref="member">TebVisualizationPtr</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref> *</type>
          <declname>via_points</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacehateb__local__planner_1a96f5d84de31cd8eeeffbbf5341bac099" kindref="member">CircularFootprintPtr</ref></type>
          <declname>agent_model</declname>
          <defval>boost::make_shared&lt; <ref refid="classhateb__local__planner_1_1CircularFootprint" kindref="compound">CircularFootprint</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::map&lt; uint64_t, <ref refid="namespacehateb__local__planner_1aa1464081de429166488fe52d38f977c6" kindref="member">ViaPointContainer</ref> &gt; *</type>
          <declname>agents_via_points_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Initializes the optimal planner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to the <ref refid="classhateb__local__planner_1_1HATebConfig" kindref="compound">HATebConfig</ref> class for internal parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obstacles</parametername>
</parameternamelist>
<parameterdescription>
<para>Container storing all relevant obstacles (see <ref refid="classhateb__local__planner_1_1Obstacle" kindref="compound">Obstacle</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>robot_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared pointer to the robot shape model used for optimization (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visual</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared pointer to the <ref refid="classhateb__local__planner_1_1TebVisualization" kindref="compound">TebVisualization</ref> class (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>via_points</parametername>
</parameternamelist>
<parameterdescription>
<para>Container storing via-points (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="141" column="8" bodyfile="hateb_local_planner/src/optimal_planner.cpp" bodystart="82" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class optimizes an internal Timed Elastic Band trajectory using the g2o-framework. </para>
    </briefdescription>
    <detaileddescription>
<para>For an introduction and further details about the TEB optimization problem refer to:<itemizedlist>
<listitem><para>C. Rösmann et al.: Trajectory modification considering dynamic constraints of autonomous robots, ROBOTIK, 2012.</para>
</listitem><listitem><para>C. Rösmann et al.: Efficient trajectory optimization using a sparse model, ECMR, 2013.</para>
</listitem><listitem><para>R. Kümmerle et al.: G2o: A general framework for graph optimization, ICRA, 2011. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>hateb_local_planner::PlannerInterface</label>
        <link refid="classhateb__local__planner_1_1PlannerInterface"/>
      </node>
      <node id="1">
        <label>hateb_local_planner::TebOptimalPlanner</label>
        <link refid="classhateb__local__planner_1_1TebOptimalPlanner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>hateb_local_planner::PlannerInterface</label>
        <link refid="classhateb__local__planner_1_1PlannerInterface"/>
      </node>
      <node id="10">
        <label>hateb_local_planner::HATebConfig::Optimization</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1Optimization"/>
      </node>
      <node id="5">
        <label>hateb_local_planner::HATebConfig::GoalTolerance</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1GoalTolerance"/>
      </node>
      <node id="6">
        <label>hateb_local_planner::HATebConfig::Trajectory</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1Trajectory"/>
      </node>
      <node id="4">
        <label>hateb_local_planner::HATebConfig::Recovery</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1Recovery"/>
      </node>
      <node id="1">
        <label>hateb_local_planner::TebOptimalPlanner</label>
        <link refid="classhateb__local__planner_1_1TebOptimalPlanner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>cfg_</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>teb_</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>hateb_local_planner::HATebConfig::Robot</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1Robot"/>
      </node>
      <node id="8">
        <label>hateb_local_planner::HATebConfig::Obstacles</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1Obstacles"/>
      </node>
      <node id="13">
        <label>hateb_local_planner::TimedElasticBand</label>
        <link refid="classhateb__local__planner_1_1TimedElasticBand"/>
      </node>
      <node id="3">
        <label>hateb_local_planner::HATebConfig</label>
        <link refid="classhateb__local__planner_1_1HATebConfig"/>
        <childnode refid="4" relation="usage">
          <edgelabel>recovery</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>goal_tolerance</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>trajectory</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>hateb</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>obstacles</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>agent</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>optim</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>robot</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>visualization</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>hateb_local_planner::HATebConfig::Visualization</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1Visualization"/>
      </node>
      <node id="9">
        <label>hateb_local_planner::HATebConfig::Agent</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1Agent"/>
      </node>
      <node id="7">
        <label>hateb_local_planner::HATebConfig::Hateb</label>
        <link refid="structhateb__local__planner_1_1HATebConfig_1_1Hateb"/>
      </node>
    </collaborationgraph>
    <location file="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" line="109" column="1" bodyfile="hateb_local_planner/include/hateb_local_planner/optimal_planner.h" bodystart="109" bodyend="845"/>
    <listofallmembers>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ae56d9d6b2080734e948b9e7d21af8551" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesAcceleration</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a2310b1e815a2cc8c400c231fda34c659" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesAccelerationForAgents</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1abf991d67b7c8c6c637e4ab4411e6ac78" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesAgentAgentSafety</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8ffc5ca6ebfffd7f194b722ce6403c55" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesAgentRobotRelVelocity</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a49d2bfe46aa01efaa91131effd1fb578" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesAgentRobotSafety</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ace57ea9d0185fc851db21cdf4bd2c14c" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesAgentRobotVisibility</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a1e2de6f5b024cadd4ea0ba7e65ab6fb6" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesDynamicObstacles</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a78ddfdcb28ed218af26b8c43c3c38fed" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesDynamicObstaclesForAgents</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1afd4450aa795e5f89c0efbc59294217f0" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesInvisibleHumans</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a9959ed52d6b8f4066e86fc9f16791b41" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesKinematicsCarlike</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8ade0d2d1bdc5274ba3e5b2e48e167e7" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesKinematicsCarlikeForAgents</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4d5d01b4db85b827e4c719e014ed60ce" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesKinematicsDiffDrive</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8edc5b0029aa28739803bd9127bd8e87" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesKinematicsDiffDriveForAgents</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aa3343a30796dd331151e617584c62e50" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesObstacles</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac1983bbafe462e79f30786632cd034c1" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesObstaclesForAgents</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac7ce3bd03cf3cc29a1b9f4a21963a89f" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesObstaclesLegacy</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a17cd71f01a09b38e3d7b5a5ea2bd91d2" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesPreferRotDir</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a81df95911b309937169f8a58d2cdc01e" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesShortestPath</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab044b20d3bbcb9c95abed920bfbf6cfe" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesStaticAgentVisibility</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a2ec83c6e8e9459b7d0fb9daf764888c4" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesTimeOptimal</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4b06134de8d274a75dcd582e7d4220f1" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesTimeOptimalForAgents</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a9e66de71f2e136a715296dda5286fa92" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesVelocity</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a7bd944f8d39cb4e2bef171c9e1276f34" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesVelocityForAgents</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a69bb902b27e36c8b28c4dbc6c9fd4009" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesViaPoints</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1abbcab2e75f41d0da7bcaf3144e0dea90" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddEdgesViaPointsForAgents</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1abb871a3666c6c162bf13826912d6c682" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>AddTEBVertices</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a952cbdd8979cc17fc7e98b9f180c404a" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>agent_model_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac91b322e1d8d1e39286b0be9f956ea51" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>agent_nominal_vels_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aea6400f6fb4a92f40bf9d643b76f2bcf" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>agent_radius_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a33d5e38ed7f95f0924fc607bac41756a" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>agents_tebs_map_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a117c3f2fffb806daef219d80f1937539" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>agents_vel_goal_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4b07cf964d0d8364197e0081470213bb" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>agents_vel_start_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1af44d6e2ddac97306ad0f182321451b0d" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>agents_via_points_map_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac638a5706acf601acbbc7e4583600323" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>buildGraph</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aa42b22823a3d4b3c5f00040fe411652f" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>cfg_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ad30a68e2dcf7ae8f2246cb4e83212189" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>clearGraph</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a12c802c1639871abc3477951f45edd5c" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>clearPlanner</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aa55295bf6fe8b04a4bda0575d1babe6f" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>computeCurrentCost</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aa1686a692dedc3f7d1aac627e028bfb8" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>computeCurrentCost</name></member>
      <member refid="classhateb__local__planner_1_1PlannerInterface_1a159c88d6f69ea73631619cfe639e0212" prot="public" virt="virtual" ambiguityscope="hateb_local_planner::PlannerInterface::"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>computeCurrentCost</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a7ba7a2159f87949c2d326a26928b52a0" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>cost_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a7050b3136dd36dd78c46cf787cf1ee48" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>current_agent_robot_min_dist_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac8627e934f47df48df7c1f86e5908f35" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>extractVelocity</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a967863b8064782d23e3e78f4714243dd" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>getCurrentCost</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ad4f03a12bed54ae68f062bdb947e0b2b" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>getFullAgentTrajectory</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab620a549c6ed5a462bd3fc6d6d463d7b" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>getFullTrajectory</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1af0d499cf5cdfe8dc3a0c7c8ab8fbc128" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>getObstVector</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a005e0f7192ea5ebb6b74f3ef2c933fb9" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>getVelocityCommand</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ad7e220472dd5755a74fca06af0dbe569" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>getVelocityProfile</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a7b0f7d57647482300be8f01e2a3d91f9" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>getViaPoints</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a183c70cf7d4dcfe626d157348b5b84cc" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>initialize</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab1e6b47afbdddd72f4a989d8b8354b08" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>initialized_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a9aa2ce0ddb8fef62607def2381356383" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>initOptimizer</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aed52b08f563713ce69eaac77023c6766" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>isMode_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a219b36a893a99d4ed3893e4f6f097f2b" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>isOptimized</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a93e4efa3fe4ab6e8716875e84184fdd3" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>isTrajectoryFeasible</name></member>
      <member refid="classhateb__local__planner_1_1PlannerInterface_1abfb070f651a503cd427dd3ac1adf3490" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>local_weight_optimaltime_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ad51a6e60f6fe04294738dc457c7da274" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>obstacles_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4d9a257275f24978ca8e228ba515fbb2" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>optimized_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8114b570a5a36cb5e9e922a958729b7c" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>optimizeGraph</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a054e0ebddcb9d09be34c9ad350aee100" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>optimizer</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a707e4da47e72d554fcd260bee581572d" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>optimizer</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a64cf586227584f0c198e9472ed947124" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>optimizer_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8da0bf1d43d59b6e1225687c24bc873b" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>optimizeTEB</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a852d1bc329c4098614c268da81ddb85e" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>optimizeTEB</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a72af0ce6cd3dcfd1d24e035febe32d25" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>plan</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ad8526644ac8d76a91afd3909bfad3a65" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>plan</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1af54b613fc63f7386338911ebc988e453" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>plan</name></member>
      <member refid="classhateb__local__planner_1_1PlannerInterface_1ac6728ebca6d43636f825ea4f61c5da0e" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>PlannerInterface</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a953a0e6660c94cac119eddc00d805db4" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>prefer_rotdir_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a92efa06e92650e10e4a5004b2f0b7caf" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>registerG2OTypes</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a52b08b9d6e873e779327d6a42fe00114" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>robot_model_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1abd20c5c60c6066d7ff1022dcf69dc8a9" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>robot_radius_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a3cc45673b854d1958597dc499577afc9" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>setObstVector</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a2ce41fa5830735c10cc96bb95b12a7b5" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>setPreferredTurningDir</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a255f3d596ec6dc4ee5ce86f65eb65520" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>setVelocityGoal</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ac5504eee9026e2000c0f85ddacc3f4d4" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>setVelocityGoalFree</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aabb3685f9bdc42bac14d98caad532b3c" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>setVelocityStart</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a0b5e4c78ce6ea5d02eedd3f2bd1307ef" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>setViaPoints</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab509baedc43b5e1ce404a2d504ddfcf9" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>setVisualization</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a09b5d2c3f6c651a1b6d9983d6c2d9e81" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>static_agents_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab017ee3df54520ff900b74ffa25305f5" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>teb</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a35eb7521494e328b0dab77b8baddda6a" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>teb</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ace92d0665c002c8621ec11ace0c47b24" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>teb_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aca96b2f03ab832b2c4159973909ca14f" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>TebOptimalPlanner</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aace5b058d2ba554c7baf34b316ac0d30" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>TebOptimalPlanner</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1ab2cd55c7ba11881ad5db9a2283b89934" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>vel_goal_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aa210497f3e6af552c4928d7c092620c5" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>vel_start_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a9c7d7580f44b6fe694077bf37e746ac9" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>via_points_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a8142463fe70a9bff9e074c19c992848a" prot="protected" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>visualization_</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1a4585cb586dc1cbf1194843868b60e8a0" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>visualize</name></member>
      <member refid="classhateb__local__planner_1_1PlannerInterface_1a5e36c90af485d53a5d9fe1701d86714a" prot="public" virt="virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>~PlannerInterface</name></member>
      <member refid="classhateb__local__planner_1_1TebOptimalPlanner_1aac129050e8c23c3f6600e530b399e03a" prot="public" virt="non-virtual"><scope>hateb_local_planner::TebOptimalPlanner</scope><name>~TebOptimalPlanner</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
