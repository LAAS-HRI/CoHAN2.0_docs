<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="vel__obs__exit__condition_8cpp" kind="file" language="C++">
    <compoundname>vel_obs_exit_condition.cpp</compoundname>
    <includes refid="vel__obs__exit__condition_8h" local="no">hateb_local_planner/behavior_tree/condition/vel_obs_exit_condition.h</includes>
    <incdepgraph>
      <node id="11">
        <label>cohan_msgs/AgentPathArray.h</label>
      </node>
      <node id="2">
        <label>hateb_local_planner/behavior_tree/condition/vel_obs_exit_condition.h</label>
        <link refid="vel__obs__exit__condition_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>vel_obs_exit_condition.cpp</label>
        <link refid="vel__obs__exit__condition_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cohan_msgs/TrackedSegmentType.h</label>
      </node>
      <node id="12">
        <label>cohan_msgs/AgentTrajectory.h</label>
      </node>
      <node id="15">
        <label>cohan_msgs/TrackedAgents.h</label>
      </node>
      <node id="17">
        <label>Eigen/Core</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="4">
        <label>tf2/utils.h</label>
      </node>
      <node id="7">
        <label>tf2/convert.h</label>
      </node>
      <node id="19">
        <label>hateb_local_planner/behavior_tree/bt_core.h</label>
        <link refid="bt__core_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>costmap_2d/costmap_2d_ros.h</label>
      </node>
      <node id="3">
        <label>ros/ros.h</label>
      </node>
      <node id="5">
        <label>agent_path_prediction/AgentsInfo.h</label>
      </node>
      <node id="20">
        <label>behaviortree_cpp/bt_factory.h</label>
      </node>
      <node id="14">
        <label>cohan_msgs/StateArray.h</label>
      </node>
      <node id="21">
        <label>mutex</label>
      </node>
      <node id="9">
        <label>tf2_ros/transform_listener.h</label>
      </node>
      <node id="6">
        <label>agent_path_prediction/agents_class.h</label>
        <link refid="agents__class_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>tf2_ros/buffer.h</label>
      </node>
      <node id="13">
        <label>cohan_msgs/AgentTrajectoryArray.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehateb__local__planner">hateb_local_planner</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="vel__obs__exit__condition_8h" kindref="compound">hateb_local_planner/behavior_tree/condition/vel_obs_exit_condition.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehateb__local__planner" kindref="compound">hateb_local_planner</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classhateb__local__planner_1_1VelObsExitCondition_1a3da5a0c0843539c2a8c40fe6222504a8" kindref="member">VelObsExitCondition::VelObsExitCondition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>condition_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BT::NodeConfiguration&amp;<sp/>conf)<sp/>:<sp/>BT::ConditionNode(condition_name,<sp/>conf)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>node<sp/>name<sp/>and<sp/>initialize<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>name_<sp/>=<sp/>condition_name;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>nearest_human_id_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>t_stuck_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">VelObsExitCondition::~VelObsExitCondition()<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ROS_INFO<sp/>in<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Shutting<sp/>downd<sp/>the<sp/>VelObsExitCondition<sp/>BT<sp/>Node&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">BT::NodeStatus<sp/>VelObsExitCondition::tick()<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>the<sp/>robot<sp/>is<sp/>stuck,<sp/>increament<sp/>t_stuck<sp/>everytime<sp/>this<sp/>node<sp/>is<sp/>ticked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>t_stuck_++;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agents_ptr_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>agents<sp/>pointer<sp/>from<sp/>blackboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>getInput(</highlight><highlight class="stringliteral">&quot;agents_ptr&quot;</highlight><highlight class="normal">,<sp/>agents_ptr_);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>human<sp/>as<sp/>stopped<sp/>too<sp/>(while<sp/>the<sp/>robot<sp/>is<sp/>stuck)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasHumanStopped()<sp/>&amp;&amp;<sp/>t_stuck_<sp/>&gt;=<sp/>20)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(unknown):<sp/>Remove<sp/>the<sp/>magic<sp/>number<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>t_stuck_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bt__core_8h_1a25ae9fec95ea71254c494b5a594efeb9" kindref="member">BT_INFO</ref>(name_,<sp/></highlight><highlight class="stringliteral">&quot;Both<sp/>human<sp/>and<sp/>robot<sp/>are<sp/>stuck.<sp/>Exiting<sp/>VelObs!&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>the<sp/>agents<sp/>pointer<sp/>before<sp/>updating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::scoped_lock<sp/>lock(agents_mutex_);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>human<sp/>state<sp/>to<sp/>BLOCKED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>agents_ptr_-&gt;setState(<ref refid="namespaceagents" kindref="compound">agents</ref>::<ref refid="namespaceagents_1a11caf48a935369da9fb37768e769738f" kindref="member">AgentState</ref>::<ref refid="namespaceagents_1a11caf48a935369da9fb37768e769738fa299c9f49213ec1c9d11faf792bf12c19" kindref="member">BLOCKED</ref>,<sp/>nearest_human_id_);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>blackboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setOutput(&quot;stuck_agent&quot;,<sp/>nearest_human_id_);<sp/>//<sp/>Not<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>BT::NodeStatus::SUCCESS;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="bt__core_8h_1a25ae9fec95ea71254c494b5a594efeb9" kindref="member">BT_INFO</ref>(name_,<sp/>&quot;in<sp/>VelObs&quot;)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>return<sp/>BT::NodeStatus::FAILURE;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VelObsExitCondition::hasHumanStopped()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>getInput(</highlight><highlight class="stringliteral">&quot;agents_info&quot;</highlight><highlight class="normal">,<sp/>agents_info_);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!agents_info_.humans.empty())<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>human<sp/>id<sp/>of<sp/>the<sp/>closest<sp/>human</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nearest_human_id_<sp/>!=<sp/>agents_info_.visible[0])<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nearest_human_id_<sp/>=<sp/>agents_info_.visible[0];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bt__core_8h_1a25ae9fec95ea71254c494b5a594efeb9" kindref="member">BT_INFO</ref>(name_,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)agents_info_.humans[0].state);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>human<sp/>has<sp/>either<sp/>stopped<sp/>moving<sp/>or<sp/>already<sp/>blocked,<sp/>exit<sp/>the<sp/>mode<sp/>and<sp/>start<sp/>backoff<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agents_info_.humans[0].state<sp/>==<sp/><ref refid="namespaceagents_1a11caf48a935369da9fb37768e769738fa4b8f376def400d5a5dca2f99e3d2c9bc" kindref="member">agents::AgentState::STOPPED</ref><sp/>||<sp/>agents_info_.humans[0].state<sp/>==<sp/><ref refid="namespaceagents_1a11caf48a935369da9fb37768e769738fa299c9f49213ec1c9d11faf792bf12c19" kindref="member">agents::AgentState::BLOCKED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hateb_local_planner</highlight></codeline>
    </programlisting>
    <location file="hateb_local_planner/src/behavior_tree/condition/vel_obs_exit_condition.cpp"/>
  </compounddef>
</doxygen>
