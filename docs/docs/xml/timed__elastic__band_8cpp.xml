<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="timed__elastic__band_8cpp" kind="file" language="C++">
    <compoundname>timed_elastic_band.cpp</compoundname>
    <includes refid="timed__elastic__band_8h" local="no">hateb_local_planner/timed_elastic_band.h</includes>
    <includes local="no">limits</includes>
    <incdepgraph>
      <node id="23">
        <label>ros/assert.h</label>
      </node>
      <node id="19">
        <label>boost/pointer_cast.hpp</label>
      </node>
      <node id="20">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="35">
        <label>limits</label>
      </node>
      <node id="3">
        <label>geometry_msgs/PoseArray.h</label>
      </node>
      <node id="1">
        <label>/home/ptsingaman/ros_ws/CoHAN2.0/src/hateb_local_planner/src/timed_elastic_band.cpp</label>
        <link refid="timed__elastic__band_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Eigen/Geometry</label>
      </node>
      <node id="28">
        <label>g2o/core/hyper_graph_action.h</label>
      </node>
      <node id="11">
        <label>Eigen/Core</label>
      </node>
      <node id="5">
        <label>hateb_local_planner/obstacles.h</label>
        <link refid="obstacles_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>tf/tf.h</label>
      </node>
      <node id="33">
        <label>hateb_local_planner/g2o_types/vertex_timediff.h</label>
        <link refid="vertex__timediff_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>g2o/core/base_vertex.h</label>
      </node>
      <node id="26">
        <label>g2o/config.h</label>
      </node>
      <node id="18">
        <label>Eigen/StdVector</label>
      </node>
      <node id="32">
        <label>tf/transform_datatypes.h</label>
      </node>
      <node id="4">
        <label>geometry_msgs/PoseStamped.h</label>
      </node>
      <node id="34">
        <label>hateb_local_planner/timed_elastic_band.hpp</label>
        <link refid="timed__elastic__band_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>geometry_msgs/QuaternionStamped.h</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="6">
        <label>geometry_msgs/Polygon.h</label>
      </node>
      <node id="22">
        <label>utility</label>
      </node>
      <node id="13">
        <label>boost/utility.hpp</label>
      </node>
      <node id="31">
        <label>geometry_msgs/Pose.h</label>
      </node>
      <node id="24">
        <label>ros/ros.h</label>
      </node>
      <node id="2">
        <label>hateb_local_planner/timed_elastic_band.h</label>
        <link refid="timed__elastic__band_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hateb_local_planner/distance_calculations.h</label>
        <link refid="distance__calculations_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>geometry_msgs/TwistWithCovariance.h</label>
      </node>
      <node id="29">
        <label>g2o/stuff/misc.h</label>
      </node>
      <node id="25">
        <label>hateb_local_planner/g2o_types/vertex_pose.h</label>
        <link refid="vertex__pose_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>hateb_local_planner/pose_se2.h</label>
        <link refid="pose__se2_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>hateb_local_planner/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>complex</label>
      </node>
      <node id="15">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>boost/type_traits.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehateb__local__planner">hateb_local_planner</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Software<sp/>License<sp/>Agreement<sp/>(BSD<sp/>License)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(c)<sp/>2016,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>TU<sp/>Dortmund<sp/>-<sp/>Institute<sp/>of<sp/>Control<sp/>Theory<sp/>and<sp/>Systems<sp/>Engineering.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>institute<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Christoph<sp/>Rösmann</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="timed__elastic__band_8h" kindref="compound">hateb_local_planner/timed_elastic_band.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehateb__local__planner" kindref="compound">hateb_local_planner</ref><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>estimateDeltaT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2&amp;<sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2&amp;<sp/>end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_vel_x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_vel_theta)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_constant_motion<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_vel_x<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trans_dist<sp/>=<sp/>(end.position()<sp/>-<sp/>start.position()).norm();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_constant_motion<sp/>=<sp/>trans_dist<sp/>/<sp/>max_vel_x;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_vel_theta<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rot_dist<sp/>=<sp/>std::abs(g2o::normalize_theta(end.theta()<sp/>-<sp/>start.theta()));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_constant_motion<sp/>=<sp/>std::max(dt_constant_motion,<sp/>rot_dist<sp/>/<sp/>max_vel_theta);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dt_constant_motion;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a50e99238a217986bd9b161e05ef8e14b" kindref="member">TimedElasticBand::TimedElasticBand</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><ref refid="classhateb__local__planner_1_1TimedElasticBand_1afc52a84ae6d0e596b91d9a7ff5a5eacc" kindref="member">TimedElasticBand::~TimedElasticBand</ref>()<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;Destructor<sp/>Timed_Elastic_Band...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a17ecd326ce62af3ac2254f5fb87c8bf9" kindref="member">clearTimedElasticBand</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a532b60e492520918cfc1942d5f94aac5" kindref="member">TimedElasticBand::addPose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2&amp;<sp/>pose,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>pose_vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VertexPose(pose,<sp/>fixed);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.push_back(pose_vertex);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a532b60e492520918cfc1942d5f94aac5" kindref="member">TimedElasticBand::addPose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>position,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>pose_vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VertexPose(position,<sp/>theta,<sp/>fixed);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.push_back(pose_vertex);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a532b60e492520918cfc1942d5f94aac5" kindref="member">TimedElasticBand::addPose</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>pose_vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VertexPose(x,<sp/>y,<sp/>theta,<sp/>fixed);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.push_back(pose_vertex);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad3b961f0890e7cd873ec61e680c6b2fa" kindref="member">TimedElasticBand::addTimeDiff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fixed)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ROS_ASSERT_MSG(dt<sp/>&gt;<sp/>0.,<sp/></highlight><highlight class="stringliteral">&quot;Adding<sp/>a<sp/>timediff<sp/>requires<sp/>a<sp/>positive<sp/>dt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>timediff_vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VertexTimeDiff(dt,<sp/>fixed);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.push_back(timediff_vertex);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">TimedElasticBand::addPoseAndTimeDiff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>!=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>())<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a532b60e492520918cfc1942d5f94aac5" kindref="member">addPose</ref>(x,<sp/>y,<sp/>theta,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad3b961f0890e7cd873ec61e680c6b2fa" kindref="member">addTimeDiff</ref>(dt,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Method<sp/>addPoseAndTimeDiff:<sp/>Add<sp/>one<sp/>single<sp/>Pose<sp/>first.<sp/>Timediff<sp/>describes<sp/>the<sp/>time<sp/>difference<sp/>between<sp/>last<sp/>conf<sp/>and<sp/>given<sp/>conf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">TimedElasticBand::addPoseAndTimeDiff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2&amp;<sp/>pose,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>!=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a532b60e492520918cfc1942d5f94aac5" kindref="member">addPose</ref>(pose,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad3b961f0890e7cd873ec61e680c6b2fa" kindref="member">addTimeDiff</ref>(dt,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Method<sp/>addPoseAndTimeDiff:<sp/>Add<sp/>one<sp/>single<sp/>Pose<sp/>first.<sp/>Timediff<sp/>describes<sp/>the<sp/>time<sp/>difference<sp/>between<sp/>last<sp/>conf<sp/>and<sp/>given<sp/>conf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">TimedElasticBand::addPoseAndTimeDiff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>position,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>!=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>())<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a532b60e492520918cfc1942d5f94aac5" kindref="member">addPose</ref>(position,<sp/>theta,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad3b961f0890e7cd873ec61e680c6b2fa" kindref="member">addTimeDiff</ref>(dt,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Method<sp/>addPoseAndTimeDiff:<sp/>Add<sp/>one<sp/>single<sp/>Pose<sp/>first.<sp/>Timediff<sp/>describes<sp/>the<sp/>time<sp/>difference<sp/>between<sp/>last<sp/>conf<sp/>and<sp/>given<sp/>conf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a36d2b9295e1e8314d57a8232e2e18ac4" kindref="member">TimedElasticBand::deletePose</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>ROS_ASSERT(index<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.size());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.at(index);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.erase(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.begin()<sp/>+<sp/>index);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a12f6ffe38c80d5e45abfee192a38dd93" kindref="member">TimedElasticBand::deletePoses</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>ROS_ASSERT(index<sp/>+<sp/>number<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.size());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>index;<sp/>i<sp/>&lt;<sp/>index<sp/>+<sp/>number;<sp/>++i)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.at(i);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.erase(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.begin()<sp/>+<sp/>index,<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.begin()<sp/>+<sp/>index<sp/>+<sp/>number);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a13a7d4d29c13fbc96e70c35ba8dc736e" kindref="member">TimedElasticBand::deleteTimeDiff</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>ROS_ASSERT(index<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.size());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.at(index);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.erase(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.begin()<sp/>+<sp/>index);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a0fa4471c08f1271d95e885b8a53a40dc" kindref="member">TimedElasticBand::deleteTimeDiffs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>ROS_ASSERT(index<sp/>+<sp/>number<sp/>&lt;=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.size());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>index;<sp/>i<sp/>&lt;<sp/>index<sp/>+<sp/>number;<sp/>++i)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.at(i);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.erase(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.begin()<sp/>+<sp/>index,<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.begin()<sp/>+<sp/>index<sp/>+<sp/>number);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ab42e3738fb81f9bdce3eb2b1e745986d" kindref="member">TimedElasticBand::insertPose</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2&amp;<sp/>pose)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>pose_vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VertexPose(pose);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.insert(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.begin()<sp/>+<sp/>index,<sp/>pose_vertex);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ab42e3738fb81f9bdce3eb2b1e745986d" kindref="member">TimedElasticBand::insertPose</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>position,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>pose_vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VertexPose(position,<sp/>theta);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.insert(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.begin()<sp/>+<sp/>index,<sp/>pose_vertex);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ab42e3738fb81f9bdce3eb2b1e745986d" kindref="member">TimedElasticBand::insertPose</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>pose_vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VertexPose(x,<sp/>y,<sp/>theta);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.insert(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.begin()<sp/>+<sp/>index,<sp/>pose_vertex);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a6b74ce9d742268151c0626438099cf0a" kindref="member">TimedElasticBand::insertTimeDiff</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>timediff_vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VertexTimeDiff(dt);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.insert(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.begin()<sp/>+<sp/>index,<sp/>timediff_vertex);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a17ecd326ce62af3ac2254f5fb87c8bf9" kindref="member">TimedElasticBand::clearTimedElasticBand</ref>()<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pose_it<sp/>:<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pose_it;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.clear();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dt_it<sp/>:<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dt_it;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.clear();</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1abf2497da9c5e1c9f83ceba296e5a0117" kindref="member">TimedElasticBand::setPoseVertexFixed</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>ROS_ASSERT(index<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ad1f573fa556da17e5e95ca25fdef06b7" kindref="member">pose_vec_</ref>.at(index)-&gt;setFixed(status);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a59b9b853592805800d26fcf43b66b64b" kindref="member">TimedElasticBand::setTimeDiffVertexFixed</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>ROS_ASSERT(index<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.at(index)-&gt;setFixed(status);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a3576adcaec45103edd7e1d0da6b97a7b" kindref="member">TimedElasticBand::autoResize</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_ref,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_hysteresis,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_samples,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_samples,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fast_mode)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>ROS_ASSERT(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>()<sp/>==<sp/>0<sp/>||<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>()<sp/>+<sp/>1<sp/>==<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>();<sp/>++i)<sp/><sp/></highlight><highlight class="comment">//<sp/>TimeDiff<sp/>connects<sp/>Point(i)<sp/>with<sp/>Point(i+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i)<sp/>&gt;<sp/>dt_ref<sp/>+<sp/>dt_hysteresis)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ROS_DEBUG(&quot;hateb_local_planner:<sp/>autoResize()<sp/>inserting<sp/>new<sp/>bandpoint<sp/>i=%u,<sp/>#TimeDiffs=%lu&quot;,i,sizeTimeDiffs());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newtime<sp/>=<sp/>0.5<sp/>*<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i)<sp/>=<sp/>newtime;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1ab42e3738fb81f9bdce3eb2b1e745986d" kindref="member">insertPose</ref>(i<sp/>+<sp/>1,<sp/><ref refid="classhateb__local__planner_1_1PoseSE2_1a50ff3bf8419e65c4589af65715a5efdb" kindref="member">PoseSE2::average</ref>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i),<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a6b74ce9d742268151c0626438099cf0a" kindref="member">insertTimeDiff</ref>(i<sp/>+<sp/>1,<sp/>newtime);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>newly<sp/>inserted<sp/>pose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i)<sp/>&lt;<sp/>dt_ref<sp/>-<sp/>dt_hysteresis<sp/>&amp;&amp;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>()<sp/>&gt;<sp/>min_samples)<sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>remove<sp/>samples<sp/>if<sp/>size<sp/>is<sp/>larger<sp/>than<sp/>min_samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ROS_DEBUG(&quot;hateb_local_planner:<sp/>autoResize()<sp/>deleting<sp/>bandpoint<sp/>i=%u,<sp/>#TimeDiffs=%lu&quot;,i,sizeTimeDiffs());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>()<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i<sp/>+<sp/>1)<sp/>=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i<sp/>+<sp/>1)<sp/>+<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a13a7d4d29c13fbc96e70c35ba8dc736e" kindref="member">deleteTimeDiff</ref>(i);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a36d2b9295e1e8314d57a8232e2e18ac4" kindref="member">deletePose</ref>(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>motion<sp/>should<sp/>be<sp/>adjusted,<sp/>shift<sp/>time<sp/>to<sp/>the<sp/>interval<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i<sp/>-<sp/>1)<sp/>+=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a09a14db7568744389d5a93db03808e0b" kindref="member">TimeDiff</ref>(i);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a13a7d4d29c13fbc96e70c35ba8dc736e" kindref="member">deleteTimeDiff</ref>(i);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a36d2b9295e1e8314d57a8232e2e18ac4" kindref="member">deletePose</ref>(i);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a565d7369bc06660ef38fdd780cedf9a8" kindref="member">TimedElasticBand::getSumOfAllTimeDiffs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>dt_it<sp/>:<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>time<sp/>+=<sp/>dt_it-&gt;dt();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7e838ee5e6e3c39b4b36585245e730fc" kindref="member">TimedElasticBand::getSumOfTimeDiffsUpToIdx</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>ROS_ASSERT(index<sp/>&lt;=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.size());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>index;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>time<sp/>+=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a899eeb7fd9c03157610519a338cddb40" kindref="member">timediff_vec_</ref>.at(i)-&gt;dt();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a49a3df8215ea4bc1f2fbcf5995457aef" kindref="member">TimedElasticBand::getAccumulatedDistance</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>+=<sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i<sp/>-<sp/>1).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>()).norm();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a905235b7cdcbc1c90a84edadcafacc99" kindref="member">TimedElasticBand::initTrajectoryToGoal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2&amp;<sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PoseSE2&amp;<sp/>goal,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diststep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_vel_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_samples,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>guess_backwards_motion)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classhateb__local__planner_1_1TimedElasticBand_1aeb156e89b12145e5f5fd3baf7f420229" kindref="member">isInit</ref>())<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a532b60e492520918cfc1942d5f94aac5" kindref="member">addPose</ref>(start);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>starting<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1abf2497da9c5e1c9f83ceba296e5a0117" kindref="member">setPoseVertexFixed</ref>(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>StartConf<sp/>is<sp/>a<sp/>fixed<sp/>constraint<sp/>during<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timestep<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diststep<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>point_to_goal<sp/>=<sp/>goal.position()<sp/>-<sp/>start.position();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dir_to_goal<sp/>=<sp/>std::atan2(point_to_goal[1],<sp/>point_to_goal[0]);<sp/><sp/></highlight><highlight class="comment">//<sp/>direction<sp/>to<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>diststep<sp/>*<sp/>std::cos(dir_to_goal);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>diststep<sp/>*<sp/>std::sin(dir_to_goal);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>orient_init<sp/>=<sp/>dir_to_goal;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>goal<sp/>is<sp/>behind<sp/>the<sp/>start<sp/>pose<sp/>(w.r.t.<sp/>start<sp/>orientation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guess_backwards_motion<sp/>&amp;&amp;<sp/>point_to_goal.dot(start.orientationUnitVec())<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orient_init<sp/>=<sp/>g2o::normalize_theta(orient_init<sp/>+<sp/>M_PI);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist_to_goal<sp/>=<sp/>point_to_goal.norm();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>no_steps_d<sp/>=<sp/>dist_to_goal<sp/>/<sp/>std::abs(diststep);<sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>negative<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>no_steps<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::floor(no_steps_d));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_vel_x<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestep<sp/>=<sp/>diststep<sp/>/<sp/>max_vel_x;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>no_steps;<sp/>i++)<sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>with<sp/>1!<sp/>starting<sp/>point<sp/>had<sp/>index<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>no_steps<sp/>&amp;&amp;<sp/>no_steps_d<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(no_steps))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>last<sp/>conf<sp/>(depending<sp/>on<sp/>stepsize)<sp/>is<sp/>equal<sp/>to<sp/>goal<sp/>conf<sp/>-&gt;<sp/>leave<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">addPoseAndTimeDiff</ref>(start.x()<sp/>+<sp/>(i<sp/>*<sp/>dx),<sp/>start.y()<sp/>+<sp/>(i<sp/>*<sp/>dy),<sp/>orient_init,<sp/>timestep);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>number<sp/>of<sp/>samples<sp/>is<sp/>not<sp/>larger<sp/>than<sp/>min_samples,<sp/>insert<sp/>manually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>&lt;<sp/>min_samples<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;initTEBtoGoal():<sp/>number<sp/>of<sp/>generated<sp/>samples<sp/>is<sp/>less<sp/>than<sp/>specified<sp/>by<sp/>min_samples.<sp/>Forcing<sp/>the<sp/>insertion<sp/>of<sp/>more<sp/>samples...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>&lt;<sp/>min_samples<sp/>-<sp/>1)<sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>goal<sp/>point<sp/>that<sp/>will<sp/>be<sp/>added<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simple<sp/>strategy:<sp/>interpolate<sp/>between<sp/>the<sp/>current<sp/>pose<sp/>and<sp/>the<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PoseSE2<sp/>intermediate_pose<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PoseSE2_1a50ff3bf8419e65c4589af65715a5efdb" kindref="member">PoseSE2::average</ref>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a754e0c2cae23952c0dd7bb8b6ea55214" kindref="member">BackPose</ref>(),<sp/>goal);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_vel_x<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestep<sp/>=<sp/>(intermediate_pose.position()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a754e0c2cae23952c0dd7bb8b6ea55214" kindref="member">BackPose</ref>().<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>()).norm()<sp/>/<sp/>max_vel_x;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">addPoseAndTimeDiff</ref>(intermediate_pose,<sp/>timestep);<sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>optimier<sp/>correct<sp/>the<sp/>timestep<sp/>(TODO:<sp/>better<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_vel_x<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timestep<sp/>=<sp/>(goal.position()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a754e0c2cae23952c0dd7bb8b6ea55214" kindref="member">BackPose</ref>().<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>()).norm()<sp/>/<sp/>max_vel_x;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">addPoseAndTimeDiff</ref>(goal,<sp/>timestep);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>goal<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1abf2497da9c5e1c9f83ceba296e5a0117" kindref="member">setPoseVertexFixed</ref>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>-<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>GoalConf<sp/>is<sp/>a<sp/>fixed<sp/>constraint<sp/>during<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size!=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>init<sp/>TEB<sp/>between<sp/>given<sp/>configuration<sp/>and<sp/>goal,<sp/>because<sp/>TEB<sp/>vectors<sp/>are<sp/>not<sp/>empty<sp/>or<sp/>TEB<sp/>is<sp/>already<sp/>initialized<sp/>(call<sp/>this<sp/>function<sp/>before<sp/>adding<sp/>states<sp/>yourself)!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>TEB<sp/>configurations:<sp/>%d,<sp/>Number<sp/>of<sp/>TEB<sp/>timediffs:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>(),<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a905235b7cdcbc1c90a84edadcafacc99" kindref="member">TimedElasticBand::initTrajectoryToGoal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::PoseStamped&gt;&amp;<sp/>plan,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_vel_x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_vel_theta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>estimate_orient,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_samples,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>guess_backwards_motion,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>skip_dist)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classhateb__local__planner_1_1TimedElasticBand_1aeb156e89b12145e5f5fd3baf7f420229" kindref="member">isInit</ref>())<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>PoseSE2<sp/>start(plan.front().pose);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>PoseSE2<sp/>goal(plan.back().pose);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a532b60e492520918cfc1942d5f94aac5" kindref="member">addPose</ref>(start);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>starting<sp/>point<sp/>with<sp/>given<sp/>orientation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1abf2497da9c5e1c9f83ceba296e5a0117" kindref="member">setPoseVertexFixed</ref>(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>StartConf<sp/>is<sp/>a<sp/>fixed<sp/>constraint<sp/>during<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>backwards<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guess_backwards_motion<sp/>&amp;&amp;<sp/>(goal.position()<sp/>-<sp/>start.position()).dot(start.orientationUnitVec())<sp/>&lt;<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>goal<sp/>is<sp/>behind<sp/>the<sp/>start<sp/>pose<sp/>(w.r.t.<sp/>start<sp/>orientation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>backwards<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(plan.size())<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skip_dist<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xdiff<sp/>=<sp/>plan[i].pose.position.x<sp/>-<sp/>plan[last_i].pose.position.x;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ydiff<sp/>=<sp/>plan[i].pose.position.y<sp/>-<sp/>plan[last_i].pose.position.y;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>std::hypot(xdiff,<sp/>ydiff);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>skip_dist)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(estimate_orient)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>yaw<sp/>from<sp/>the<sp/>orientation<sp/>of<sp/>the<sp/>distance<sp/>vector<sp/>between<sp/>pose_{i+1}<sp/>and<sp/>pose_{i}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>plan[i<sp/>+<sp/>1].pose.position.x<sp/>-<sp/>plan[i].pose.position.x;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>plan[i<sp/>+<sp/>1].pose.position.y<sp/>-<sp/>plan[i].pose.position.y;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yaw<sp/>=<sp/>std::atan2(dy,<sp/>dx);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backwards)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yaw<sp/>=<sp/>g2o::normalize_theta(yaw<sp/>+<sp/>M_PI);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yaw<sp/>=<sp/>tf::getYaw(plan[i].pose.orientation);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PoseSE2<sp/>intermediate_pose(plan[i].pose.position.x,<sp/>plan[i].pose.position.y,<sp/>yaw);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>estimateDeltaT(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a754e0c2cae23952c0dd7bb8b6ea55214" kindref="member">BackPose</ref>(),<sp/>intermediate_pose,<sp/>max_vel_x,<sp/>max_vel_theta);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">addPoseAndTimeDiff</ref>(intermediate_pose,<sp/>dt);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>number<sp/>of<sp/>samples<sp/>is<sp/>not<sp/>larger<sp/>than<sp/>min_samples,<sp/>insert<sp/>manually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>&lt;<sp/>min_samples<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;initTEBtoGoal():<sp/>number<sp/>of<sp/>generated<sp/>samples<sp/>is<sp/>less<sp/>than<sp/>specified<sp/>by<sp/>min_samples.<sp/>Forcing<sp/>the<sp/>insertion<sp/>of<sp/>more<sp/>samples...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>&lt;<sp/>min_samples<sp/>-<sp/>1)<sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>goal<sp/>point<sp/>that<sp/>will<sp/>be<sp/>added<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simple<sp/>strategy:<sp/>interpolate<sp/>between<sp/>the<sp/>current<sp/>pose<sp/>and<sp/>the<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PoseSE2<sp/>intermediate_pose<sp/>=<sp/><ref refid="classhateb__local__planner_1_1PoseSE2_1a50ff3bf8419e65c4589af65715a5efdb" kindref="member">PoseSE2::average</ref>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a754e0c2cae23952c0dd7bb8b6ea55214" kindref="member">BackPose</ref>(),<sp/>goal);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>estimateDeltaT(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a754e0c2cae23952c0dd7bb8b6ea55214" kindref="member">BackPose</ref>(),<sp/>intermediate_pose,<sp/>max_vel_x,<sp/>max_vel_theta);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">addPoseAndTimeDiff</ref>(intermediate_pose,<sp/>dt);<sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>optimier<sp/>correct<sp/>the<sp/>timestep<sp/>(TODO:<sp/>better<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>add<sp/>final<sp/>state<sp/>with<sp/>given<sp/>orientation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>estimateDeltaT(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1a754e0c2cae23952c0dd7bb8b6ea55214" kindref="member">BackPose</ref>(),<sp/>goal,<sp/>max_vel_x,<sp/>max_vel_theta);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a89b8dd681f1417e1e50863e5365cbb54" kindref="member">addPoseAndTimeDiff</ref>(goal,<sp/>dt);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1abf2497da9c5e1c9f83ceba296e5a0117" kindref="member">setPoseVertexFixed</ref>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>-<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>GoalConf<sp/>is<sp/>a<sp/>fixed<sp/>constraint<sp/>during<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size!=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>init<sp/>TEB<sp/>between<sp/>given<sp/>configuration<sp/>and<sp/>goal,<sp/>because<sp/>TEB<sp/>vectors<sp/>are<sp/>not<sp/>empty<sp/>or<sp/>TEB<sp/>is<sp/>already<sp/>initialized<sp/>(call<sp/>this<sp/>function<sp/>before<sp/>adding<sp/>states<sp/>yourself)!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>TEB<sp/>configurations:<sp/>%d,<sp/>Number<sp/>of<sp/>TEB<sp/>timediffs:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>(),<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a65d3e3334d2633d2f91bf31912c6fa74" kindref="member">sizeTimeDiffs</ref>());</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">TimedElasticBand::findClosestTrajectoryPose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>ref_point,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>distance,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin_idx<sp/>&lt;<sp/>0<sp/>||<sp/>begin_idx<sp/>&gt;=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist_sq<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>begin_idx;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist_sq<sp/>=<sp/>(ref_point<sp/>-<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>()).squaredNorm();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist_sq<sp/>&lt;<sp/>min_dist_sq)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_dist_sq<sp/>=<sp/>dist_sq;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_idx<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>*distance<sp/>=<sp/>std::sqrt(min_dist_sq);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_idx;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">TimedElasticBand::findClosestTrajectoryPose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>ref_line_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Ref&lt;const<sp/>Eigen::Vector2d&gt;&amp;<sp/>ref_line_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>distance)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>point<sp/>=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(point,<sp/>ref_line_start,<sp/>ref_line_end);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>min_dist)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_idx<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>*distance<sp/>=<sp/>min_dist;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_idx;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">TimedElasticBand::findClosestTrajectoryPose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehateb__local__planner_1aada6c9abcaa246f092095786ca9bf598" kindref="member">Point2dContainer</ref>&amp;<sp/>vertices,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>distance)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.empty())<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">findClosestTrajectoryPose</ref>(vertices.front());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">findClosestTrajectoryPose</ref>(vertices.front(),<sp/>vertices.back());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>point<sp/>=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist_to_polygon<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>static_cast&lt;int&gt;(vertices.size())<sp/>-<sp/>1;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist_to_polygon<sp/>=<sp/>std::min(dist_to_polygon,<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(point,<sp/>vertices[j],<sp/>vertices[j<sp/>+<sp/>1]));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>dist_to_polygon<sp/>=<sp/>std::min(dist_to_polygon,<sp/><ref refid="namespacehateb__local__planner_1adfa76447cf46833d01b4dd5647ecfe86" kindref="member">distance_point_to_segment_2d</ref>(point,<sp/>vertices.back(),<sp/>vertices.front()));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist_to_polygon<sp/>&lt;<sp/>min_dist)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>dist_to_polygon;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_idx<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>*distance<sp/>=<sp/>min_dist;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_idx;</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">TimedElasticBand::findClosestTrajectoryPose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obstacle&amp;<sp/>obstacle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>distance)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>pobst<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">PointObstacle*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;obstacle);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pobst)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">findClosestTrajectoryPose</ref>(pobst-&gt;position(),<sp/>distance);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>lobst<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">LineObstacle*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;obstacle);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lobst)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">findClosestTrajectoryPose</ref>(lobst-&gt;start(),<sp/>lobst-&gt;end(),<sp/>distance);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>polyobst<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">PolygonObstacle*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;obstacle);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(polyobst)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">findClosestTrajectoryPose</ref>(polyobst-&gt;vertices(),<sp/>distance);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a7d3b7b55f87d538b6b61275aae6a7117" kindref="member">findClosestTrajectoryPose</ref>(obstacle.getCentroid(),<sp/>distance);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1aca5d7bbd67a53062d95690efdd76056e" kindref="member">TimedElasticBand::updateAndPruneTEB</ref>(boost::optional&lt;const<sp/>PoseSE2&amp;&gt;<sp/>new_start,<sp/>boost::optional&lt;const<sp/>PoseSE2&amp;&gt;<sp/>new_goal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_samples)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>and<sp/>simple<sp/>approach:<sp/>change<sp/>only<sp/>start<sp/>confs<sp/>(and<sp/>virtual<sp/>start<sp/>conf<sp/>for<sp/>inital<sp/>velocity)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TEST<sp/>if<sp/>optimizer<sp/>can<sp/>handle<sp/>this<sp/>&quot;hard&quot;<sp/>placement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_start<sp/>&amp;&amp;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>nearest<sp/>state<sp/>(using<sp/>l2-norm)<sp/>in<sp/>order<sp/>to<sp/>prune<sp/>the<sp/>trajectory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(remove<sp/>already<sp/>passed<sp/>states)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist_cache<sp/>=<sp/>(new_start-&gt;position()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(0).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>()).norm();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lookahead<sp/>=<sp/>std::min&lt;int&gt;(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>-<sp/>min_samples,<sp/>10);<sp/><sp/></highlight><highlight class="comment">//<sp/>satisfy<sp/>min_samples,<sp/>otherwise<sp/>max<sp/>10<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nearest_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>lookahead;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>(new_start-&gt;position()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>()).norm();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>dist_cache)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_cache<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nearest_idx<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prune<sp/>trajectory<sp/>at<sp/>the<sp/>beginning<sp/>(and<sp/>extrapolate<sp/>sequences<sp/>at<sp/>the<sp/>end<sp/>if<sp/>the<sp/>horizon<sp/>is<sp/>fixed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nearest_idx<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nearest_idx<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>to<sp/>be<sp/>removed<sp/>(since<sp/>it<sp/>counts<sp/>from<sp/>0<sp/>;-)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING<sp/>delete<sp/>starting<sp/>at<sp/>pose<sp/>1,<sp/>and<sp/>overwrite<sp/>the<sp/>original<sp/>pose(0)<sp/>with<sp/>new_start,<sp/>since<sp/>Pose(0)<sp/>is<sp/>fixed<sp/>during<sp/>optimization!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a12f6ffe38c80d5e45abfee192a38dd93" kindref="member">deletePoses</ref>(1,<sp/>nearest_idx);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>first<sp/>states<sp/>such<sp/>that<sp/>the<sp/>closest<sp/>state<sp/>is<sp/>the<sp/>new<sp/>first<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a0fa4471c08f1271d95e885b8a53a40dc" kindref="member">deleteTimeDiffs</ref>(1,<sp/>nearest_idx);<sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>corresponding<sp/>time<sp/>differences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(0)<sp/>=<sp/>*new_start;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_goal<sp/>&amp;&amp;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a754e0c2cae23952c0dd7bb8b6ea55214" kindref="member">BackPose</ref>()<sp/>=<sp/>*new_goal;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal">};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a15a0f4902db31ab005e61cb826829704" kindref="member">TimedElasticBand::isTrajectoryInsideRegion</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_dist_behind_robot,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_poses)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>()<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius_sq<sp/>=<sp/>radius<sp/>*<sp/>radius;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_dist_behind_robot_sq<sp/>=<sp/>max_dist_behind_robot<sp/>*<sp/>max_dist_behind_robot;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>Eigen::Vector2d<sp/>robot_orient<sp/>=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(0).<ref refid="classhateb__local__planner_1_1PoseSE2_1a4fe1aba76e94d618fdde90d74a803dda" kindref="member">orientationUnitVec</ref>();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1af129042cb95fb6e6b31b237a216e92a2" kindref="member">sizePoses</ref>();<sp/>i<sp/>=<sp/>i<sp/>+<sp/>skip_poses<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>dist_vec<sp/>=<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(i).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>()<sp/>-<sp/><ref refid="classhateb__local__planner_1_1TimedElasticBand_1a512b98c5681038804b31d9747f1c149a" kindref="member">Pose</ref>(0).<ref refid="classhateb__local__planner_1_1PoseSE2_1abbe2946db8fad126b7762b5bc2ffb537" kindref="member">position</ref>();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist_sq<sp/>=<sp/>dist_vec.squaredNorm();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist_sq<sp/>&gt;<sp/>radius_sq)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;outside<sp/>robot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>behind<sp/>the<sp/>robot<sp/>with<sp/>a<sp/>different<sp/>distance,<sp/>if<sp/>specified<sp/>(or<sp/>&gt;=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_dist_behind_robot<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>dist_vec.dot(robot_orient)<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>dist_sq<sp/>&gt;<sp/>max_dist_behind_robot_sq)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;outside<sp/>robot<sp/>behind&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hateb_local_planner</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ptsingaman/ros_ws/CoHAN2.0/src/hateb_local_planner/src/timed_elastic_band.cpp"/>
  </compounddef>
</doxygen>
